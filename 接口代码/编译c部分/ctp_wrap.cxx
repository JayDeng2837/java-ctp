/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION)
#include <iostream>
#endif

#include <exception>

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
      jenv->DeleteLocalRef(jobj);
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };


  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    const char *message() const {
      return message_.c_str("Could not get exception message in JavaExceptionMessage");
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (throwable) {
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message());
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : classname_(0), msg_(copystr(msg ? msg : "Unspecified DirectorException message")) {
    }

    ~DirectorException() throw() {
      //delete[] classname_;
      //delete[] msg_;
    }

    const char *what() const throw() {
      return msg_;
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void raiseJavaException(JNIEnv *jenv) const {
      if (jenv) {
	jenv->ExceptionClear();

	jmethodID ctorMethodID = 0;
	jclass throwableclass = 0;
        if (classname_) {
          throwableclass = jenv->FindClass(classname_);
          if (throwableclass)
            ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
	}

	if (ctorMethodID) {
	  jenv->ThrowNew(throwableclass, what());
	} else {
	  SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
	}
      }
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	int msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }

}

namespace Swig {
  namespace {
    jclass jclass_CtpJNI = NULL;
    jmethodID director_methids[85];
  }
}

#ifdef SWIGPYTHON
  #define SWIG_FILE_WITH_INIT
#endif

#include "ThostFtdcUserApiDataType.h"
#include "ThostFtdcUserApiStruct.h"
#include "ThostFtdcTraderApi.h"
#include "ThostFtdcMdApi.h"



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "ctp_wrap.h"

SwigDirector_CThostFtdcMdSpi::SwigDirector_CThostFtdcMdSpi(JNIEnv *jenv) : CThostFtdcMdSpi(), Swig::Director(jenv) {
}

void SwigDirector_CThostFtdcMdSpi::OnFrontConnected() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    CThostFtdcMdSpi::OnFrontConnected();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[0], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcMdSpi::OnFrontConnected ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcMdSpi::OnFrontDisconnected(int nReason) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jnReason  ;
  
  if (!swig_override[1]) {
    CThostFtdcMdSpi::OnFrontDisconnected(nReason);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jnReason = (jint) nReason;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[1], swigjobj, jnReason);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcMdSpi::OnFrontDisconnected ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcMdSpi::OnHeartBeatWarning(int nTimeLapse) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jnTimeLapse  ;
  
  if (!swig_override[2]) {
    CThostFtdcMdSpi::OnHeartBeatWarning(nTimeLapse);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jnTimeLapse = (jint) nTimeLapse;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[2], swigjobj, jnTimeLapse);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcMdSpi::OnHeartBeatWarning ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcMdSpi::OnRspUserLogin(CThostFtdcRspUserLoginField *pRspUserLogin, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpRspUserLogin = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[3]) {
    CThostFtdcMdSpi::OnRspUserLogin(pRspUserLogin,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcRspUserLoginField **)&jpRspUserLogin) = (CThostFtdcRspUserLoginField *) pRspUserLogin; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[3], swigjobj, jpRspUserLogin, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcMdSpi::OnRspUserLogin ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcMdSpi::OnRspUserLogout(CThostFtdcUserLogoutField *pUserLogout, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpUserLogout = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[4]) {
    CThostFtdcMdSpi::OnRspUserLogout(pUserLogout,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcUserLogoutField **)&jpUserLogout) = (CThostFtdcUserLogoutField *) pUserLogout; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[4], swigjobj, jpUserLogout, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcMdSpi::OnRspUserLogout ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcMdSpi::OnRspError(CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[5]) {
    CThostFtdcMdSpi::OnRspError(pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[5], swigjobj, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcMdSpi::OnRspError ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcMdSpi::OnRspSubMarketData(CThostFtdcSpecificInstrumentField *pSpecificInstrument, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpSpecificInstrument = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[6]) {
    CThostFtdcMdSpi::OnRspSubMarketData(pSpecificInstrument,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcSpecificInstrumentField **)&jpSpecificInstrument) = (CThostFtdcSpecificInstrumentField *) pSpecificInstrument; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[6], swigjobj, jpSpecificInstrument, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcMdSpi::OnRspSubMarketData ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcMdSpi::OnRspUnSubMarketData(CThostFtdcSpecificInstrumentField *pSpecificInstrument, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpSpecificInstrument = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[7]) {
    CThostFtdcMdSpi::OnRspUnSubMarketData(pSpecificInstrument,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcSpecificInstrumentField **)&jpSpecificInstrument) = (CThostFtdcSpecificInstrumentField *) pSpecificInstrument; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[7], swigjobj, jpSpecificInstrument, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcMdSpi::OnRspUnSubMarketData ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcMdSpi::OnRtnDepthMarketData(CThostFtdcDepthMarketDataField *pDepthMarketData) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpDepthMarketData = 0 ;
  
  if (!swig_override[8]) {
    CThostFtdcMdSpi::OnRtnDepthMarketData(pDepthMarketData);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcDepthMarketDataField **)&jpDepthMarketData) = (CThostFtdcDepthMarketDataField *) pDepthMarketData; 
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[8], swigjobj, jpDepthMarketData);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcMdSpi::OnRtnDepthMarketData ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcMdSpi::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onFrontConnected", "()V", NULL 
    },
    {
      "onFrontDisconnected", "(I)V", NULL 
    },
    {
      "onHeartBeatWarning", "(I)V", NULL 
    },
    {
      "onRspUserLogin", "(Lcom/ctp/CThostFtdcRspUserLoginField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspUserLogout", "(Lcom/ctp/CThostFtdcUserLogoutField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspError", "(Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspSubMarketData", "(Lcom/ctp/CThostFtdcSpecificInstrumentField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspUnSubMarketData", "(Lcom/ctp/CThostFtdcSpecificInstrumentField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRtnDepthMarketData", "(Lcom/ctp/CThostFtdcDepthMarketDataField;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/ctp/CThostFtdcMdSpi");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 9; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_CThostFtdcTraderSpi::SwigDirector_CThostFtdcTraderSpi(JNIEnv *jenv) : CThostFtdcTraderSpi(), Swig::Director(jenv) {
}

void SwigDirector_CThostFtdcTraderSpi::OnFrontConnected() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[0]) {
    CThostFtdcTraderSpi::OnFrontConnected();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[9], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnFrontConnected ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnFrontDisconnected(int nReason) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jnReason  ;
  
  if (!swig_override[1]) {
    CThostFtdcTraderSpi::OnFrontDisconnected(nReason);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jnReason = (jint) nReason;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[10], swigjobj, jnReason);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnFrontDisconnected ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnHeartBeatWarning(int nTimeLapse) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jint jnTimeLapse  ;
  
  if (!swig_override[2]) {
    CThostFtdcTraderSpi::OnHeartBeatWarning(nTimeLapse);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jnTimeLapse = (jint) nTimeLapse;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[11], swigjobj, jnTimeLapse);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnHeartBeatWarning ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspAuthenticate(CThostFtdcRspAuthenticateField *pRspAuthenticateField, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpRspAuthenticateField = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[3]) {
    CThostFtdcTraderSpi::OnRspAuthenticate(pRspAuthenticateField,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcRspAuthenticateField **)&jpRspAuthenticateField) = (CThostFtdcRspAuthenticateField *) pRspAuthenticateField; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[12], swigjobj, jpRspAuthenticateField, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspAuthenticate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspUserLogin(CThostFtdcRspUserLoginField *pRspUserLogin, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpRspUserLogin = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[4]) {
    CThostFtdcTraderSpi::OnRspUserLogin(pRspUserLogin,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcRspUserLoginField **)&jpRspUserLogin) = (CThostFtdcRspUserLoginField *) pRspUserLogin; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[13], swigjobj, jpRspUserLogin, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspUserLogin ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspUserLogout(CThostFtdcUserLogoutField *pUserLogout, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpUserLogout = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[5]) {
    CThostFtdcTraderSpi::OnRspUserLogout(pUserLogout,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcUserLogoutField **)&jpUserLogout) = (CThostFtdcUserLogoutField *) pUserLogout; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[14], swigjobj, jpUserLogout, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspUserLogout ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspUserPasswordUpdate(CThostFtdcUserPasswordUpdateField *pUserPasswordUpdate, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpUserPasswordUpdate = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[6]) {
    CThostFtdcTraderSpi::OnRspUserPasswordUpdate(pUserPasswordUpdate,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcUserPasswordUpdateField **)&jpUserPasswordUpdate) = (CThostFtdcUserPasswordUpdateField *) pUserPasswordUpdate; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[15], swigjobj, jpUserPasswordUpdate, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspUserPasswordUpdate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspTradingAccountPasswordUpdate(CThostFtdcTradingAccountPasswordUpdateField *pTradingAccountPasswordUpdate, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpTradingAccountPasswordUpdate = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[7]) {
    CThostFtdcTraderSpi::OnRspTradingAccountPasswordUpdate(pTradingAccountPasswordUpdate,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcTradingAccountPasswordUpdateField **)&jpTradingAccountPasswordUpdate) = (CThostFtdcTradingAccountPasswordUpdateField *) pTradingAccountPasswordUpdate; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[16], swigjobj, jpTradingAccountPasswordUpdate, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspTradingAccountPasswordUpdate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspOrderInsert(CThostFtdcInputOrderField *pInputOrder, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpInputOrder = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[8]) {
    CThostFtdcTraderSpi::OnRspOrderInsert(pInputOrder,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcInputOrderField **)&jpInputOrder) = (CThostFtdcInputOrderField *) pInputOrder; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[17], swigjobj, jpInputOrder, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspOrderInsert ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspParkedOrderInsert(CThostFtdcParkedOrderField *pParkedOrder, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpParkedOrder = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[9]) {
    CThostFtdcTraderSpi::OnRspParkedOrderInsert(pParkedOrder,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcParkedOrderField **)&jpParkedOrder) = (CThostFtdcParkedOrderField *) pParkedOrder; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[18], swigjobj, jpParkedOrder, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspParkedOrderInsert ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspParkedOrderAction(CThostFtdcParkedOrderActionField *pParkedOrderAction, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpParkedOrderAction = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[10]) {
    CThostFtdcTraderSpi::OnRspParkedOrderAction(pParkedOrderAction,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcParkedOrderActionField **)&jpParkedOrderAction) = (CThostFtdcParkedOrderActionField *) pParkedOrderAction; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[19], swigjobj, jpParkedOrderAction, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspParkedOrderAction ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspOrderAction(CThostFtdcInputOrderActionField *pInputOrderAction, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpInputOrderAction = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[11]) {
    CThostFtdcTraderSpi::OnRspOrderAction(pInputOrderAction,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcInputOrderActionField **)&jpInputOrderAction) = (CThostFtdcInputOrderActionField *) pInputOrderAction; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[20], swigjobj, jpInputOrderAction, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspOrderAction ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspQueryMaxOrderVolume(CThostFtdcQueryMaxOrderVolumeField *pQueryMaxOrderVolume, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpQueryMaxOrderVolume = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[12]) {
    CThostFtdcTraderSpi::OnRspQueryMaxOrderVolume(pQueryMaxOrderVolume,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcQueryMaxOrderVolumeField **)&jpQueryMaxOrderVolume) = (CThostFtdcQueryMaxOrderVolumeField *) pQueryMaxOrderVolume; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[21], swigjobj, jpQueryMaxOrderVolume, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspQueryMaxOrderVolume ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspSettlementInfoConfirm(CThostFtdcSettlementInfoConfirmField *pSettlementInfoConfirm, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpSettlementInfoConfirm = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[13]) {
    CThostFtdcTraderSpi::OnRspSettlementInfoConfirm(pSettlementInfoConfirm,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcSettlementInfoConfirmField **)&jpSettlementInfoConfirm) = (CThostFtdcSettlementInfoConfirmField *) pSettlementInfoConfirm; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[22], swigjobj, jpSettlementInfoConfirm, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspSettlementInfoConfirm ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspRemoveParkedOrder(CThostFtdcRemoveParkedOrderField *pRemoveParkedOrder, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpRemoveParkedOrder = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[14]) {
    CThostFtdcTraderSpi::OnRspRemoveParkedOrder(pRemoveParkedOrder,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcRemoveParkedOrderField **)&jpRemoveParkedOrder) = (CThostFtdcRemoveParkedOrderField *) pRemoveParkedOrder; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[23], swigjobj, jpRemoveParkedOrder, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspRemoveParkedOrder ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspRemoveParkedOrderAction(CThostFtdcRemoveParkedOrderActionField *pRemoveParkedOrderAction, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpRemoveParkedOrderAction = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[15]) {
    CThostFtdcTraderSpi::OnRspRemoveParkedOrderAction(pRemoveParkedOrderAction,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcRemoveParkedOrderActionField **)&jpRemoveParkedOrderAction) = (CThostFtdcRemoveParkedOrderActionField *) pRemoveParkedOrderAction; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[24], swigjobj, jpRemoveParkedOrderAction, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspRemoveParkedOrderAction ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspQryOrder(CThostFtdcOrderField *pOrder, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpOrder = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[16]) {
    CThostFtdcTraderSpi::OnRspQryOrder(pOrder,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcOrderField **)&jpOrder) = (CThostFtdcOrderField *) pOrder; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[25], swigjobj, jpOrder, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspQryOrder ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspQryTrade(CThostFtdcTradeField *pTrade, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpTrade = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[17]) {
    CThostFtdcTraderSpi::OnRspQryTrade(pTrade,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcTradeField **)&jpTrade) = (CThostFtdcTradeField *) pTrade; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[26], swigjobj, jpTrade, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspQryTrade ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspQryInvestorPosition(CThostFtdcInvestorPositionField *pInvestorPosition, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpInvestorPosition = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[18]) {
    CThostFtdcTraderSpi::OnRspQryInvestorPosition(pInvestorPosition,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcInvestorPositionField **)&jpInvestorPosition) = (CThostFtdcInvestorPositionField *) pInvestorPosition; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[27], swigjobj, jpInvestorPosition, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspQryInvestorPosition ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspQryTradingAccount(CThostFtdcTradingAccountField *pTradingAccount, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpTradingAccount = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[19]) {
    CThostFtdcTraderSpi::OnRspQryTradingAccount(pTradingAccount,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcTradingAccountField **)&jpTradingAccount) = (CThostFtdcTradingAccountField *) pTradingAccount; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[28], swigjobj, jpTradingAccount, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspQryTradingAccount ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspQryInvestor(CThostFtdcInvestorField *pInvestor, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpInvestor = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[20]) {
    CThostFtdcTraderSpi::OnRspQryInvestor(pInvestor,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcInvestorField **)&jpInvestor) = (CThostFtdcInvestorField *) pInvestor; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[29], swigjobj, jpInvestor, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspQryInvestor ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspQryTradingCode(CThostFtdcTradingCodeField *pTradingCode, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpTradingCode = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[21]) {
    CThostFtdcTraderSpi::OnRspQryTradingCode(pTradingCode,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcTradingCodeField **)&jpTradingCode) = (CThostFtdcTradingCodeField *) pTradingCode; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[30], swigjobj, jpTradingCode, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspQryTradingCode ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspQryInstrumentMarginRate(CThostFtdcInstrumentMarginRateField *pInstrumentMarginRate, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpInstrumentMarginRate = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[22]) {
    CThostFtdcTraderSpi::OnRspQryInstrumentMarginRate(pInstrumentMarginRate,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcInstrumentMarginRateField **)&jpInstrumentMarginRate) = (CThostFtdcInstrumentMarginRateField *) pInstrumentMarginRate; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[31], swigjobj, jpInstrumentMarginRate, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspQryInstrumentMarginRate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspQryInstrumentCommissionRate(CThostFtdcInstrumentCommissionRateField *pInstrumentCommissionRate, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpInstrumentCommissionRate = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[23]) {
    CThostFtdcTraderSpi::OnRspQryInstrumentCommissionRate(pInstrumentCommissionRate,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcInstrumentCommissionRateField **)&jpInstrumentCommissionRate) = (CThostFtdcInstrumentCommissionRateField *) pInstrumentCommissionRate; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[32], swigjobj, jpInstrumentCommissionRate, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspQryInstrumentCommissionRate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspQryExchange(CThostFtdcExchangeField *pExchange, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpExchange = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[24]) {
    CThostFtdcTraderSpi::OnRspQryExchange(pExchange,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcExchangeField **)&jpExchange) = (CThostFtdcExchangeField *) pExchange; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[33], swigjobj, jpExchange, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspQryExchange ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspQryInstrument(CThostFtdcInstrumentField *pInstrument, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpInstrument = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[25]) {
    CThostFtdcTraderSpi::OnRspQryInstrument(pInstrument,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcInstrumentField **)&jpInstrument) = (CThostFtdcInstrumentField *) pInstrument; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[34], swigjobj, jpInstrument, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspQryInstrument ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspQryDepthMarketData(CThostFtdcDepthMarketDataField *pDepthMarketData, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpDepthMarketData = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[26]) {
    CThostFtdcTraderSpi::OnRspQryDepthMarketData(pDepthMarketData,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcDepthMarketDataField **)&jpDepthMarketData) = (CThostFtdcDepthMarketDataField *) pDepthMarketData; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[35], swigjobj, jpDepthMarketData, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspQryDepthMarketData ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspQrySettlementInfo(CThostFtdcSettlementInfoField *pSettlementInfo, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpSettlementInfo = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[27]) {
    CThostFtdcTraderSpi::OnRspQrySettlementInfo(pSettlementInfo,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcSettlementInfoField **)&jpSettlementInfo) = (CThostFtdcSettlementInfoField *) pSettlementInfo; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[36], swigjobj, jpSettlementInfo, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspQrySettlementInfo ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspQryTransferBank(CThostFtdcTransferBankField *pTransferBank, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpTransferBank = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[28]) {
    CThostFtdcTraderSpi::OnRspQryTransferBank(pTransferBank,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcTransferBankField **)&jpTransferBank) = (CThostFtdcTransferBankField *) pTransferBank; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[37], swigjobj, jpTransferBank, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspQryTransferBank ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspQryInvestorPositionDetail(CThostFtdcInvestorPositionDetailField *pInvestorPositionDetail, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpInvestorPositionDetail = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[29]) {
    CThostFtdcTraderSpi::OnRspQryInvestorPositionDetail(pInvestorPositionDetail,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcInvestorPositionDetailField **)&jpInvestorPositionDetail) = (CThostFtdcInvestorPositionDetailField *) pInvestorPositionDetail; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[38], swigjobj, jpInvestorPositionDetail, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspQryInvestorPositionDetail ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspQryNotice(CThostFtdcNoticeField *pNotice, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpNotice = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[30]) {
    CThostFtdcTraderSpi::OnRspQryNotice(pNotice,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcNoticeField **)&jpNotice) = (CThostFtdcNoticeField *) pNotice; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[39], swigjobj, jpNotice, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspQryNotice ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspQrySettlementInfoConfirm(CThostFtdcSettlementInfoConfirmField *pSettlementInfoConfirm, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpSettlementInfoConfirm = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[31]) {
    CThostFtdcTraderSpi::OnRspQrySettlementInfoConfirm(pSettlementInfoConfirm,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcSettlementInfoConfirmField **)&jpSettlementInfoConfirm) = (CThostFtdcSettlementInfoConfirmField *) pSettlementInfoConfirm; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[40], swigjobj, jpSettlementInfoConfirm, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspQrySettlementInfoConfirm ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspQryInvestorPositionCombineDetail(CThostFtdcInvestorPositionCombineDetailField *pInvestorPositionCombineDetail, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpInvestorPositionCombineDetail = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[32]) {
    CThostFtdcTraderSpi::OnRspQryInvestorPositionCombineDetail(pInvestorPositionCombineDetail,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcInvestorPositionCombineDetailField **)&jpInvestorPositionCombineDetail) = (CThostFtdcInvestorPositionCombineDetailField *) pInvestorPositionCombineDetail; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[41], swigjobj, jpInvestorPositionCombineDetail, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspQryInvestorPositionCombineDetail ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspQryCFMMCTradingAccountKey(CThostFtdcCFMMCTradingAccountKeyField *pCFMMCTradingAccountKey, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpCFMMCTradingAccountKey = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[33]) {
    CThostFtdcTraderSpi::OnRspQryCFMMCTradingAccountKey(pCFMMCTradingAccountKey,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcCFMMCTradingAccountKeyField **)&jpCFMMCTradingAccountKey) = (CThostFtdcCFMMCTradingAccountKeyField *) pCFMMCTradingAccountKey; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[42], swigjobj, jpCFMMCTradingAccountKey, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspQryCFMMCTradingAccountKey ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspQryEWarrantOffset(CThostFtdcEWarrantOffsetField *pEWarrantOffset, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpEWarrantOffset = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[34]) {
    CThostFtdcTraderSpi::OnRspQryEWarrantOffset(pEWarrantOffset,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcEWarrantOffsetField **)&jpEWarrantOffset) = (CThostFtdcEWarrantOffsetField *) pEWarrantOffset; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[43], swigjobj, jpEWarrantOffset, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspQryEWarrantOffset ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspQryInvestorProductGroupMargin(CThostFtdcInvestorProductGroupMarginField *pInvestorProductGroupMargin, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpInvestorProductGroupMargin = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[35]) {
    CThostFtdcTraderSpi::OnRspQryInvestorProductGroupMargin(pInvestorProductGroupMargin,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcInvestorProductGroupMarginField **)&jpInvestorProductGroupMargin) = (CThostFtdcInvestorProductGroupMarginField *) pInvestorProductGroupMargin; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[44], swigjobj, jpInvestorProductGroupMargin, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspQryInvestorProductGroupMargin ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspQryExchangeMarginRate(CThostFtdcExchangeMarginRateField *pExchangeMarginRate, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpExchangeMarginRate = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[36]) {
    CThostFtdcTraderSpi::OnRspQryExchangeMarginRate(pExchangeMarginRate,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcExchangeMarginRateField **)&jpExchangeMarginRate) = (CThostFtdcExchangeMarginRateField *) pExchangeMarginRate; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[45], swigjobj, jpExchangeMarginRate, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspQryExchangeMarginRate ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspQryExchangeMarginRateAdjust(CThostFtdcExchangeMarginRateAdjustField *pExchangeMarginRateAdjust, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpExchangeMarginRateAdjust = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[37]) {
    CThostFtdcTraderSpi::OnRspQryExchangeMarginRateAdjust(pExchangeMarginRateAdjust,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcExchangeMarginRateAdjustField **)&jpExchangeMarginRateAdjust) = (CThostFtdcExchangeMarginRateAdjustField *) pExchangeMarginRateAdjust; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[46], swigjobj, jpExchangeMarginRateAdjust, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspQryExchangeMarginRateAdjust ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspQryTransferSerial(CThostFtdcTransferSerialField *pTransferSerial, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpTransferSerial = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[38]) {
    CThostFtdcTraderSpi::OnRspQryTransferSerial(pTransferSerial,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcTransferSerialField **)&jpTransferSerial) = (CThostFtdcTransferSerialField *) pTransferSerial; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[47], swigjobj, jpTransferSerial, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspQryTransferSerial ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspQryAccountregister(CThostFtdcAccountregisterField *pAccountregister, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpAccountregister = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[39]) {
    CThostFtdcTraderSpi::OnRspQryAccountregister(pAccountregister,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcAccountregisterField **)&jpAccountregister) = (CThostFtdcAccountregisterField *) pAccountregister; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[48], swigjobj, jpAccountregister, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspQryAccountregister ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspError(CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[40]) {
    CThostFtdcTraderSpi::OnRspError(pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[49], swigjobj, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspError ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRtnOrder(CThostFtdcOrderField *pOrder) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpOrder = 0 ;
  
  if (!swig_override[41]) {
    CThostFtdcTraderSpi::OnRtnOrder(pOrder);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcOrderField **)&jpOrder) = (CThostFtdcOrderField *) pOrder; 
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[50], swigjobj, jpOrder);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRtnOrder ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRtnTrade(CThostFtdcTradeField *pTrade) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpTrade = 0 ;
  
  if (!swig_override[42]) {
    CThostFtdcTraderSpi::OnRtnTrade(pTrade);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcTradeField **)&jpTrade) = (CThostFtdcTradeField *) pTrade; 
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[51], swigjobj, jpTrade);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRtnTrade ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnErrRtnOrderInsert(CThostFtdcInputOrderField *pInputOrder, CThostFtdcRspInfoField *pRspInfo) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpInputOrder = 0 ;
  jlong jpRspInfo = 0 ;
  
  if (!swig_override[43]) {
    CThostFtdcTraderSpi::OnErrRtnOrderInsert(pInputOrder,pRspInfo);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcInputOrderField **)&jpInputOrder) = (CThostFtdcInputOrderField *) pInputOrder; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[52], swigjobj, jpInputOrder, jpRspInfo);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnErrRtnOrderInsert ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnErrRtnOrderAction(CThostFtdcOrderActionField *pOrderAction, CThostFtdcRspInfoField *pRspInfo) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpOrderAction = 0 ;
  jlong jpRspInfo = 0 ;
  
  if (!swig_override[44]) {
    CThostFtdcTraderSpi::OnErrRtnOrderAction(pOrderAction,pRspInfo);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcOrderActionField **)&jpOrderAction) = (CThostFtdcOrderActionField *) pOrderAction; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[53], swigjobj, jpOrderAction, jpRspInfo);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnErrRtnOrderAction ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRtnInstrumentStatus(CThostFtdcInstrumentStatusField *pInstrumentStatus) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpInstrumentStatus = 0 ;
  
  if (!swig_override[45]) {
    CThostFtdcTraderSpi::OnRtnInstrumentStatus(pInstrumentStatus);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcInstrumentStatusField **)&jpInstrumentStatus) = (CThostFtdcInstrumentStatusField *) pInstrumentStatus; 
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[54], swigjobj, jpInstrumentStatus);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRtnInstrumentStatus ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRtnTradingNotice(CThostFtdcTradingNoticeInfoField *pTradingNoticeInfo) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpTradingNoticeInfo = 0 ;
  
  if (!swig_override[46]) {
    CThostFtdcTraderSpi::OnRtnTradingNotice(pTradingNoticeInfo);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcTradingNoticeInfoField **)&jpTradingNoticeInfo) = (CThostFtdcTradingNoticeInfoField *) pTradingNoticeInfo; 
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[55], swigjobj, jpTradingNoticeInfo);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRtnTradingNotice ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRtnErrorConditionalOrder(CThostFtdcErrorConditionalOrderField *pErrorConditionalOrder) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpErrorConditionalOrder = 0 ;
  
  if (!swig_override[47]) {
    CThostFtdcTraderSpi::OnRtnErrorConditionalOrder(pErrorConditionalOrder);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcErrorConditionalOrderField **)&jpErrorConditionalOrder) = (CThostFtdcErrorConditionalOrderField *) pErrorConditionalOrder; 
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[56], swigjobj, jpErrorConditionalOrder);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRtnErrorConditionalOrder ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspQryContractBank(CThostFtdcContractBankField *pContractBank, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpContractBank = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[48]) {
    CThostFtdcTraderSpi::OnRspQryContractBank(pContractBank,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcContractBankField **)&jpContractBank) = (CThostFtdcContractBankField *) pContractBank; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[57], swigjobj, jpContractBank, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspQryContractBank ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspQryParkedOrder(CThostFtdcParkedOrderField *pParkedOrder, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpParkedOrder = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[49]) {
    CThostFtdcTraderSpi::OnRspQryParkedOrder(pParkedOrder,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcParkedOrderField **)&jpParkedOrder) = (CThostFtdcParkedOrderField *) pParkedOrder; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[58], swigjobj, jpParkedOrder, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspQryParkedOrder ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspQryParkedOrderAction(CThostFtdcParkedOrderActionField *pParkedOrderAction, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpParkedOrderAction = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[50]) {
    CThostFtdcTraderSpi::OnRspQryParkedOrderAction(pParkedOrderAction,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcParkedOrderActionField **)&jpParkedOrderAction) = (CThostFtdcParkedOrderActionField *) pParkedOrderAction; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[59], swigjobj, jpParkedOrderAction, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspQryParkedOrderAction ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspQryTradingNotice(CThostFtdcTradingNoticeField *pTradingNotice, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpTradingNotice = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[51]) {
    CThostFtdcTraderSpi::OnRspQryTradingNotice(pTradingNotice,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcTradingNoticeField **)&jpTradingNotice) = (CThostFtdcTradingNoticeField *) pTradingNotice; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[60], swigjobj, jpTradingNotice, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspQryTradingNotice ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspQryBrokerTradingParams(CThostFtdcBrokerTradingParamsField *pBrokerTradingParams, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpBrokerTradingParams = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[52]) {
    CThostFtdcTraderSpi::OnRspQryBrokerTradingParams(pBrokerTradingParams,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcBrokerTradingParamsField **)&jpBrokerTradingParams) = (CThostFtdcBrokerTradingParamsField *) pBrokerTradingParams; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[61], swigjobj, jpBrokerTradingParams, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspQryBrokerTradingParams ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspQryBrokerTradingAlgos(CThostFtdcBrokerTradingAlgosField *pBrokerTradingAlgos, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpBrokerTradingAlgos = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[53]) {
    CThostFtdcTraderSpi::OnRspQryBrokerTradingAlgos(pBrokerTradingAlgos,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcBrokerTradingAlgosField **)&jpBrokerTradingAlgos) = (CThostFtdcBrokerTradingAlgosField *) pBrokerTradingAlgos; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[62], swigjobj, jpBrokerTradingAlgos, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspQryBrokerTradingAlgos ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRtnFromBankToFutureByBank(CThostFtdcRspTransferField *pRspTransfer) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpRspTransfer = 0 ;
  
  if (!swig_override[54]) {
    CThostFtdcTraderSpi::OnRtnFromBankToFutureByBank(pRspTransfer);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcRspTransferField **)&jpRspTransfer) = (CThostFtdcRspTransferField *) pRspTransfer; 
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[63], swigjobj, jpRspTransfer);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRtnFromBankToFutureByBank ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRtnFromFutureToBankByBank(CThostFtdcRspTransferField *pRspTransfer) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpRspTransfer = 0 ;
  
  if (!swig_override[55]) {
    CThostFtdcTraderSpi::OnRtnFromFutureToBankByBank(pRspTransfer);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcRspTransferField **)&jpRspTransfer) = (CThostFtdcRspTransferField *) pRspTransfer; 
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[64], swigjobj, jpRspTransfer);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRtnFromFutureToBankByBank ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRtnRepealFromBankToFutureByBank(CThostFtdcRspRepealField *pRspRepeal) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpRspRepeal = 0 ;
  
  if (!swig_override[56]) {
    CThostFtdcTraderSpi::OnRtnRepealFromBankToFutureByBank(pRspRepeal);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcRspRepealField **)&jpRspRepeal) = (CThostFtdcRspRepealField *) pRspRepeal; 
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[65], swigjobj, jpRspRepeal);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRtnRepealFromBankToFutureByBank ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRtnRepealFromFutureToBankByBank(CThostFtdcRspRepealField *pRspRepeal) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpRspRepeal = 0 ;
  
  if (!swig_override[57]) {
    CThostFtdcTraderSpi::OnRtnRepealFromFutureToBankByBank(pRspRepeal);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcRspRepealField **)&jpRspRepeal) = (CThostFtdcRspRepealField *) pRspRepeal; 
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[66], swigjobj, jpRspRepeal);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRtnRepealFromFutureToBankByBank ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRtnFromBankToFutureByFuture(CThostFtdcRspTransferField *pRspTransfer) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpRspTransfer = 0 ;
  
  if (!swig_override[58]) {
    CThostFtdcTraderSpi::OnRtnFromBankToFutureByFuture(pRspTransfer);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcRspTransferField **)&jpRspTransfer) = (CThostFtdcRspTransferField *) pRspTransfer; 
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[67], swigjobj, jpRspTransfer);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRtnFromBankToFutureByFuture ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRtnFromFutureToBankByFuture(CThostFtdcRspTransferField *pRspTransfer) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpRspTransfer = 0 ;
  
  if (!swig_override[59]) {
    CThostFtdcTraderSpi::OnRtnFromFutureToBankByFuture(pRspTransfer);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcRspTransferField **)&jpRspTransfer) = (CThostFtdcRspTransferField *) pRspTransfer; 
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[68], swigjobj, jpRspTransfer);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRtnFromFutureToBankByFuture ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRtnRepealFromBankToFutureByFutureManual(CThostFtdcRspRepealField *pRspRepeal) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpRspRepeal = 0 ;
  
  if (!swig_override[60]) {
    CThostFtdcTraderSpi::OnRtnRepealFromBankToFutureByFutureManual(pRspRepeal);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcRspRepealField **)&jpRspRepeal) = (CThostFtdcRspRepealField *) pRspRepeal; 
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[69], swigjobj, jpRspRepeal);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRtnRepealFromBankToFutureByFutureManual ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRtnRepealFromFutureToBankByFutureManual(CThostFtdcRspRepealField *pRspRepeal) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpRspRepeal = 0 ;
  
  if (!swig_override[61]) {
    CThostFtdcTraderSpi::OnRtnRepealFromFutureToBankByFutureManual(pRspRepeal);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcRspRepealField **)&jpRspRepeal) = (CThostFtdcRspRepealField *) pRspRepeal; 
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[70], swigjobj, jpRspRepeal);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRtnRepealFromFutureToBankByFutureManual ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRtnQueryBankBalanceByFuture(CThostFtdcNotifyQueryAccountField *pNotifyQueryAccount) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpNotifyQueryAccount = 0 ;
  
  if (!swig_override[62]) {
    CThostFtdcTraderSpi::OnRtnQueryBankBalanceByFuture(pNotifyQueryAccount);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcNotifyQueryAccountField **)&jpNotifyQueryAccount) = (CThostFtdcNotifyQueryAccountField *) pNotifyQueryAccount; 
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[71], swigjobj, jpNotifyQueryAccount);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRtnQueryBankBalanceByFuture ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnErrRtnBankToFutureByFuture(CThostFtdcReqTransferField *pReqTransfer, CThostFtdcRspInfoField *pRspInfo) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpReqTransfer = 0 ;
  jlong jpRspInfo = 0 ;
  
  if (!swig_override[63]) {
    CThostFtdcTraderSpi::OnErrRtnBankToFutureByFuture(pReqTransfer,pRspInfo);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcReqTransferField **)&jpReqTransfer) = (CThostFtdcReqTransferField *) pReqTransfer; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[72], swigjobj, jpReqTransfer, jpRspInfo);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnErrRtnBankToFutureByFuture ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnErrRtnFutureToBankByFuture(CThostFtdcReqTransferField *pReqTransfer, CThostFtdcRspInfoField *pRspInfo) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpReqTransfer = 0 ;
  jlong jpRspInfo = 0 ;
  
  if (!swig_override[64]) {
    CThostFtdcTraderSpi::OnErrRtnFutureToBankByFuture(pReqTransfer,pRspInfo);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcReqTransferField **)&jpReqTransfer) = (CThostFtdcReqTransferField *) pReqTransfer; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[73], swigjobj, jpReqTransfer, jpRspInfo);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnErrRtnFutureToBankByFuture ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnErrRtnRepealBankToFutureByFutureManual(CThostFtdcReqRepealField *pReqRepeal, CThostFtdcRspInfoField *pRspInfo) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpReqRepeal = 0 ;
  jlong jpRspInfo = 0 ;
  
  if (!swig_override[65]) {
    CThostFtdcTraderSpi::OnErrRtnRepealBankToFutureByFutureManual(pReqRepeal,pRspInfo);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcReqRepealField **)&jpReqRepeal) = (CThostFtdcReqRepealField *) pReqRepeal; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[74], swigjobj, jpReqRepeal, jpRspInfo);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnErrRtnRepealBankToFutureByFutureManual ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnErrRtnRepealFutureToBankByFutureManual(CThostFtdcReqRepealField *pReqRepeal, CThostFtdcRspInfoField *pRspInfo) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpReqRepeal = 0 ;
  jlong jpRspInfo = 0 ;
  
  if (!swig_override[66]) {
    CThostFtdcTraderSpi::OnErrRtnRepealFutureToBankByFutureManual(pReqRepeal,pRspInfo);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcReqRepealField **)&jpReqRepeal) = (CThostFtdcReqRepealField *) pReqRepeal; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[75], swigjobj, jpReqRepeal, jpRspInfo);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnErrRtnRepealFutureToBankByFutureManual ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnErrRtnQueryBankBalanceByFuture(CThostFtdcReqQueryAccountField *pReqQueryAccount, CThostFtdcRspInfoField *pRspInfo) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpReqQueryAccount = 0 ;
  jlong jpRspInfo = 0 ;
  
  if (!swig_override[67]) {
    CThostFtdcTraderSpi::OnErrRtnQueryBankBalanceByFuture(pReqQueryAccount,pRspInfo);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcReqQueryAccountField **)&jpReqQueryAccount) = (CThostFtdcReqQueryAccountField *) pReqQueryAccount; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[76], swigjobj, jpReqQueryAccount, jpRspInfo);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnErrRtnQueryBankBalanceByFuture ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRtnRepealFromBankToFutureByFuture(CThostFtdcRspRepealField *pRspRepeal) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpRspRepeal = 0 ;
  
  if (!swig_override[68]) {
    CThostFtdcTraderSpi::OnRtnRepealFromBankToFutureByFuture(pRspRepeal);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcRspRepealField **)&jpRspRepeal) = (CThostFtdcRspRepealField *) pRspRepeal; 
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[77], swigjobj, jpRspRepeal);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRtnRepealFromBankToFutureByFuture ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRtnRepealFromFutureToBankByFuture(CThostFtdcRspRepealField *pRspRepeal) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpRspRepeal = 0 ;
  
  if (!swig_override[69]) {
    CThostFtdcTraderSpi::OnRtnRepealFromFutureToBankByFuture(pRspRepeal);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcRspRepealField **)&jpRspRepeal) = (CThostFtdcRspRepealField *) pRspRepeal; 
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[78], swigjobj, jpRspRepeal);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRtnRepealFromFutureToBankByFuture ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspFromBankToFutureByFuture(CThostFtdcReqTransferField *pReqTransfer, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpReqTransfer = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[70]) {
    CThostFtdcTraderSpi::OnRspFromBankToFutureByFuture(pReqTransfer,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcReqTransferField **)&jpReqTransfer) = (CThostFtdcReqTransferField *) pReqTransfer; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[79], swigjobj, jpReqTransfer, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspFromBankToFutureByFuture ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspFromFutureToBankByFuture(CThostFtdcReqTransferField *pReqTransfer, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpReqTransfer = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[71]) {
    CThostFtdcTraderSpi::OnRspFromFutureToBankByFuture(pReqTransfer,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcReqTransferField **)&jpReqTransfer) = (CThostFtdcReqTransferField *) pReqTransfer; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[80], swigjobj, jpReqTransfer, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspFromFutureToBankByFuture ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRspQueryBankAccountMoneyByFuture(CThostFtdcReqQueryAccountField *pReqQueryAccount, CThostFtdcRspInfoField *pRspInfo, int nRequestID, bool bIsLast) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpReqQueryAccount = 0 ;
  jlong jpRspInfo = 0 ;
  jint jnRequestID  ;
  jboolean jbIsLast  ;
  
  if (!swig_override[72]) {
    CThostFtdcTraderSpi::OnRspQueryBankAccountMoneyByFuture(pReqQueryAccount,pRspInfo,nRequestID,bIsLast);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcReqQueryAccountField **)&jpReqQueryAccount) = (CThostFtdcReqQueryAccountField *) pReqQueryAccount; 
    *((CThostFtdcRspInfoField **)&jpRspInfo) = (CThostFtdcRspInfoField *) pRspInfo; 
    jnRequestID = (jint) nRequestID;
    jbIsLast = (jboolean) bIsLast;
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[81], swigjobj, jpReqQueryAccount, jpRspInfo, jnRequestID, jbIsLast);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRspQueryBankAccountMoneyByFuture ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRtnOpenAccountByBank(CThostFtdcOpenAccountField *pOpenAccount) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpOpenAccount = 0 ;
  
  if (!swig_override[73]) {
    CThostFtdcTraderSpi::OnRtnOpenAccountByBank(pOpenAccount);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcOpenAccountField **)&jpOpenAccount) = (CThostFtdcOpenAccountField *) pOpenAccount; 
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[82], swigjobj, jpOpenAccount);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRtnOpenAccountByBank ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRtnCancelAccountByBank(CThostFtdcCancelAccountField *pCancelAccount) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpCancelAccount = 0 ;
  
  if (!swig_override[74]) {
    CThostFtdcTraderSpi::OnRtnCancelAccountByBank(pCancelAccount);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcCancelAccountField **)&jpCancelAccount) = (CThostFtdcCancelAccountField *) pCancelAccount; 
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[83], swigjobj, jpCancelAccount);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRtnCancelAccountByBank ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::OnRtnChangeAccountByBank(CThostFtdcChangeAccountField *pChangeAccount) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jpChangeAccount = 0 ;
  
  if (!swig_override[75]) {
    CThostFtdcTraderSpi::OnRtnChangeAccountByBank(pChangeAccount);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((CThostFtdcChangeAccountField **)&jpChangeAccount) = (CThostFtdcChangeAccountField *) pChangeAccount; 
    jenv->CallStaticVoidMethod(Swig::jclass_CtpJNI, Swig::director_methids[84], swigjobj, jpChangeAccount);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      jenv->ExceptionClear();
      throw Swig::DirectorException(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in CThostFtdcTraderSpi::OnRtnChangeAccountByBank ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_CThostFtdcTraderSpi::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onFrontConnected", "()V", NULL 
    },
    {
      "onFrontDisconnected", "(I)V", NULL 
    },
    {
      "onHeartBeatWarning", "(I)V", NULL 
    },
    {
      "onRspAuthenticate", "(Lcom/ctp/CThostFtdcRspAuthenticateField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspUserLogin", "(Lcom/ctp/CThostFtdcRspUserLoginField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspUserLogout", "(Lcom/ctp/CThostFtdcUserLogoutField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspUserPasswordUpdate", "(Lcom/ctp/CThostFtdcUserPasswordUpdateField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspTradingAccountPasswordUpdate", "(Lcom/ctp/CThostFtdcTradingAccountPasswordUpdateField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspOrderInsert", "(Lcom/ctp/CThostFtdcInputOrderField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspParkedOrderInsert", "(Lcom/ctp/CThostFtdcParkedOrderField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspParkedOrderAction", "(Lcom/ctp/CThostFtdcParkedOrderActionField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspOrderAction", "(Lcom/ctp/CThostFtdcInputOrderActionField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspQueryMaxOrderVolume", "(Lcom/ctp/CThostFtdcQueryMaxOrderVolumeField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspSettlementInfoConfirm", "(Lcom/ctp/CThostFtdcSettlementInfoConfirmField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspRemoveParkedOrder", "(Lcom/ctp/CThostFtdcRemoveParkedOrderField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspRemoveParkedOrderAction", "(Lcom/ctp/CThostFtdcRemoveParkedOrderActionField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspQryOrder", "(Lcom/ctp/CThostFtdcOrderField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspQryTrade", "(Lcom/ctp/CThostFtdcTradeField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspQryInvestorPosition", "(Lcom/ctp/CThostFtdcInvestorPositionField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspQryTradingAccount", "(Lcom/ctp/CThostFtdcTradingAccountField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspQryInvestor", "(Lcom/ctp/CThostFtdcInvestorField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspQryTradingCode", "(Lcom/ctp/CThostFtdcTradingCodeField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspQryInstrumentMarginRate", "(Lcom/ctp/CThostFtdcInstrumentMarginRateField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspQryInstrumentCommissionRate", "(Lcom/ctp/CThostFtdcInstrumentCommissionRateField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspQryExchange", "(Lcom/ctp/CThostFtdcExchangeField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspQryInstrument", "(Lcom/ctp/CThostFtdcInstrumentField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspQryDepthMarketData", "(Lcom/ctp/CThostFtdcDepthMarketDataField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspQrySettlementInfo", "(Lcom/ctp/CThostFtdcSettlementInfoField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspQryTransferBank", "(Lcom/ctp/CThostFtdcTransferBankField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspQryInvestorPositionDetail", "(Lcom/ctp/CThostFtdcInvestorPositionDetailField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspQryNotice", "(Lcom/ctp/CThostFtdcNoticeField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspQrySettlementInfoConfirm", "(Lcom/ctp/CThostFtdcSettlementInfoConfirmField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspQryInvestorPositionCombineDetail", "(Lcom/ctp/CThostFtdcInvestorPositionCombineDetailField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspQryCFMMCTradingAccountKey", "(Lcom/ctp/CThostFtdcCFMMCTradingAccountKeyField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspQryEWarrantOffset", "(Lcom/ctp/CThostFtdcEWarrantOffsetField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspQryInvestorProductGroupMargin", "(Lcom/ctp/CThostFtdcInvestorProductGroupMarginField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspQryExchangeMarginRate", "(Lcom/ctp/CThostFtdcExchangeMarginRateField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspQryExchangeMarginRateAdjust", "(Lcom/ctp/CThostFtdcExchangeMarginRateAdjustField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspQryTransferSerial", "(Lcom/ctp/CThostFtdcTransferSerialField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspQryAccountregister", "(Lcom/ctp/CThostFtdcAccountregisterField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspError", "(Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRtnOrder", "(Lcom/ctp/CThostFtdcOrderField;)V", NULL 
    },
    {
      "onRtnTrade", "(Lcom/ctp/CThostFtdcTradeField;)V", NULL 
    },
    {
      "onErrRtnOrderInsert", "(Lcom/ctp/CThostFtdcInputOrderField;Lcom/ctp/CThostFtdcRspInfoField;)V", NULL 
    },
    {
      "onErrRtnOrderAction", "(Lcom/ctp/CThostFtdcOrderActionField;Lcom/ctp/CThostFtdcRspInfoField;)V", NULL 
    },
    {
      "onRtnInstrumentStatus", "(Lcom/ctp/CThostFtdcInstrumentStatusField;)V", NULL 
    },
    {
      "onRtnTradingNotice", "(Lcom/ctp/CThostFtdcTradingNoticeInfoField;)V", NULL 
    },
    {
      "onRtnErrorConditionalOrder", "(Lcom/ctp/CThostFtdcErrorConditionalOrderField;)V", NULL 
    },
    {
      "onRspQryContractBank", "(Lcom/ctp/CThostFtdcContractBankField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspQryParkedOrder", "(Lcom/ctp/CThostFtdcParkedOrderField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspQryParkedOrderAction", "(Lcom/ctp/CThostFtdcParkedOrderActionField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspQryTradingNotice", "(Lcom/ctp/CThostFtdcTradingNoticeField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspQryBrokerTradingParams", "(Lcom/ctp/CThostFtdcBrokerTradingParamsField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspQryBrokerTradingAlgos", "(Lcom/ctp/CThostFtdcBrokerTradingAlgosField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRtnFromBankToFutureByBank", "(Lcom/ctp/CThostFtdcRspTransferField;)V", NULL 
    },
    {
      "onRtnFromFutureToBankByBank", "(Lcom/ctp/CThostFtdcRspTransferField;)V", NULL 
    },
    {
      "onRtnRepealFromBankToFutureByBank", "(Lcom/ctp/CThostFtdcRspRepealField;)V", NULL 
    },
    {
      "onRtnRepealFromFutureToBankByBank", "(Lcom/ctp/CThostFtdcRspRepealField;)V", NULL 
    },
    {
      "onRtnFromBankToFutureByFuture", "(Lcom/ctp/CThostFtdcRspTransferField;)V", NULL 
    },
    {
      "onRtnFromFutureToBankByFuture", "(Lcom/ctp/CThostFtdcRspTransferField;)V", NULL 
    },
    {
      "onRtnRepealFromBankToFutureByFutureManual", "(Lcom/ctp/CThostFtdcRspRepealField;)V", NULL 
    },
    {
      "onRtnRepealFromFutureToBankByFutureManual", "(Lcom/ctp/CThostFtdcRspRepealField;)V", NULL 
    },
    {
      "onRtnQueryBankBalanceByFuture", "(Lcom/ctp/CThostFtdcNotifyQueryAccountField;)V", NULL 
    },
    {
      "onErrRtnBankToFutureByFuture", "(Lcom/ctp/CThostFtdcReqTransferField;Lcom/ctp/CThostFtdcRspInfoField;)V", NULL 
    },
    {
      "onErrRtnFutureToBankByFuture", "(Lcom/ctp/CThostFtdcReqTransferField;Lcom/ctp/CThostFtdcRspInfoField;)V", NULL 
    },
    {
      "onErrRtnRepealBankToFutureByFutureManual", "(Lcom/ctp/CThostFtdcReqRepealField;Lcom/ctp/CThostFtdcRspInfoField;)V", NULL 
    },
    {
      "onErrRtnRepealFutureToBankByFutureManual", "(Lcom/ctp/CThostFtdcReqRepealField;Lcom/ctp/CThostFtdcRspInfoField;)V", NULL 
    },
    {
      "onErrRtnQueryBankBalanceByFuture", "(Lcom/ctp/CThostFtdcReqQueryAccountField;Lcom/ctp/CThostFtdcRspInfoField;)V", NULL 
    },
    {
      "onRtnRepealFromBankToFutureByFuture", "(Lcom/ctp/CThostFtdcRspRepealField;)V", NULL 
    },
    {
      "onRtnRepealFromFutureToBankByFuture", "(Lcom/ctp/CThostFtdcRspRepealField;)V", NULL 
    },
    {
      "onRspFromBankToFutureByFuture", "(Lcom/ctp/CThostFtdcReqTransferField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspFromFutureToBankByFuture", "(Lcom/ctp/CThostFtdcReqTransferField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRspQueryBankAccountMoneyByFuture", "(Lcom/ctp/CThostFtdcReqQueryAccountField;Lcom/ctp/CThostFtdcRspInfoField;IZ)V", NULL 
    },
    {
      "onRtnOpenAccountByBank", "(Lcom/ctp/CThostFtdcOpenAccountField;)V", NULL 
    },
    {
      "onRtnCancelAccountByBank", "(Lcom/ctp/CThostFtdcCancelAccountField;)V", NULL 
    },
    {
      "onRtnChangeAccountByBank", "(Lcom/ctp/CThostFtdcChangeAccountField;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/ctp/CThostFtdcTraderSpi");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 76; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDisseminationField_1SequenceSeries_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  CThostFtdcDisseminationField *arg1 = (CThostFtdcDisseminationField *) 0 ;
  TThostFtdcSequenceSeriesType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDisseminationField **)&jarg1; 
  arg2 = (TThostFtdcSequenceSeriesType)jarg2; 
  if (arg1) (arg1)->SequenceSeries = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_ctp_CtpJNI_CThostFtdcDisseminationField_1SequenceSeries_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  CThostFtdcDisseminationField *arg1 = (CThostFtdcDisseminationField *) 0 ;
  TThostFtdcSequenceSeriesType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDisseminationField **)&jarg1; 
  result = (TThostFtdcSequenceSeriesType) ((arg1)->SequenceSeries);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDisseminationField_1SequenceNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcDisseminationField *arg1 = (CThostFtdcDisseminationField *) 0 ;
  TThostFtdcSequenceNoType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDisseminationField **)&jarg1; 
  arg2 = (TThostFtdcSequenceNoType)jarg2; 
  if (arg1) (arg1)->SequenceNo = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcDisseminationField_1SequenceNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcDisseminationField *arg1 = (CThostFtdcDisseminationField *) 0 ;
  TThostFtdcSequenceNoType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDisseminationField **)&jarg1; 
  result = (TThostFtdcSequenceNoType) ((arg1)->SequenceNo);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcDisseminationField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcDisseminationField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcDisseminationField *)new CThostFtdcDisseminationField();
  *(CThostFtdcDisseminationField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcDisseminationField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcDisseminationField *arg1 = (CThostFtdcDisseminationField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcDisseminationField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqUserLoginField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqUserLoginField *arg1 = (CThostFtdcReqUserLoginField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqUserLoginField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqUserLoginField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqUserLoginField *arg1 = (CThostFtdcReqUserLoginField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqUserLoginField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqUserLoginField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqUserLoginField *arg1 = (CThostFtdcReqUserLoginField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqUserLoginField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqUserLoginField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqUserLoginField *arg1 = (CThostFtdcReqUserLoginField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqUserLoginField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqUserLoginField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqUserLoginField *arg1 = (CThostFtdcReqUserLoginField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqUserLoginField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqUserLoginField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqUserLoginField *arg1 = (CThostFtdcReqUserLoginField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqUserLoginField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqUserLoginField_1Password_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqUserLoginField *arg1 = (CThostFtdcReqUserLoginField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqUserLoginField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Password, (const char *)arg2, 41-1);
      arg1->Password[41-1] = 0;
    } else {
      arg1->Password[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqUserLoginField_1Password_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqUserLoginField *arg1 = (CThostFtdcReqUserLoginField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqUserLoginField **)&jarg1; 
  result = (char *) ((arg1)->Password);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqUserLoginField_1UserProductInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqUserLoginField *arg1 = (CThostFtdcReqUserLoginField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqUserLoginField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserProductInfo, (const char *)arg2, 11-1);
      arg1->UserProductInfo[11-1] = 0;
    } else {
      arg1->UserProductInfo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqUserLoginField_1UserProductInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqUserLoginField *arg1 = (CThostFtdcReqUserLoginField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqUserLoginField **)&jarg1; 
  result = (char *) ((arg1)->UserProductInfo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqUserLoginField_1InterfaceProductInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqUserLoginField *arg1 = (CThostFtdcReqUserLoginField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqUserLoginField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InterfaceProductInfo, (const char *)arg2, 11-1);
      arg1->InterfaceProductInfo[11-1] = 0;
    } else {
      arg1->InterfaceProductInfo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqUserLoginField_1InterfaceProductInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqUserLoginField *arg1 = (CThostFtdcReqUserLoginField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqUserLoginField **)&jarg1; 
  result = (char *) ((arg1)->InterfaceProductInfo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqUserLoginField_1ProtocolInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqUserLoginField *arg1 = (CThostFtdcReqUserLoginField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqUserLoginField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ProtocolInfo, (const char *)arg2, 11-1);
      arg1->ProtocolInfo[11-1] = 0;
    } else {
      arg1->ProtocolInfo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqUserLoginField_1ProtocolInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqUserLoginField *arg1 = (CThostFtdcReqUserLoginField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqUserLoginField **)&jarg1; 
  result = (char *) ((arg1)->ProtocolInfo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqUserLoginField_1MacAddress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqUserLoginField *arg1 = (CThostFtdcReqUserLoginField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqUserLoginField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->MacAddress, (const char *)arg2, 21-1);
      arg1->MacAddress[21-1] = 0;
    } else {
      arg1->MacAddress[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqUserLoginField_1MacAddress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqUserLoginField *arg1 = (CThostFtdcReqUserLoginField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqUserLoginField **)&jarg1; 
  result = (char *) ((arg1)->MacAddress);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqUserLoginField_1OneTimePassword_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqUserLoginField *arg1 = (CThostFtdcReqUserLoginField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqUserLoginField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OneTimePassword, (const char *)arg2, 41-1);
      arg1->OneTimePassword[41-1] = 0;
    } else {
      arg1->OneTimePassword[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqUserLoginField_1OneTimePassword_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqUserLoginField *arg1 = (CThostFtdcReqUserLoginField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqUserLoginField **)&jarg1; 
  result = (char *) ((arg1)->OneTimePassword);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqUserLoginField_1ClientIPAddress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqUserLoginField *arg1 = (CThostFtdcReqUserLoginField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqUserLoginField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ClientIPAddress, (const char *)arg2, 16-1);
      arg1->ClientIPAddress[16-1] = 0;
    } else {
      arg1->ClientIPAddress[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqUserLoginField_1ClientIPAddress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqUserLoginField *arg1 = (CThostFtdcReqUserLoginField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqUserLoginField **)&jarg1; 
  result = (char *) ((arg1)->ClientIPAddress);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcReqUserLoginField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcReqUserLoginField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcReqUserLoginField *)new CThostFtdcReqUserLoginField();
  *(CThostFtdcReqUserLoginField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcReqUserLoginField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcReqUserLoginField *arg1 = (CThostFtdcReqUserLoginField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcReqUserLoginField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspUserLoginField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspUserLoginField *arg1 = (CThostFtdcRspUserLoginField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspUserLoginField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspUserLoginField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspUserLoginField *arg1 = (CThostFtdcRspUserLoginField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspUserLoginField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspUserLoginField_1LoginTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspUserLoginField *arg1 = (CThostFtdcRspUserLoginField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspUserLoginField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->LoginTime, (const char *)arg2, 9-1);
      arg1->LoginTime[9-1] = 0;
    } else {
      arg1->LoginTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspUserLoginField_1LoginTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspUserLoginField *arg1 = (CThostFtdcRspUserLoginField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspUserLoginField **)&jarg1; 
  result = (char *) ((arg1)->LoginTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspUserLoginField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspUserLoginField *arg1 = (CThostFtdcRspUserLoginField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspUserLoginField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspUserLoginField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspUserLoginField *arg1 = (CThostFtdcRspUserLoginField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspUserLoginField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspUserLoginField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspUserLoginField *arg1 = (CThostFtdcRspUserLoginField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspUserLoginField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspUserLoginField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspUserLoginField *arg1 = (CThostFtdcRspUserLoginField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspUserLoginField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspUserLoginField_1SystemName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspUserLoginField *arg1 = (CThostFtdcRspUserLoginField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspUserLoginField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->SystemName, (const char *)arg2, 41-1);
      arg1->SystemName[41-1] = 0;
    } else {
      arg1->SystemName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspUserLoginField_1SystemName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspUserLoginField *arg1 = (CThostFtdcRspUserLoginField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspUserLoginField **)&jarg1; 
  result = (char *) ((arg1)->SystemName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspUserLoginField_1FrontID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspUserLoginField *arg1 = (CThostFtdcRspUserLoginField *) 0 ;
  TThostFtdcFrontIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspUserLoginField **)&jarg1; 
  arg2 = (TThostFtdcFrontIDType)jarg2; 
  if (arg1) (arg1)->FrontID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspUserLoginField_1FrontID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspUserLoginField *arg1 = (CThostFtdcRspUserLoginField *) 0 ;
  TThostFtdcFrontIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspUserLoginField **)&jarg1; 
  result = (TThostFtdcFrontIDType) ((arg1)->FrontID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspUserLoginField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspUserLoginField *arg1 = (CThostFtdcRspUserLoginField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspUserLoginField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspUserLoginField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspUserLoginField *arg1 = (CThostFtdcRspUserLoginField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspUserLoginField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspUserLoginField_1MaxOrderRef_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspUserLoginField *arg1 = (CThostFtdcRspUserLoginField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspUserLoginField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->MaxOrderRef, (const char *)arg2, 13-1);
      arg1->MaxOrderRef[13-1] = 0;
    } else {
      arg1->MaxOrderRef[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspUserLoginField_1MaxOrderRef_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspUserLoginField *arg1 = (CThostFtdcRspUserLoginField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspUserLoginField **)&jarg1; 
  result = (char *) ((arg1)->MaxOrderRef);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspUserLoginField_1SHFETime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspUserLoginField *arg1 = (CThostFtdcRspUserLoginField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspUserLoginField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->SHFETime, (const char *)arg2, 9-1);
      arg1->SHFETime[9-1] = 0;
    } else {
      arg1->SHFETime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspUserLoginField_1SHFETime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspUserLoginField *arg1 = (CThostFtdcRspUserLoginField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspUserLoginField **)&jarg1; 
  result = (char *) ((arg1)->SHFETime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspUserLoginField_1DCETime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspUserLoginField *arg1 = (CThostFtdcRspUserLoginField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspUserLoginField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->DCETime, (const char *)arg2, 9-1);
      arg1->DCETime[9-1] = 0;
    } else {
      arg1->DCETime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspUserLoginField_1DCETime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspUserLoginField *arg1 = (CThostFtdcRspUserLoginField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspUserLoginField **)&jarg1; 
  result = (char *) ((arg1)->DCETime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspUserLoginField_1CZCETime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspUserLoginField *arg1 = (CThostFtdcRspUserLoginField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspUserLoginField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CZCETime, (const char *)arg2, 9-1);
      arg1->CZCETime[9-1] = 0;
    } else {
      arg1->CZCETime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspUserLoginField_1CZCETime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspUserLoginField *arg1 = (CThostFtdcRspUserLoginField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspUserLoginField **)&jarg1; 
  result = (char *) ((arg1)->CZCETime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspUserLoginField_1FFEXTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspUserLoginField *arg1 = (CThostFtdcRspUserLoginField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspUserLoginField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->FFEXTime, (const char *)arg2, 9-1);
      arg1->FFEXTime[9-1] = 0;
    } else {
      arg1->FFEXTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspUserLoginField_1FFEXTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspUserLoginField *arg1 = (CThostFtdcRspUserLoginField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspUserLoginField **)&jarg1; 
  result = (char *) ((arg1)->FFEXTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcRspUserLoginField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcRspUserLoginField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcRspUserLoginField *)new CThostFtdcRspUserLoginField();
  *(CThostFtdcRspUserLoginField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcRspUserLoginField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcRspUserLoginField *arg1 = (CThostFtdcRspUserLoginField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcRspUserLoginField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserLogoutField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcUserLogoutField *arg1 = (CThostFtdcUserLogoutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserLogoutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserLogoutField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcUserLogoutField *arg1 = (CThostFtdcUserLogoutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserLogoutField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserLogoutField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcUserLogoutField *arg1 = (CThostFtdcUserLogoutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserLogoutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserLogoutField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcUserLogoutField *arg1 = (CThostFtdcUserLogoutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserLogoutField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcUserLogoutField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcUserLogoutField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcUserLogoutField *)new CThostFtdcUserLogoutField();
  *(CThostFtdcUserLogoutField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcUserLogoutField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcUserLogoutField *arg1 = (CThostFtdcUserLogoutField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcUserLogoutField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcForceUserLogoutField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcForceUserLogoutField *arg1 = (CThostFtdcForceUserLogoutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcForceUserLogoutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcForceUserLogoutField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcForceUserLogoutField *arg1 = (CThostFtdcForceUserLogoutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcForceUserLogoutField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcForceUserLogoutField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcForceUserLogoutField *arg1 = (CThostFtdcForceUserLogoutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcForceUserLogoutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcForceUserLogoutField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcForceUserLogoutField *arg1 = (CThostFtdcForceUserLogoutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcForceUserLogoutField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcForceUserLogoutField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcForceUserLogoutField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcForceUserLogoutField *)new CThostFtdcForceUserLogoutField();
  *(CThostFtdcForceUserLogoutField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcForceUserLogoutField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcForceUserLogoutField *arg1 = (CThostFtdcForceUserLogoutField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcForceUserLogoutField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqAuthenticateField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqAuthenticateField *arg1 = (CThostFtdcReqAuthenticateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqAuthenticateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqAuthenticateField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqAuthenticateField *arg1 = (CThostFtdcReqAuthenticateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqAuthenticateField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqAuthenticateField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqAuthenticateField *arg1 = (CThostFtdcReqAuthenticateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqAuthenticateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqAuthenticateField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqAuthenticateField *arg1 = (CThostFtdcReqAuthenticateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqAuthenticateField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqAuthenticateField_1UserProductInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqAuthenticateField *arg1 = (CThostFtdcReqAuthenticateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqAuthenticateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserProductInfo, (const char *)arg2, 11-1);
      arg1->UserProductInfo[11-1] = 0;
    } else {
      arg1->UserProductInfo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqAuthenticateField_1UserProductInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqAuthenticateField *arg1 = (CThostFtdcReqAuthenticateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqAuthenticateField **)&jarg1; 
  result = (char *) ((arg1)->UserProductInfo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqAuthenticateField_1AuthCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqAuthenticateField *arg1 = (CThostFtdcReqAuthenticateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqAuthenticateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->AuthCode, (const char *)arg2, 17-1);
      arg1->AuthCode[17-1] = 0;
    } else {
      arg1->AuthCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqAuthenticateField_1AuthCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqAuthenticateField *arg1 = (CThostFtdcReqAuthenticateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqAuthenticateField **)&jarg1; 
  result = (char *) ((arg1)->AuthCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcReqAuthenticateField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcReqAuthenticateField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcReqAuthenticateField *)new CThostFtdcReqAuthenticateField();
  *(CThostFtdcReqAuthenticateField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcReqAuthenticateField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcReqAuthenticateField *arg1 = (CThostFtdcReqAuthenticateField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcReqAuthenticateField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspAuthenticateField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspAuthenticateField *arg1 = (CThostFtdcRspAuthenticateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspAuthenticateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspAuthenticateField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspAuthenticateField *arg1 = (CThostFtdcRspAuthenticateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspAuthenticateField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspAuthenticateField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspAuthenticateField *arg1 = (CThostFtdcRspAuthenticateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspAuthenticateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspAuthenticateField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspAuthenticateField *arg1 = (CThostFtdcRspAuthenticateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspAuthenticateField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspAuthenticateField_1UserProductInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspAuthenticateField *arg1 = (CThostFtdcRspAuthenticateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspAuthenticateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserProductInfo, (const char *)arg2, 11-1);
      arg1->UserProductInfo[11-1] = 0;
    } else {
      arg1->UserProductInfo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspAuthenticateField_1UserProductInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspAuthenticateField *arg1 = (CThostFtdcRspAuthenticateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspAuthenticateField **)&jarg1; 
  result = (char *) ((arg1)->UserProductInfo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcRspAuthenticateField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcRspAuthenticateField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcRspAuthenticateField *)new CThostFtdcRspAuthenticateField();
  *(CThostFtdcRspAuthenticateField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcRspAuthenticateField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcRspAuthenticateField *arg1 = (CThostFtdcRspAuthenticateField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcRspAuthenticateField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcAuthenticationInfoField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcAuthenticationInfoField *arg1 = (CThostFtdcAuthenticationInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAuthenticationInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcAuthenticationInfoField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcAuthenticationInfoField *arg1 = (CThostFtdcAuthenticationInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAuthenticationInfoField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcAuthenticationInfoField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcAuthenticationInfoField *arg1 = (CThostFtdcAuthenticationInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAuthenticationInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcAuthenticationInfoField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcAuthenticationInfoField *arg1 = (CThostFtdcAuthenticationInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAuthenticationInfoField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcAuthenticationInfoField_1UserProductInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcAuthenticationInfoField *arg1 = (CThostFtdcAuthenticationInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAuthenticationInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserProductInfo, (const char *)arg2, 11-1);
      arg1->UserProductInfo[11-1] = 0;
    } else {
      arg1->UserProductInfo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcAuthenticationInfoField_1UserProductInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcAuthenticationInfoField *arg1 = (CThostFtdcAuthenticationInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAuthenticationInfoField **)&jarg1; 
  result = (char *) ((arg1)->UserProductInfo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcAuthenticationInfoField_1AuthInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcAuthenticationInfoField *arg1 = (CThostFtdcAuthenticationInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAuthenticationInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->AuthInfo, (const char *)arg2, 129-1);
      arg1->AuthInfo[129-1] = 0;
    } else {
      arg1->AuthInfo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcAuthenticationInfoField_1AuthInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcAuthenticationInfoField *arg1 = (CThostFtdcAuthenticationInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAuthenticationInfoField **)&jarg1; 
  result = (char *) ((arg1)->AuthInfo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcAuthenticationInfoField_1IsResult_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcAuthenticationInfoField *arg1 = (CThostFtdcAuthenticationInfoField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAuthenticationInfoField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->IsResult = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcAuthenticationInfoField_1IsResult_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcAuthenticationInfoField *arg1 = (CThostFtdcAuthenticationInfoField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAuthenticationInfoField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->IsResult);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcAuthenticationInfoField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcAuthenticationInfoField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcAuthenticationInfoField *)new CThostFtdcAuthenticationInfoField();
  *(CThostFtdcAuthenticationInfoField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcAuthenticationInfoField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcAuthenticationInfoField *arg1 = (CThostFtdcAuthenticationInfoField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcAuthenticationInfoField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferHeaderField_1Version_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferHeaderField *arg1 = (CThostFtdcTransferHeaderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferHeaderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Version, (const char *)arg2, 4-1);
      arg1->Version[4-1] = 0;
    } else {
      arg1->Version[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferHeaderField_1Version_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferHeaderField *arg1 = (CThostFtdcTransferHeaderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferHeaderField **)&jarg1; 
  result = (char *) ((arg1)->Version);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferHeaderField_1TradeCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferHeaderField *arg1 = (CThostFtdcTransferHeaderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferHeaderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeCode, (const char *)arg2, 7-1);
      arg1->TradeCode[7-1] = 0;
    } else {
      arg1->TradeCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferHeaderField_1TradeCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferHeaderField *arg1 = (CThostFtdcTransferHeaderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferHeaderField **)&jarg1; 
  result = (char *) ((arg1)->TradeCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferHeaderField_1TradeDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferHeaderField *arg1 = (CThostFtdcTransferHeaderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferHeaderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeDate, (const char *)arg2, 9-1);
      arg1->TradeDate[9-1] = 0;
    } else {
      arg1->TradeDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferHeaderField_1TradeDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferHeaderField *arg1 = (CThostFtdcTransferHeaderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferHeaderField **)&jarg1; 
  result = (char *) ((arg1)->TradeDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferHeaderField_1TradeTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferHeaderField *arg1 = (CThostFtdcTransferHeaderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferHeaderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeTime, (const char *)arg2, 9-1);
      arg1->TradeTime[9-1] = 0;
    } else {
      arg1->TradeTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferHeaderField_1TradeTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferHeaderField *arg1 = (CThostFtdcTransferHeaderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferHeaderField **)&jarg1; 
  result = (char *) ((arg1)->TradeTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferHeaderField_1TradeSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferHeaderField *arg1 = (CThostFtdcTransferHeaderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferHeaderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeSerial, (const char *)arg2, 9-1);
      arg1->TradeSerial[9-1] = 0;
    } else {
      arg1->TradeSerial[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferHeaderField_1TradeSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferHeaderField *arg1 = (CThostFtdcTransferHeaderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferHeaderField **)&jarg1; 
  result = (char *) ((arg1)->TradeSerial);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferHeaderField_1FutureID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferHeaderField *arg1 = (CThostFtdcTransferHeaderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferHeaderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->FutureID, (const char *)arg2, 11-1);
      arg1->FutureID[11-1] = 0;
    } else {
      arg1->FutureID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferHeaderField_1FutureID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferHeaderField *arg1 = (CThostFtdcTransferHeaderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferHeaderField **)&jarg1; 
  result = (char *) ((arg1)->FutureID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferHeaderField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferHeaderField *arg1 = (CThostFtdcTransferHeaderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferHeaderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferHeaderField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferHeaderField *arg1 = (CThostFtdcTransferHeaderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferHeaderField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferHeaderField_1BankBrchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferHeaderField *arg1 = (CThostFtdcTransferHeaderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferHeaderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBrchID, (const char *)arg2, 5-1);
      arg1->BankBrchID[5-1] = 0;
    } else {
      arg1->BankBrchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferHeaderField_1BankBrchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferHeaderField *arg1 = (CThostFtdcTransferHeaderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferHeaderField **)&jarg1; 
  result = (char *) ((arg1)->BankBrchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferHeaderField_1OperNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferHeaderField *arg1 = (CThostFtdcTransferHeaderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferHeaderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OperNo, (const char *)arg2, 17-1);
      arg1->OperNo[17-1] = 0;
    } else {
      arg1->OperNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferHeaderField_1OperNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferHeaderField *arg1 = (CThostFtdcTransferHeaderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferHeaderField **)&jarg1; 
  result = (char *) ((arg1)->OperNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferHeaderField_1DeviceID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferHeaderField *arg1 = (CThostFtdcTransferHeaderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferHeaderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->DeviceID, (const char *)arg2, 3-1);
      arg1->DeviceID[3-1] = 0;
    } else {
      arg1->DeviceID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferHeaderField_1DeviceID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferHeaderField *arg1 = (CThostFtdcTransferHeaderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferHeaderField **)&jarg1; 
  result = (char *) ((arg1)->DeviceID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferHeaderField_1RecordNum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferHeaderField *arg1 = (CThostFtdcTransferHeaderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferHeaderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->RecordNum, (const char *)arg2, 7-1);
      arg1->RecordNum[7-1] = 0;
    } else {
      arg1->RecordNum[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferHeaderField_1RecordNum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferHeaderField *arg1 = (CThostFtdcTransferHeaderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferHeaderField **)&jarg1; 
  result = (char *) ((arg1)->RecordNum);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferHeaderField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcTransferHeaderField *arg1 = (CThostFtdcTransferHeaderField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferHeaderField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferHeaderField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcTransferHeaderField *arg1 = (CThostFtdcTransferHeaderField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferHeaderField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferHeaderField_1RequestID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcTransferHeaderField *arg1 = (CThostFtdcTransferHeaderField *) 0 ;
  TThostFtdcRequestIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferHeaderField **)&jarg1; 
  arg2 = (TThostFtdcRequestIDType)jarg2; 
  if (arg1) (arg1)->RequestID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferHeaderField_1RequestID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcTransferHeaderField *arg1 = (CThostFtdcTransferHeaderField *) 0 ;
  TThostFtdcRequestIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferHeaderField **)&jarg1; 
  result = (TThostFtdcRequestIDType) ((arg1)->RequestID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcTransferHeaderField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcTransferHeaderField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcTransferHeaderField *)new CThostFtdcTransferHeaderField();
  *(CThostFtdcTransferHeaderField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcTransferHeaderField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcTransferHeaderField *arg1 = (CThostFtdcTransferHeaderField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcTransferHeaderField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferBankToFutureReqField_1FutureAccount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferBankToFutureReqField *arg1 = (CThostFtdcTransferBankToFutureReqField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferBankToFutureReqField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->FutureAccount, (const char *)arg2, 13-1);
      arg1->FutureAccount[13-1] = 0;
    } else {
      arg1->FutureAccount[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferBankToFutureReqField_1FutureAccount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferBankToFutureReqField *arg1 = (CThostFtdcTransferBankToFutureReqField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferBankToFutureReqField **)&jarg1; 
  result = (char *) ((arg1)->FutureAccount);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferBankToFutureReqField_1FuturePwdFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcTransferBankToFutureReqField *arg1 = (CThostFtdcTransferBankToFutureReqField *) 0 ;
  TThostFtdcFuturePwdFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferBankToFutureReqField **)&jarg1; 
  arg2 = (TThostFtdcFuturePwdFlagType)jarg2; 
  if (arg1) (arg1)->FuturePwdFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferBankToFutureReqField_1FuturePwdFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcTransferBankToFutureReqField *arg1 = (CThostFtdcTransferBankToFutureReqField *) 0 ;
  TThostFtdcFuturePwdFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferBankToFutureReqField **)&jarg1; 
  result = (TThostFtdcFuturePwdFlagType) ((arg1)->FuturePwdFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferBankToFutureReqField_1FutureAccPwd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferBankToFutureReqField *arg1 = (CThostFtdcTransferBankToFutureReqField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferBankToFutureReqField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->FutureAccPwd, (const char *)arg2, 17-1);
      arg1->FutureAccPwd[17-1] = 0;
    } else {
      arg1->FutureAccPwd[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferBankToFutureReqField_1FutureAccPwd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferBankToFutureReqField *arg1 = (CThostFtdcTransferBankToFutureReqField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferBankToFutureReqField **)&jarg1; 
  result = (char *) ((arg1)->FutureAccPwd);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferBankToFutureReqField_1TradeAmt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTransferBankToFutureReqField *arg1 = (CThostFtdcTransferBankToFutureReqField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferBankToFutureReqField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->TradeAmt = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferBankToFutureReqField_1TradeAmt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTransferBankToFutureReqField *arg1 = (CThostFtdcTransferBankToFutureReqField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferBankToFutureReqField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->TradeAmt);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferBankToFutureReqField_1CustFee_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTransferBankToFutureReqField *arg1 = (CThostFtdcTransferBankToFutureReqField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferBankToFutureReqField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->CustFee = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferBankToFutureReqField_1CustFee_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTransferBankToFutureReqField *arg1 = (CThostFtdcTransferBankToFutureReqField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferBankToFutureReqField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->CustFee);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferBankToFutureReqField_1CurrencyCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferBankToFutureReqField *arg1 = (CThostFtdcTransferBankToFutureReqField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferBankToFutureReqField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrencyCode, (const char *)arg2, 4-1);
      arg1->CurrencyCode[4-1] = 0;
    } else {
      arg1->CurrencyCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferBankToFutureReqField_1CurrencyCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferBankToFutureReqField *arg1 = (CThostFtdcTransferBankToFutureReqField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferBankToFutureReqField **)&jarg1; 
  result = (char *) ((arg1)->CurrencyCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcTransferBankToFutureReqField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcTransferBankToFutureReqField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcTransferBankToFutureReqField *)new CThostFtdcTransferBankToFutureReqField();
  *(CThostFtdcTransferBankToFutureReqField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcTransferBankToFutureReqField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcTransferBankToFutureReqField *arg1 = (CThostFtdcTransferBankToFutureReqField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcTransferBankToFutureReqField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferBankToFutureRspField_1RetCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferBankToFutureRspField *arg1 = (CThostFtdcTransferBankToFutureRspField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferBankToFutureRspField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->RetCode, (const char *)arg2, 5-1);
      arg1->RetCode[5-1] = 0;
    } else {
      arg1->RetCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferBankToFutureRspField_1RetCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferBankToFutureRspField *arg1 = (CThostFtdcTransferBankToFutureRspField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferBankToFutureRspField **)&jarg1; 
  result = (char *) ((arg1)->RetCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferBankToFutureRspField_1RetInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferBankToFutureRspField *arg1 = (CThostFtdcTransferBankToFutureRspField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferBankToFutureRspField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->RetInfo, (const char *)arg2, 129-1);
      arg1->RetInfo[129-1] = 0;
    } else {
      arg1->RetInfo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferBankToFutureRspField_1RetInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferBankToFutureRspField *arg1 = (CThostFtdcTransferBankToFutureRspField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferBankToFutureRspField **)&jarg1; 
  result = (char *) ((arg1)->RetInfo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferBankToFutureRspField_1FutureAccount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferBankToFutureRspField *arg1 = (CThostFtdcTransferBankToFutureRspField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferBankToFutureRspField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->FutureAccount, (const char *)arg2, 13-1);
      arg1->FutureAccount[13-1] = 0;
    } else {
      arg1->FutureAccount[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferBankToFutureRspField_1FutureAccount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferBankToFutureRspField *arg1 = (CThostFtdcTransferBankToFutureRspField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferBankToFutureRspField **)&jarg1; 
  result = (char *) ((arg1)->FutureAccount);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferBankToFutureRspField_1TradeAmt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTransferBankToFutureRspField *arg1 = (CThostFtdcTransferBankToFutureRspField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferBankToFutureRspField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->TradeAmt = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferBankToFutureRspField_1TradeAmt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTransferBankToFutureRspField *arg1 = (CThostFtdcTransferBankToFutureRspField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferBankToFutureRspField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->TradeAmt);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferBankToFutureRspField_1CustFee_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTransferBankToFutureRspField *arg1 = (CThostFtdcTransferBankToFutureRspField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferBankToFutureRspField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->CustFee = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferBankToFutureRspField_1CustFee_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTransferBankToFutureRspField *arg1 = (CThostFtdcTransferBankToFutureRspField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferBankToFutureRspField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->CustFee);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferBankToFutureRspField_1CurrencyCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferBankToFutureRspField *arg1 = (CThostFtdcTransferBankToFutureRspField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferBankToFutureRspField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrencyCode, (const char *)arg2, 4-1);
      arg1->CurrencyCode[4-1] = 0;
    } else {
      arg1->CurrencyCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferBankToFutureRspField_1CurrencyCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferBankToFutureRspField *arg1 = (CThostFtdcTransferBankToFutureRspField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferBankToFutureRspField **)&jarg1; 
  result = (char *) ((arg1)->CurrencyCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcTransferBankToFutureRspField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcTransferBankToFutureRspField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcTransferBankToFutureRspField *)new CThostFtdcTransferBankToFutureRspField();
  *(CThostFtdcTransferBankToFutureRspField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcTransferBankToFutureRspField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcTransferBankToFutureRspField *arg1 = (CThostFtdcTransferBankToFutureRspField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcTransferBankToFutureRspField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferFutureToBankReqField_1FutureAccount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferFutureToBankReqField *arg1 = (CThostFtdcTransferFutureToBankReqField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferFutureToBankReqField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->FutureAccount, (const char *)arg2, 13-1);
      arg1->FutureAccount[13-1] = 0;
    } else {
      arg1->FutureAccount[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferFutureToBankReqField_1FutureAccount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferFutureToBankReqField *arg1 = (CThostFtdcTransferFutureToBankReqField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferFutureToBankReqField **)&jarg1; 
  result = (char *) ((arg1)->FutureAccount);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferFutureToBankReqField_1FuturePwdFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcTransferFutureToBankReqField *arg1 = (CThostFtdcTransferFutureToBankReqField *) 0 ;
  TThostFtdcFuturePwdFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferFutureToBankReqField **)&jarg1; 
  arg2 = (TThostFtdcFuturePwdFlagType)jarg2; 
  if (arg1) (arg1)->FuturePwdFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferFutureToBankReqField_1FuturePwdFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcTransferFutureToBankReqField *arg1 = (CThostFtdcTransferFutureToBankReqField *) 0 ;
  TThostFtdcFuturePwdFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferFutureToBankReqField **)&jarg1; 
  result = (TThostFtdcFuturePwdFlagType) ((arg1)->FuturePwdFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferFutureToBankReqField_1FutureAccPwd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferFutureToBankReqField *arg1 = (CThostFtdcTransferFutureToBankReqField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferFutureToBankReqField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->FutureAccPwd, (const char *)arg2, 17-1);
      arg1->FutureAccPwd[17-1] = 0;
    } else {
      arg1->FutureAccPwd[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferFutureToBankReqField_1FutureAccPwd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferFutureToBankReqField *arg1 = (CThostFtdcTransferFutureToBankReqField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferFutureToBankReqField **)&jarg1; 
  result = (char *) ((arg1)->FutureAccPwd);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferFutureToBankReqField_1TradeAmt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTransferFutureToBankReqField *arg1 = (CThostFtdcTransferFutureToBankReqField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferFutureToBankReqField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->TradeAmt = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferFutureToBankReqField_1TradeAmt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTransferFutureToBankReqField *arg1 = (CThostFtdcTransferFutureToBankReqField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferFutureToBankReqField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->TradeAmt);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferFutureToBankReqField_1CustFee_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTransferFutureToBankReqField *arg1 = (CThostFtdcTransferFutureToBankReqField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferFutureToBankReqField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->CustFee = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferFutureToBankReqField_1CustFee_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTransferFutureToBankReqField *arg1 = (CThostFtdcTransferFutureToBankReqField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferFutureToBankReqField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->CustFee);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferFutureToBankReqField_1CurrencyCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferFutureToBankReqField *arg1 = (CThostFtdcTransferFutureToBankReqField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferFutureToBankReqField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrencyCode, (const char *)arg2, 4-1);
      arg1->CurrencyCode[4-1] = 0;
    } else {
      arg1->CurrencyCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferFutureToBankReqField_1CurrencyCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferFutureToBankReqField *arg1 = (CThostFtdcTransferFutureToBankReqField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferFutureToBankReqField **)&jarg1; 
  result = (char *) ((arg1)->CurrencyCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcTransferFutureToBankReqField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcTransferFutureToBankReqField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcTransferFutureToBankReqField *)new CThostFtdcTransferFutureToBankReqField();
  *(CThostFtdcTransferFutureToBankReqField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcTransferFutureToBankReqField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcTransferFutureToBankReqField *arg1 = (CThostFtdcTransferFutureToBankReqField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcTransferFutureToBankReqField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferFutureToBankRspField_1RetCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferFutureToBankRspField *arg1 = (CThostFtdcTransferFutureToBankRspField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferFutureToBankRspField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->RetCode, (const char *)arg2, 5-1);
      arg1->RetCode[5-1] = 0;
    } else {
      arg1->RetCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferFutureToBankRspField_1RetCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferFutureToBankRspField *arg1 = (CThostFtdcTransferFutureToBankRspField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferFutureToBankRspField **)&jarg1; 
  result = (char *) ((arg1)->RetCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferFutureToBankRspField_1RetInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferFutureToBankRspField *arg1 = (CThostFtdcTransferFutureToBankRspField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferFutureToBankRspField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->RetInfo, (const char *)arg2, 129-1);
      arg1->RetInfo[129-1] = 0;
    } else {
      arg1->RetInfo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferFutureToBankRspField_1RetInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferFutureToBankRspField *arg1 = (CThostFtdcTransferFutureToBankRspField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferFutureToBankRspField **)&jarg1; 
  result = (char *) ((arg1)->RetInfo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferFutureToBankRspField_1FutureAccount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferFutureToBankRspField *arg1 = (CThostFtdcTransferFutureToBankRspField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferFutureToBankRspField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->FutureAccount, (const char *)arg2, 13-1);
      arg1->FutureAccount[13-1] = 0;
    } else {
      arg1->FutureAccount[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferFutureToBankRspField_1FutureAccount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferFutureToBankRspField *arg1 = (CThostFtdcTransferFutureToBankRspField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferFutureToBankRspField **)&jarg1; 
  result = (char *) ((arg1)->FutureAccount);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferFutureToBankRspField_1TradeAmt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTransferFutureToBankRspField *arg1 = (CThostFtdcTransferFutureToBankRspField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferFutureToBankRspField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->TradeAmt = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferFutureToBankRspField_1TradeAmt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTransferFutureToBankRspField *arg1 = (CThostFtdcTransferFutureToBankRspField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferFutureToBankRspField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->TradeAmt);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferFutureToBankRspField_1CustFee_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTransferFutureToBankRspField *arg1 = (CThostFtdcTransferFutureToBankRspField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferFutureToBankRspField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->CustFee = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferFutureToBankRspField_1CustFee_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTransferFutureToBankRspField *arg1 = (CThostFtdcTransferFutureToBankRspField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferFutureToBankRspField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->CustFee);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferFutureToBankRspField_1CurrencyCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferFutureToBankRspField *arg1 = (CThostFtdcTransferFutureToBankRspField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferFutureToBankRspField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrencyCode, (const char *)arg2, 4-1);
      arg1->CurrencyCode[4-1] = 0;
    } else {
      arg1->CurrencyCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferFutureToBankRspField_1CurrencyCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferFutureToBankRspField *arg1 = (CThostFtdcTransferFutureToBankRspField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferFutureToBankRspField **)&jarg1; 
  result = (char *) ((arg1)->CurrencyCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcTransferFutureToBankRspField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcTransferFutureToBankRspField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcTransferFutureToBankRspField *)new CThostFtdcTransferFutureToBankRspField();
  *(CThostFtdcTransferFutureToBankRspField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcTransferFutureToBankRspField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcTransferFutureToBankRspField *arg1 = (CThostFtdcTransferFutureToBankRspField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcTransferFutureToBankRspField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryBankReqField_1FutureAccount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferQryBankReqField *arg1 = (CThostFtdcTransferQryBankReqField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryBankReqField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->FutureAccount, (const char *)arg2, 13-1);
      arg1->FutureAccount[13-1] = 0;
    } else {
      arg1->FutureAccount[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryBankReqField_1FutureAccount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferQryBankReqField *arg1 = (CThostFtdcTransferQryBankReqField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryBankReqField **)&jarg1; 
  result = (char *) ((arg1)->FutureAccount);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryBankReqField_1FuturePwdFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcTransferQryBankReqField *arg1 = (CThostFtdcTransferQryBankReqField *) 0 ;
  TThostFtdcFuturePwdFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryBankReqField **)&jarg1; 
  arg2 = (TThostFtdcFuturePwdFlagType)jarg2; 
  if (arg1) (arg1)->FuturePwdFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryBankReqField_1FuturePwdFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcTransferQryBankReqField *arg1 = (CThostFtdcTransferQryBankReqField *) 0 ;
  TThostFtdcFuturePwdFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryBankReqField **)&jarg1; 
  result = (TThostFtdcFuturePwdFlagType) ((arg1)->FuturePwdFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryBankReqField_1FutureAccPwd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferQryBankReqField *arg1 = (CThostFtdcTransferQryBankReqField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryBankReqField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->FutureAccPwd, (const char *)arg2, 17-1);
      arg1->FutureAccPwd[17-1] = 0;
    } else {
      arg1->FutureAccPwd[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryBankReqField_1FutureAccPwd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferQryBankReqField *arg1 = (CThostFtdcTransferQryBankReqField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryBankReqField **)&jarg1; 
  result = (char *) ((arg1)->FutureAccPwd);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryBankReqField_1CurrencyCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferQryBankReqField *arg1 = (CThostFtdcTransferQryBankReqField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryBankReqField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrencyCode, (const char *)arg2, 4-1);
      arg1->CurrencyCode[4-1] = 0;
    } else {
      arg1->CurrencyCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryBankReqField_1CurrencyCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferQryBankReqField *arg1 = (CThostFtdcTransferQryBankReqField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryBankReqField **)&jarg1; 
  result = (char *) ((arg1)->CurrencyCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcTransferQryBankReqField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcTransferQryBankReqField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcTransferQryBankReqField *)new CThostFtdcTransferQryBankReqField();
  *(CThostFtdcTransferQryBankReqField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcTransferQryBankReqField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcTransferQryBankReqField *arg1 = (CThostFtdcTransferQryBankReqField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcTransferQryBankReqField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryBankRspField_1RetCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferQryBankRspField *arg1 = (CThostFtdcTransferQryBankRspField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryBankRspField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->RetCode, (const char *)arg2, 5-1);
      arg1->RetCode[5-1] = 0;
    } else {
      arg1->RetCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryBankRspField_1RetCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferQryBankRspField *arg1 = (CThostFtdcTransferQryBankRspField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryBankRspField **)&jarg1; 
  result = (char *) ((arg1)->RetCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryBankRspField_1RetInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferQryBankRspField *arg1 = (CThostFtdcTransferQryBankRspField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryBankRspField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->RetInfo, (const char *)arg2, 129-1);
      arg1->RetInfo[129-1] = 0;
    } else {
      arg1->RetInfo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryBankRspField_1RetInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferQryBankRspField *arg1 = (CThostFtdcTransferQryBankRspField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryBankRspField **)&jarg1; 
  result = (char *) ((arg1)->RetInfo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryBankRspField_1FutureAccount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferQryBankRspField *arg1 = (CThostFtdcTransferQryBankRspField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryBankRspField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->FutureAccount, (const char *)arg2, 13-1);
      arg1->FutureAccount[13-1] = 0;
    } else {
      arg1->FutureAccount[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryBankRspField_1FutureAccount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferQryBankRspField *arg1 = (CThostFtdcTransferQryBankRspField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryBankRspField **)&jarg1; 
  result = (char *) ((arg1)->FutureAccount);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryBankRspField_1TradeAmt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTransferQryBankRspField *arg1 = (CThostFtdcTransferQryBankRspField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryBankRspField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->TradeAmt = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryBankRspField_1TradeAmt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTransferQryBankRspField *arg1 = (CThostFtdcTransferQryBankRspField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryBankRspField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->TradeAmt);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryBankRspField_1UseAmt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTransferQryBankRspField *arg1 = (CThostFtdcTransferQryBankRspField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryBankRspField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->UseAmt = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryBankRspField_1UseAmt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTransferQryBankRspField *arg1 = (CThostFtdcTransferQryBankRspField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryBankRspField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->UseAmt);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryBankRspField_1FetchAmt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTransferQryBankRspField *arg1 = (CThostFtdcTransferQryBankRspField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryBankRspField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->FetchAmt = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryBankRspField_1FetchAmt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTransferQryBankRspField *arg1 = (CThostFtdcTransferQryBankRspField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryBankRspField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->FetchAmt);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryBankRspField_1CurrencyCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferQryBankRspField *arg1 = (CThostFtdcTransferQryBankRspField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryBankRspField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrencyCode, (const char *)arg2, 4-1);
      arg1->CurrencyCode[4-1] = 0;
    } else {
      arg1->CurrencyCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryBankRspField_1CurrencyCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferQryBankRspField *arg1 = (CThostFtdcTransferQryBankRspField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryBankRspField **)&jarg1; 
  result = (char *) ((arg1)->CurrencyCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcTransferQryBankRspField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcTransferQryBankRspField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcTransferQryBankRspField *)new CThostFtdcTransferQryBankRspField();
  *(CThostFtdcTransferQryBankRspField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcTransferQryBankRspField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcTransferQryBankRspField *arg1 = (CThostFtdcTransferQryBankRspField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcTransferQryBankRspField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryDetailReqField_1FutureAccount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferQryDetailReqField *arg1 = (CThostFtdcTransferQryDetailReqField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryDetailReqField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->FutureAccount, (const char *)arg2, 13-1);
      arg1->FutureAccount[13-1] = 0;
    } else {
      arg1->FutureAccount[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryDetailReqField_1FutureAccount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferQryDetailReqField *arg1 = (CThostFtdcTransferQryDetailReqField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryDetailReqField **)&jarg1; 
  result = (char *) ((arg1)->FutureAccount);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcTransferQryDetailReqField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcTransferQryDetailReqField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcTransferQryDetailReqField *)new CThostFtdcTransferQryDetailReqField();
  *(CThostFtdcTransferQryDetailReqField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcTransferQryDetailReqField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcTransferQryDetailReqField *arg1 = (CThostFtdcTransferQryDetailReqField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcTransferQryDetailReqField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryDetailRspField_1TradeDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferQryDetailRspField *arg1 = (CThostFtdcTransferQryDetailRspField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryDetailRspField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeDate, (const char *)arg2, 9-1);
      arg1->TradeDate[9-1] = 0;
    } else {
      arg1->TradeDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryDetailRspField_1TradeDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferQryDetailRspField *arg1 = (CThostFtdcTransferQryDetailRspField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryDetailRspField **)&jarg1; 
  result = (char *) ((arg1)->TradeDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryDetailRspField_1TradeTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferQryDetailRspField *arg1 = (CThostFtdcTransferQryDetailRspField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryDetailRspField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeTime, (const char *)arg2, 9-1);
      arg1->TradeTime[9-1] = 0;
    } else {
      arg1->TradeTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryDetailRspField_1TradeTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferQryDetailRspField *arg1 = (CThostFtdcTransferQryDetailRspField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryDetailRspField **)&jarg1; 
  result = (char *) ((arg1)->TradeTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryDetailRspField_1TradeCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferQryDetailRspField *arg1 = (CThostFtdcTransferQryDetailRspField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryDetailRspField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeCode, (const char *)arg2, 7-1);
      arg1->TradeCode[7-1] = 0;
    } else {
      arg1->TradeCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryDetailRspField_1TradeCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferQryDetailRspField *arg1 = (CThostFtdcTransferQryDetailRspField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryDetailRspField **)&jarg1; 
  result = (char *) ((arg1)->TradeCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryDetailRspField_1FutureSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcTransferQryDetailRspField *arg1 = (CThostFtdcTransferQryDetailRspField *) 0 ;
  TThostFtdcTradeSerialNoType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryDetailRspField **)&jarg1; 
  arg2 = (TThostFtdcTradeSerialNoType)jarg2; 
  if (arg1) (arg1)->FutureSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryDetailRspField_1FutureSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcTransferQryDetailRspField *arg1 = (CThostFtdcTransferQryDetailRspField *) 0 ;
  TThostFtdcTradeSerialNoType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryDetailRspField **)&jarg1; 
  result = (TThostFtdcTradeSerialNoType) ((arg1)->FutureSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryDetailRspField_1FutureID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferQryDetailRspField *arg1 = (CThostFtdcTransferQryDetailRspField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryDetailRspField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->FutureID, (const char *)arg2, 11-1);
      arg1->FutureID[11-1] = 0;
    } else {
      arg1->FutureID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryDetailRspField_1FutureID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferQryDetailRspField *arg1 = (CThostFtdcTransferQryDetailRspField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryDetailRspField **)&jarg1; 
  result = (char *) ((arg1)->FutureID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryDetailRspField_1FutureAccount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferQryDetailRspField *arg1 = (CThostFtdcTransferQryDetailRspField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryDetailRspField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->FutureAccount, (const char *)arg2, 22-1);
      arg1->FutureAccount[22-1] = 0;
    } else {
      arg1->FutureAccount[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryDetailRspField_1FutureAccount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferQryDetailRspField *arg1 = (CThostFtdcTransferQryDetailRspField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryDetailRspField **)&jarg1; 
  result = (char *) ((arg1)->FutureAccount);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryDetailRspField_1BankSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcTransferQryDetailRspField *arg1 = (CThostFtdcTransferQryDetailRspField *) 0 ;
  TThostFtdcTradeSerialNoType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryDetailRspField **)&jarg1; 
  arg2 = (TThostFtdcTradeSerialNoType)jarg2; 
  if (arg1) (arg1)->BankSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryDetailRspField_1BankSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcTransferQryDetailRspField *arg1 = (CThostFtdcTransferQryDetailRspField *) 0 ;
  TThostFtdcTradeSerialNoType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryDetailRspField **)&jarg1; 
  result = (TThostFtdcTradeSerialNoType) ((arg1)->BankSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryDetailRspField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferQryDetailRspField *arg1 = (CThostFtdcTransferQryDetailRspField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryDetailRspField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryDetailRspField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferQryDetailRspField *arg1 = (CThostFtdcTransferQryDetailRspField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryDetailRspField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryDetailRspField_1BankBrchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferQryDetailRspField *arg1 = (CThostFtdcTransferQryDetailRspField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryDetailRspField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBrchID, (const char *)arg2, 5-1);
      arg1->BankBrchID[5-1] = 0;
    } else {
      arg1->BankBrchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryDetailRspField_1BankBrchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferQryDetailRspField *arg1 = (CThostFtdcTransferQryDetailRspField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryDetailRspField **)&jarg1; 
  result = (char *) ((arg1)->BankBrchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryDetailRspField_1BankAccount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferQryDetailRspField *arg1 = (CThostFtdcTransferQryDetailRspField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryDetailRspField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankAccount, (const char *)arg2, 41-1);
      arg1->BankAccount[41-1] = 0;
    } else {
      arg1->BankAccount[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryDetailRspField_1BankAccount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferQryDetailRspField *arg1 = (CThostFtdcTransferQryDetailRspField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryDetailRspField **)&jarg1; 
  result = (char *) ((arg1)->BankAccount);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryDetailRspField_1CertCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferQryDetailRspField *arg1 = (CThostFtdcTransferQryDetailRspField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryDetailRspField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CertCode, (const char *)arg2, 21-1);
      arg1->CertCode[21-1] = 0;
    } else {
      arg1->CertCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryDetailRspField_1CertCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferQryDetailRspField *arg1 = (CThostFtdcTransferQryDetailRspField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryDetailRspField **)&jarg1; 
  result = (char *) ((arg1)->CertCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryDetailRspField_1CurrencyCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferQryDetailRspField *arg1 = (CThostFtdcTransferQryDetailRspField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryDetailRspField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrencyCode, (const char *)arg2, 4-1);
      arg1->CurrencyCode[4-1] = 0;
    } else {
      arg1->CurrencyCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryDetailRspField_1CurrencyCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferQryDetailRspField *arg1 = (CThostFtdcTransferQryDetailRspField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryDetailRspField **)&jarg1; 
  result = (char *) ((arg1)->CurrencyCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryDetailRspField_1TxAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTransferQryDetailRspField *arg1 = (CThostFtdcTransferQryDetailRspField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryDetailRspField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->TxAmount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryDetailRspField_1TxAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTransferQryDetailRspField *arg1 = (CThostFtdcTransferQryDetailRspField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryDetailRspField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->TxAmount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryDetailRspField_1Flag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcTransferQryDetailRspField *arg1 = (CThostFtdcTransferQryDetailRspField *) 0 ;
  TThostFtdcTransferValidFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryDetailRspField **)&jarg1; 
  arg2 = (TThostFtdcTransferValidFlagType)jarg2; 
  if (arg1) (arg1)->Flag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferQryDetailRspField_1Flag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcTransferQryDetailRspField *arg1 = (CThostFtdcTransferQryDetailRspField *) 0 ;
  TThostFtdcTransferValidFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferQryDetailRspField **)&jarg1; 
  result = (TThostFtdcTransferValidFlagType) ((arg1)->Flag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcTransferQryDetailRspField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcTransferQryDetailRspField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcTransferQryDetailRspField *)new CThostFtdcTransferQryDetailRspField();
  *(CThostFtdcTransferQryDetailRspField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcTransferQryDetailRspField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcTransferQryDetailRspField *arg1 = (CThostFtdcTransferQryDetailRspField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcTransferQryDetailRspField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspInfoField_1ErrorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspInfoField *arg1 = (CThostFtdcRspInfoField *) 0 ;
  TThostFtdcErrorIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspInfoField **)&jarg1; 
  arg2 = (TThostFtdcErrorIDType)jarg2; 
  if (arg1) (arg1)->ErrorID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspInfoField_1ErrorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspInfoField *arg1 = (CThostFtdcRspInfoField *) 0 ;
  TThostFtdcErrorIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspInfoField **)&jarg1; 
  result = (TThostFtdcErrorIDType) ((arg1)->ErrorID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspInfoField_1ErrorMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspInfoField *arg1 = (CThostFtdcRspInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ErrorMsg, (const char *)arg2, 81-1);
      arg1->ErrorMsg[81-1] = 0;
    } else {
      arg1->ErrorMsg[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspInfoField_1ErrorMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspInfoField *arg1 = (CThostFtdcRspInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspInfoField **)&jarg1; 
  result = (char *) ((arg1)->ErrorMsg);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcRspInfoField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcRspInfoField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcRspInfoField *)new CThostFtdcRspInfoField();
  *(CThostFtdcRspInfoField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcRspInfoField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcRspInfoField *arg1 = (CThostFtdcRspInfoField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcRspInfoField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeField *arg1 = (CThostFtdcExchangeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeField *arg1 = (CThostFtdcExchangeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeField_1ExchangeName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeField *arg1 = (CThostFtdcExchangeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeName, (const char *)arg2, 31-1);
      arg1->ExchangeName[31-1] = 0;
    } else {
      arg1->ExchangeName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeField_1ExchangeName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeField *arg1 = (CThostFtdcExchangeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeField_1ExchangeProperty_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcExchangeField *arg1 = (CThostFtdcExchangeField *) 0 ;
  TThostFtdcExchangePropertyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeField **)&jarg1; 
  arg2 = (TThostFtdcExchangePropertyType)jarg2; 
  if (arg1) (arg1)->ExchangeProperty = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeField_1ExchangeProperty_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcExchangeField *arg1 = (CThostFtdcExchangeField *) 0 ;
  TThostFtdcExchangePropertyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeField **)&jarg1; 
  result = (TThostFtdcExchangePropertyType) ((arg1)->ExchangeProperty);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcExchangeField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcExchangeField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcExchangeField *)new CThostFtdcExchangeField();
  *(CThostFtdcExchangeField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcExchangeField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcExchangeField *arg1 = (CThostFtdcExchangeField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcExchangeField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcProductField_1ProductID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcProductField *arg1 = (CThostFtdcProductField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcProductField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ProductID, (const char *)arg2, 31-1);
      arg1->ProductID[31-1] = 0;
    } else {
      arg1->ProductID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcProductField_1ProductID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcProductField *arg1 = (CThostFtdcProductField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcProductField **)&jarg1; 
  result = (char *) ((arg1)->ProductID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcProductField_1ProductName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcProductField *arg1 = (CThostFtdcProductField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcProductField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ProductName, (const char *)arg2, 21-1);
      arg1->ProductName[21-1] = 0;
    } else {
      arg1->ProductName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcProductField_1ProductName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcProductField *arg1 = (CThostFtdcProductField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcProductField **)&jarg1; 
  result = (char *) ((arg1)->ProductName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcProductField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcProductField *arg1 = (CThostFtdcProductField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcProductField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcProductField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcProductField *arg1 = (CThostFtdcProductField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcProductField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcProductField_1ProductClass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcProductField *arg1 = (CThostFtdcProductField *) 0 ;
  TThostFtdcProductClassType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcProductField **)&jarg1; 
  arg2 = (TThostFtdcProductClassType)jarg2; 
  if (arg1) (arg1)->ProductClass = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcProductField_1ProductClass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcProductField *arg1 = (CThostFtdcProductField *) 0 ;
  TThostFtdcProductClassType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcProductField **)&jarg1; 
  result = (TThostFtdcProductClassType) ((arg1)->ProductClass);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcProductField_1VolumeMultiple_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcProductField *arg1 = (CThostFtdcProductField *) 0 ;
  TThostFtdcVolumeMultipleType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcProductField **)&jarg1; 
  arg2 = (TThostFtdcVolumeMultipleType)jarg2; 
  if (arg1) (arg1)->VolumeMultiple = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcProductField_1VolumeMultiple_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcProductField *arg1 = (CThostFtdcProductField *) 0 ;
  TThostFtdcVolumeMultipleType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcProductField **)&jarg1; 
  result = (TThostFtdcVolumeMultipleType) ((arg1)->VolumeMultiple);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcProductField_1PriceTick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcProductField *arg1 = (CThostFtdcProductField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcProductField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->PriceTick = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcProductField_1PriceTick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcProductField *arg1 = (CThostFtdcProductField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcProductField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->PriceTick);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcProductField_1MaxMarketOrderVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcProductField *arg1 = (CThostFtdcProductField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcProductField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->MaxMarketOrderVolume = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcProductField_1MaxMarketOrderVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcProductField *arg1 = (CThostFtdcProductField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcProductField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->MaxMarketOrderVolume);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcProductField_1MinMarketOrderVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcProductField *arg1 = (CThostFtdcProductField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcProductField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->MinMarketOrderVolume = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcProductField_1MinMarketOrderVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcProductField *arg1 = (CThostFtdcProductField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcProductField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->MinMarketOrderVolume);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcProductField_1MaxLimitOrderVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcProductField *arg1 = (CThostFtdcProductField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcProductField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->MaxLimitOrderVolume = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcProductField_1MaxLimitOrderVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcProductField *arg1 = (CThostFtdcProductField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcProductField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->MaxLimitOrderVolume);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcProductField_1MinLimitOrderVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcProductField *arg1 = (CThostFtdcProductField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcProductField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->MinLimitOrderVolume = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcProductField_1MinLimitOrderVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcProductField *arg1 = (CThostFtdcProductField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcProductField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->MinLimitOrderVolume);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcProductField_1PositionType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcProductField *arg1 = (CThostFtdcProductField *) 0 ;
  TThostFtdcPositionTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcProductField **)&jarg1; 
  arg2 = (TThostFtdcPositionTypeType)jarg2; 
  if (arg1) (arg1)->PositionType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcProductField_1PositionType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcProductField *arg1 = (CThostFtdcProductField *) 0 ;
  TThostFtdcPositionTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcProductField **)&jarg1; 
  result = (TThostFtdcPositionTypeType) ((arg1)->PositionType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcProductField_1PositionDateType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcProductField *arg1 = (CThostFtdcProductField *) 0 ;
  TThostFtdcPositionDateTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcProductField **)&jarg1; 
  arg2 = (TThostFtdcPositionDateTypeType)jarg2; 
  if (arg1) (arg1)->PositionDateType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcProductField_1PositionDateType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcProductField *arg1 = (CThostFtdcProductField *) 0 ;
  TThostFtdcPositionDateTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcProductField **)&jarg1; 
  result = (TThostFtdcPositionDateTypeType) ((arg1)->PositionDateType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcProductField_1CloseDealType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcProductField *arg1 = (CThostFtdcProductField *) 0 ;
  TThostFtdcCloseDealTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcProductField **)&jarg1; 
  arg2 = (TThostFtdcCloseDealTypeType)jarg2; 
  if (arg1) (arg1)->CloseDealType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcProductField_1CloseDealType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcProductField *arg1 = (CThostFtdcProductField *) 0 ;
  TThostFtdcCloseDealTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcProductField **)&jarg1; 
  result = (TThostFtdcCloseDealTypeType) ((arg1)->CloseDealType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcProductField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcProductField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcProductField *)new CThostFtdcProductField();
  *(CThostFtdcProductField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcProductField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcProductField *arg1 = (CThostFtdcProductField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcProductField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1InstrumentName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentName, (const char *)arg2, 21-1);
      arg1->InstrumentName[21-1] = 0;
    } else {
      arg1->InstrumentName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1InstrumentName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1ExchangeInstID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeInstID, (const char *)arg2, 31-1);
      arg1->ExchangeInstID[31-1] = 0;
    } else {
      arg1->ExchangeInstID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1ExchangeInstID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeInstID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1ProductID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ProductID, (const char *)arg2, 31-1);
      arg1->ProductID[31-1] = 0;
    } else {
      arg1->ProductID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1ProductID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  result = (char *) ((arg1)->ProductID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1ProductClass_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  TThostFtdcProductClassType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  arg2 = (TThostFtdcProductClassType)jarg2; 
  if (arg1) (arg1)->ProductClass = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1ProductClass_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  TThostFtdcProductClassType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  result = (TThostFtdcProductClassType) ((arg1)->ProductClass);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1DeliveryYear_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  TThostFtdcYearType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  arg2 = (TThostFtdcYearType)jarg2; 
  if (arg1) (arg1)->DeliveryYear = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1DeliveryYear_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  TThostFtdcYearType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  result = (TThostFtdcYearType) ((arg1)->DeliveryYear);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1DeliveryMonth_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  TThostFtdcMonthType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  arg2 = (TThostFtdcMonthType)jarg2; 
  if (arg1) (arg1)->DeliveryMonth = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1DeliveryMonth_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  TThostFtdcMonthType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  result = (TThostFtdcMonthType) ((arg1)->DeliveryMonth);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1MaxMarketOrderVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->MaxMarketOrderVolume = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1MaxMarketOrderVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->MaxMarketOrderVolume);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1MinMarketOrderVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->MinMarketOrderVolume = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1MinMarketOrderVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->MinMarketOrderVolume);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1MaxLimitOrderVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->MaxLimitOrderVolume = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1MaxLimitOrderVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->MaxLimitOrderVolume);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1MinLimitOrderVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->MinLimitOrderVolume = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1MinLimitOrderVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->MinLimitOrderVolume);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1VolumeMultiple_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  TThostFtdcVolumeMultipleType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  arg2 = (TThostFtdcVolumeMultipleType)jarg2; 
  if (arg1) (arg1)->VolumeMultiple = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1VolumeMultiple_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  TThostFtdcVolumeMultipleType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  result = (TThostFtdcVolumeMultipleType) ((arg1)->VolumeMultiple);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1PriceTick_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->PriceTick = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1PriceTick_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->PriceTick);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1CreateDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CreateDate, (const char *)arg2, 9-1);
      arg1->CreateDate[9-1] = 0;
    } else {
      arg1->CreateDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1CreateDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  result = (char *) ((arg1)->CreateDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1OpenDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OpenDate, (const char *)arg2, 9-1);
      arg1->OpenDate[9-1] = 0;
    } else {
      arg1->OpenDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1OpenDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  result = (char *) ((arg1)->OpenDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1ExpireDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExpireDate, (const char *)arg2, 9-1);
      arg1->ExpireDate[9-1] = 0;
    } else {
      arg1->ExpireDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1ExpireDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  result = (char *) ((arg1)->ExpireDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1StartDelivDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->StartDelivDate, (const char *)arg2, 9-1);
      arg1->StartDelivDate[9-1] = 0;
    } else {
      arg1->StartDelivDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1StartDelivDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  result = (char *) ((arg1)->StartDelivDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1EndDelivDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->EndDelivDate, (const char *)arg2, 9-1);
      arg1->EndDelivDate[9-1] = 0;
    } else {
      arg1->EndDelivDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1EndDelivDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  result = (char *) ((arg1)->EndDelivDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1InstLifePhase_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  TThostFtdcInstLifePhaseType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  arg2 = (TThostFtdcInstLifePhaseType)jarg2; 
  if (arg1) (arg1)->InstLifePhase = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1InstLifePhase_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  TThostFtdcInstLifePhaseType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  result = (TThostFtdcInstLifePhaseType) ((arg1)->InstLifePhase);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1IsTrading_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->IsTrading = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1IsTrading_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->IsTrading);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1PositionType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  TThostFtdcPositionTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  arg2 = (TThostFtdcPositionTypeType)jarg2; 
  if (arg1) (arg1)->PositionType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1PositionType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  TThostFtdcPositionTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  result = (TThostFtdcPositionTypeType) ((arg1)->PositionType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1PositionDateType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  TThostFtdcPositionDateTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  arg2 = (TThostFtdcPositionDateTypeType)jarg2; 
  if (arg1) (arg1)->PositionDateType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1PositionDateType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  TThostFtdcPositionDateTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  result = (TThostFtdcPositionDateTypeType) ((arg1)->PositionDateType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1LongMarginRatio_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->LongMarginRatio = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1LongMarginRatio_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->LongMarginRatio);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1ShortMarginRatio_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->ShortMarginRatio = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1ShortMarginRatio_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->ShortMarginRatio);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1MaxMarginSideAlgorithm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  TThostFtdcMaxMarginSideAlgorithmType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  arg2 = (TThostFtdcMaxMarginSideAlgorithmType)jarg2; 
  if (arg1) (arg1)->MaxMarginSideAlgorithm = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentField_1MaxMarginSideAlgorithm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  TThostFtdcMaxMarginSideAlgorithmType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  result = (TThostFtdcMaxMarginSideAlgorithmType) ((arg1)->MaxMarginSideAlgorithm);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcInstrumentField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcInstrumentField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcInstrumentField *)new CThostFtdcInstrumentField();
  *(CThostFtdcInstrumentField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcInstrumentField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcInstrumentField *arg1 = (CThostFtdcInstrumentField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcInstrumentField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerField *arg1 = (CThostFtdcBrokerField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerField *arg1 = (CThostFtdcBrokerField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerField_1BrokerAbbr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerField *arg1 = (CThostFtdcBrokerField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerAbbr, (const char *)arg2, 9-1);
      arg1->BrokerAbbr[9-1] = 0;
    } else {
      arg1->BrokerAbbr[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerField_1BrokerAbbr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerField *arg1 = (CThostFtdcBrokerField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerField **)&jarg1; 
  result = (char *) ((arg1)->BrokerAbbr);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerField_1BrokerName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerField *arg1 = (CThostFtdcBrokerField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerName, (const char *)arg2, 81-1);
      arg1->BrokerName[81-1] = 0;
    } else {
      arg1->BrokerName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerField_1BrokerName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerField *arg1 = (CThostFtdcBrokerField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerField **)&jarg1; 
  result = (char *) ((arg1)->BrokerName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerField_1IsActive_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcBrokerField *arg1 = (CThostFtdcBrokerField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->IsActive = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerField_1IsActive_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcBrokerField *arg1 = (CThostFtdcBrokerField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->IsActive);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcBrokerField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcBrokerField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcBrokerField *)new CThostFtdcBrokerField();
  *(CThostFtdcBrokerField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcBrokerField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcBrokerField *arg1 = (CThostFtdcBrokerField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcBrokerField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTraderField *arg1 = (CThostFtdcTraderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTraderField *arg1 = (CThostFtdcTraderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderField_1TraderID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTraderField *arg1 = (CThostFtdcTraderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TraderID, (const char *)arg2, 21-1);
      arg1->TraderID[21-1] = 0;
    } else {
      arg1->TraderID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderField_1TraderID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTraderField *arg1 = (CThostFtdcTraderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderField **)&jarg1; 
  result = (char *) ((arg1)->TraderID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderField_1ParticipantID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTraderField *arg1 = (CThostFtdcTraderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ParticipantID, (const char *)arg2, 11-1);
      arg1->ParticipantID[11-1] = 0;
    } else {
      arg1->ParticipantID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderField_1ParticipantID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTraderField *arg1 = (CThostFtdcTraderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderField **)&jarg1; 
  result = (char *) ((arg1)->ParticipantID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderField_1Password_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTraderField *arg1 = (CThostFtdcTraderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Password, (const char *)arg2, 41-1);
      arg1->Password[41-1] = 0;
    } else {
      arg1->Password[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderField_1Password_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTraderField *arg1 = (CThostFtdcTraderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderField **)&jarg1; 
  result = (char *) ((arg1)->Password);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderField_1InstallCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcTraderField *arg1 = (CThostFtdcTraderField *) 0 ;
  TThostFtdcInstallCountType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderField **)&jarg1; 
  arg2 = (TThostFtdcInstallCountType)jarg2; 
  if (arg1) (arg1)->InstallCount = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderField_1InstallCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcTraderField *arg1 = (CThostFtdcTraderField *) 0 ;
  TThostFtdcInstallCountType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderField **)&jarg1; 
  result = (TThostFtdcInstallCountType) ((arg1)->InstallCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTraderField *arg1 = (CThostFtdcTraderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTraderField *arg1 = (CThostFtdcTraderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcTraderField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcTraderField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcTraderField *)new CThostFtdcTraderField();
  *(CThostFtdcTraderField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcTraderField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcTraderField *arg1 = (CThostFtdcTraderField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcTraderField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorField *arg1 = (CThostFtdcInvestorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorField *arg1 = (CThostFtdcInvestorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorField *arg1 = (CThostFtdcInvestorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorField *arg1 = (CThostFtdcInvestorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorField_1InvestorGroupID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorField *arg1 = (CThostFtdcInvestorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorGroupID, (const char *)arg2, 13-1);
      arg1->InvestorGroupID[13-1] = 0;
    } else {
      arg1->InvestorGroupID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorField_1InvestorGroupID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorField *arg1 = (CThostFtdcInvestorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorField **)&jarg1; 
  result = (char *) ((arg1)->InvestorGroupID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorField_1InvestorName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorField *arg1 = (CThostFtdcInvestorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorName, (const char *)arg2, 81-1);
      arg1->InvestorName[81-1] = 0;
    } else {
      arg1->InvestorName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorField_1InvestorName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorField *arg1 = (CThostFtdcInvestorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorField **)&jarg1; 
  result = (char *) ((arg1)->InvestorName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorField_1IdentifiedCardType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcInvestorField *arg1 = (CThostFtdcInvestorField *) 0 ;
  TThostFtdcIdCardTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorField **)&jarg1; 
  arg2 = (TThostFtdcIdCardTypeType)jarg2; 
  if (arg1) (arg1)->IdentifiedCardType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorField_1IdentifiedCardType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcInvestorField *arg1 = (CThostFtdcInvestorField *) 0 ;
  TThostFtdcIdCardTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorField **)&jarg1; 
  result = (TThostFtdcIdCardTypeType) ((arg1)->IdentifiedCardType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorField_1IdentifiedCardNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorField *arg1 = (CThostFtdcInvestorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->IdentifiedCardNo, (const char *)arg2, 51-1);
      arg1->IdentifiedCardNo[51-1] = 0;
    } else {
      arg1->IdentifiedCardNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorField_1IdentifiedCardNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorField *arg1 = (CThostFtdcInvestorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorField **)&jarg1; 
  result = (char *) ((arg1)->IdentifiedCardNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorField_1IsActive_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInvestorField *arg1 = (CThostFtdcInvestorField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->IsActive = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorField_1IsActive_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInvestorField *arg1 = (CThostFtdcInvestorField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->IsActive);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorField_1Telephone_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorField *arg1 = (CThostFtdcInvestorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Telephone, (const char *)arg2, 41-1);
      arg1->Telephone[41-1] = 0;
    } else {
      arg1->Telephone[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorField_1Telephone_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorField *arg1 = (CThostFtdcInvestorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorField **)&jarg1; 
  result = (char *) ((arg1)->Telephone);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorField_1Address_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorField *arg1 = (CThostFtdcInvestorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Address, (const char *)arg2, 101-1);
      arg1->Address[101-1] = 0;
    } else {
      arg1->Address[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorField_1Address_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorField *arg1 = (CThostFtdcInvestorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorField **)&jarg1; 
  result = (char *) ((arg1)->Address);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorField_1OpenDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorField *arg1 = (CThostFtdcInvestorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OpenDate, (const char *)arg2, 9-1);
      arg1->OpenDate[9-1] = 0;
    } else {
      arg1->OpenDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorField_1OpenDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorField *arg1 = (CThostFtdcInvestorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorField **)&jarg1; 
  result = (char *) ((arg1)->OpenDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorField_1Mobile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorField *arg1 = (CThostFtdcInvestorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Mobile, (const char *)arg2, 41-1);
      arg1->Mobile[41-1] = 0;
    } else {
      arg1->Mobile[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorField_1Mobile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorField *arg1 = (CThostFtdcInvestorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorField **)&jarg1; 
  result = (char *) ((arg1)->Mobile);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorField_1CommModelID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorField *arg1 = (CThostFtdcInvestorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CommModelID, (const char *)arg2, 13-1);
      arg1->CommModelID[13-1] = 0;
    } else {
      arg1->CommModelID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorField_1CommModelID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorField *arg1 = (CThostFtdcInvestorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorField **)&jarg1; 
  result = (char *) ((arg1)->CommModelID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorField_1MarginModelID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorField *arg1 = (CThostFtdcInvestorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->MarginModelID, (const char *)arg2, 13-1);
      arg1->MarginModelID[13-1] = 0;
    } else {
      arg1->MarginModelID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorField_1MarginModelID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorField *arg1 = (CThostFtdcInvestorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorField **)&jarg1; 
  result = (char *) ((arg1)->MarginModelID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcInvestorField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcInvestorField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcInvestorField *)new CThostFtdcInvestorField();
  *(CThostFtdcInvestorField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcInvestorField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcInvestorField *arg1 = (CThostFtdcInvestorField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcInvestorField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingCodeField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradingCodeField *arg1 = (CThostFtdcTradingCodeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingCodeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingCodeField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradingCodeField *arg1 = (CThostFtdcTradingCodeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingCodeField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingCodeField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradingCodeField *arg1 = (CThostFtdcTradingCodeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingCodeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingCodeField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradingCodeField *arg1 = (CThostFtdcTradingCodeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingCodeField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingCodeField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradingCodeField *arg1 = (CThostFtdcTradingCodeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingCodeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingCodeField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradingCodeField *arg1 = (CThostFtdcTradingCodeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingCodeField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingCodeField_1ClientID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradingCodeField *arg1 = (CThostFtdcTradingCodeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingCodeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ClientID, (const char *)arg2, 11-1);
      arg1->ClientID[11-1] = 0;
    } else {
      arg1->ClientID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingCodeField_1ClientID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradingCodeField *arg1 = (CThostFtdcTradingCodeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingCodeField **)&jarg1; 
  result = (char *) ((arg1)->ClientID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingCodeField_1IsActive_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcTradingCodeField *arg1 = (CThostFtdcTradingCodeField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingCodeField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->IsActive = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingCodeField_1IsActive_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcTradingCodeField *arg1 = (CThostFtdcTradingCodeField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingCodeField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->IsActive);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingCodeField_1ClientIDType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcTradingCodeField *arg1 = (CThostFtdcTradingCodeField *) 0 ;
  TThostFtdcClientIDTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingCodeField **)&jarg1; 
  arg2 = (TThostFtdcClientIDTypeType)jarg2; 
  if (arg1) (arg1)->ClientIDType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingCodeField_1ClientIDType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcTradingCodeField *arg1 = (CThostFtdcTradingCodeField *) 0 ;
  TThostFtdcClientIDTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingCodeField **)&jarg1; 
  result = (TThostFtdcClientIDTypeType) ((arg1)->ClientIDType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcTradingCodeField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcTradingCodeField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcTradingCodeField *)new CThostFtdcTradingCodeField();
  *(CThostFtdcTradingCodeField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcTradingCodeField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcTradingCodeField *arg1 = (CThostFtdcTradingCodeField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcTradingCodeField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcPartBrokerField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcPartBrokerField *arg1 = (CThostFtdcPartBrokerField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcPartBrokerField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcPartBrokerField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcPartBrokerField *arg1 = (CThostFtdcPartBrokerField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcPartBrokerField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcPartBrokerField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcPartBrokerField *arg1 = (CThostFtdcPartBrokerField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcPartBrokerField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcPartBrokerField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcPartBrokerField *arg1 = (CThostFtdcPartBrokerField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcPartBrokerField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcPartBrokerField_1ParticipantID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcPartBrokerField *arg1 = (CThostFtdcPartBrokerField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcPartBrokerField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ParticipantID, (const char *)arg2, 11-1);
      arg1->ParticipantID[11-1] = 0;
    } else {
      arg1->ParticipantID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcPartBrokerField_1ParticipantID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcPartBrokerField *arg1 = (CThostFtdcPartBrokerField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcPartBrokerField **)&jarg1; 
  result = (char *) ((arg1)->ParticipantID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcPartBrokerField_1IsActive_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcPartBrokerField *arg1 = (CThostFtdcPartBrokerField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcPartBrokerField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->IsActive = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcPartBrokerField_1IsActive_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcPartBrokerField *arg1 = (CThostFtdcPartBrokerField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcPartBrokerField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->IsActive);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcPartBrokerField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcPartBrokerField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcPartBrokerField *)new CThostFtdcPartBrokerField();
  *(CThostFtdcPartBrokerField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcPartBrokerField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcPartBrokerField *arg1 = (CThostFtdcPartBrokerField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcPartBrokerField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSuperUserField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSuperUserField *arg1 = (CThostFtdcSuperUserField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSuperUserField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSuperUserField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSuperUserField *arg1 = (CThostFtdcSuperUserField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSuperUserField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSuperUserField_1UserName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSuperUserField *arg1 = (CThostFtdcSuperUserField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSuperUserField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserName, (const char *)arg2, 81-1);
      arg1->UserName[81-1] = 0;
    } else {
      arg1->UserName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSuperUserField_1UserName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSuperUserField *arg1 = (CThostFtdcSuperUserField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSuperUserField **)&jarg1; 
  result = (char *) ((arg1)->UserName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSuperUserField_1Password_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSuperUserField *arg1 = (CThostFtdcSuperUserField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSuperUserField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Password, (const char *)arg2, 41-1);
      arg1->Password[41-1] = 0;
    } else {
      arg1->Password[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSuperUserField_1Password_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSuperUserField *arg1 = (CThostFtdcSuperUserField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSuperUserField **)&jarg1; 
  result = (char *) ((arg1)->Password);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSuperUserField_1IsActive_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcSuperUserField *arg1 = (CThostFtdcSuperUserField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSuperUserField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->IsActive = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcSuperUserField_1IsActive_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcSuperUserField *arg1 = (CThostFtdcSuperUserField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSuperUserField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->IsActive);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcSuperUserField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcSuperUserField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcSuperUserField *)new CThostFtdcSuperUserField();
  *(CThostFtdcSuperUserField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcSuperUserField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcSuperUserField *arg1 = (CThostFtdcSuperUserField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcSuperUserField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSuperUserFunctionField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSuperUserFunctionField *arg1 = (CThostFtdcSuperUserFunctionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSuperUserFunctionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSuperUserFunctionField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSuperUserFunctionField *arg1 = (CThostFtdcSuperUserFunctionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSuperUserFunctionField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSuperUserFunctionField_1FunctionCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcSuperUserFunctionField *arg1 = (CThostFtdcSuperUserFunctionField *) 0 ;
  TThostFtdcFunctionCodeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSuperUserFunctionField **)&jarg1; 
  arg2 = (TThostFtdcFunctionCodeType)jarg2; 
  if (arg1) (arg1)->FunctionCode = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcSuperUserFunctionField_1FunctionCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcSuperUserFunctionField *arg1 = (CThostFtdcSuperUserFunctionField *) 0 ;
  TThostFtdcFunctionCodeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSuperUserFunctionField **)&jarg1; 
  result = (TThostFtdcFunctionCodeType) ((arg1)->FunctionCode);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcSuperUserFunctionField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcSuperUserFunctionField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcSuperUserFunctionField *)new CThostFtdcSuperUserFunctionField();
  *(CThostFtdcSuperUserFunctionField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcSuperUserFunctionField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcSuperUserFunctionField *arg1 = (CThostFtdcSuperUserFunctionField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcSuperUserFunctionField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorGroupField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorGroupField *arg1 = (CThostFtdcInvestorGroupField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorGroupField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorGroupField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorGroupField *arg1 = (CThostFtdcInvestorGroupField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorGroupField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorGroupField_1InvestorGroupID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorGroupField *arg1 = (CThostFtdcInvestorGroupField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorGroupField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorGroupID, (const char *)arg2, 13-1);
      arg1->InvestorGroupID[13-1] = 0;
    } else {
      arg1->InvestorGroupID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorGroupField_1InvestorGroupID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorGroupField *arg1 = (CThostFtdcInvestorGroupField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorGroupField **)&jarg1; 
  result = (char *) ((arg1)->InvestorGroupID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorGroupField_1InvestorGroupName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorGroupField *arg1 = (CThostFtdcInvestorGroupField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorGroupField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorGroupName, (const char *)arg2, 41-1);
      arg1->InvestorGroupName[41-1] = 0;
    } else {
      arg1->InvestorGroupName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorGroupField_1InvestorGroupName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorGroupField *arg1 = (CThostFtdcInvestorGroupField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorGroupField **)&jarg1; 
  result = (char *) ((arg1)->InvestorGroupName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcInvestorGroupField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcInvestorGroupField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcInvestorGroupField *)new CThostFtdcInvestorGroupField();
  *(CThostFtdcInvestorGroupField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcInvestorGroupField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcInvestorGroupField *arg1 = (CThostFtdcInvestorGroupField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcInvestorGroupField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1AccountID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 13-1);
      arg1->AccountID[13-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1AccountID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  result = (char *) ((arg1)->AccountID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1PreMortgage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->PreMortgage = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1PreMortgage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->PreMortgage);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1PreCredit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->PreCredit = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1PreCredit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->PreCredit);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1PreDeposit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->PreDeposit = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1PreDeposit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->PreDeposit);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1PreBalance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->PreBalance = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1PreBalance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->PreBalance);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1PreMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->PreMargin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1PreMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->PreMargin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1InterestBase_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->InterestBase = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1InterestBase_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->InterestBase);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1Interest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Interest = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1Interest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Interest);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1Deposit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Deposit = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1Deposit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Deposit);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1Withdraw_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Withdraw = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1Withdraw_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Withdraw);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1FrozenMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->FrozenMargin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1FrozenMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->FrozenMargin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1FrozenCash_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->FrozenCash = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1FrozenCash_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->FrozenCash);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1FrozenCommission_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->FrozenCommission = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1FrozenCommission_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->FrozenCommission);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1CurrMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->CurrMargin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1CurrMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->CurrMargin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1CashIn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->CashIn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1CashIn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->CashIn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1Commission_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Commission = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1Commission_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Commission);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1CloseProfit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->CloseProfit = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1CloseProfit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->CloseProfit);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1PositionProfit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->PositionProfit = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1PositionProfit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->PositionProfit);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1Balance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Balance = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1Balance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Balance);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1Available_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Available = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1Available_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Available);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1WithdrawQuota_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->WithdrawQuota = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1WithdrawQuota_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->WithdrawQuota);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1Reserve_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Reserve = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1Reserve_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Reserve);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1SettlementID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcSettlementIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcSettlementIDType)jarg2; 
  if (arg1) (arg1)->SettlementID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1SettlementID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcSettlementIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  result = (TThostFtdcSettlementIDType) ((arg1)->SettlementID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1Credit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Credit = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1Credit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Credit);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1Mortgage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Mortgage = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1Mortgage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Mortgage);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1ExchangeMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->ExchangeMargin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1ExchangeMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->ExchangeMargin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1DeliveryMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->DeliveryMargin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1DeliveryMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->DeliveryMargin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1ExchangeDeliveryMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->ExchangeDeliveryMargin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1ExchangeDeliveryMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->ExchangeDeliveryMargin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1ReserveBalance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->ReserveBalance = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountField_1ReserveBalance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->ReserveBalance);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcTradingAccountField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcTradingAccountField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcTradingAccountField *)new CThostFtdcTradingAccountField();
  *(CThostFtdcTradingAccountField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcTradingAccountField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcTradingAccountField *arg1 = (CThostFtdcTradingAccountField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcTradingAccountField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1PosiDirection_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcPosiDirectionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcPosiDirectionType)jarg2; 
  if (arg1) (arg1)->PosiDirection = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1PosiDirection_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcPosiDirectionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcPosiDirectionType) ((arg1)->PosiDirection);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1HedgeFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcHedgeFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcHedgeFlagType)jarg2; 
  if (arg1) (arg1)->HedgeFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1HedgeFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcHedgeFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcHedgeFlagType) ((arg1)->HedgeFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1PositionDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcPositionDateType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcPositionDateType)jarg2; 
  if (arg1) (arg1)->PositionDate = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1PositionDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcPositionDateType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcPositionDateType) ((arg1)->PositionDate);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1YdPosition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->YdPosition = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1YdPosition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->YdPosition);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1Position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->Position = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1Position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->Position);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1LongFrozen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->LongFrozen = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1LongFrozen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->LongFrozen);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1ShortFrozen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->ShortFrozen = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1ShortFrozen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->ShortFrozen);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1LongFrozenAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->LongFrozenAmount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1LongFrozenAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->LongFrozenAmount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1ShortFrozenAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->ShortFrozenAmount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1ShortFrozenAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->ShortFrozenAmount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1OpenVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->OpenVolume = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1OpenVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->OpenVolume);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1CloseVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->CloseVolume = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1CloseVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->CloseVolume);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1OpenAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->OpenAmount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1OpenAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->OpenAmount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1CloseAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->CloseAmount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1CloseAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->CloseAmount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1PositionCost_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->PositionCost = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1PositionCost_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->PositionCost);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1PreMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->PreMargin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1PreMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->PreMargin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1UseMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->UseMargin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1UseMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->UseMargin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1FrozenMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->FrozenMargin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1FrozenMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->FrozenMargin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1FrozenCash_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->FrozenCash = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1FrozenCash_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->FrozenCash);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1FrozenCommission_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->FrozenCommission = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1FrozenCommission_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->FrozenCommission);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1CashIn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->CashIn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1CashIn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->CashIn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1Commission_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Commission = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1Commission_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Commission);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1CloseProfit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->CloseProfit = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1CloseProfit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->CloseProfit);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1PositionProfit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->PositionProfit = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1PositionProfit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->PositionProfit);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1PreSettlementPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->PreSettlementPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1PreSettlementPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->PreSettlementPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1SettlementPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->SettlementPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1SettlementPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->SettlementPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1SettlementID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcSettlementIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcSettlementIDType)jarg2; 
  if (arg1) (arg1)->SettlementID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1SettlementID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcSettlementIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcSettlementIDType) ((arg1)->SettlementID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1OpenCost_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->OpenCost = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1OpenCost_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->OpenCost);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1ExchangeMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->ExchangeMargin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1ExchangeMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->ExchangeMargin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1CombPosition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->CombPosition = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1CombPosition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->CombPosition);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1CombLongFrozen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->CombLongFrozen = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1CombLongFrozen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->CombLongFrozen);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1CombShortFrozen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->CombShortFrozen = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1CombShortFrozen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->CombShortFrozen);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1CloseProfitByDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->CloseProfitByDate = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1CloseProfitByDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->CloseProfitByDate);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1CloseProfitByTrade_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->CloseProfitByTrade = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1CloseProfitByTrade_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->CloseProfitByTrade);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1TodayPosition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->TodayPosition = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1TodayPosition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->TodayPosition);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1MarginRateByMoney_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->MarginRateByMoney = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1MarginRateByMoney_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->MarginRateByMoney);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1MarginRateByVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->MarginRateByVolume = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionField_1MarginRateByVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->MarginRateByVolume);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcInvestorPositionField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcInvestorPositionField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcInvestorPositionField *)new CThostFtdcInvestorPositionField();
  *(CThostFtdcInvestorPositionField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcInvestorPositionField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcInvestorPositionField *arg1 = (CThostFtdcInvestorPositionField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcInvestorPositionField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInstrumentMarginRateField *arg1 = (CThostFtdcInstrumentMarginRateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInstrumentMarginRateField *arg1 = (CThostFtdcInstrumentMarginRateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateField_1InvestorRange_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcInstrumentMarginRateField *arg1 = (CThostFtdcInstrumentMarginRateField *) 0 ;
  TThostFtdcInvestorRangeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateField **)&jarg1; 
  arg2 = (TThostFtdcInvestorRangeType)jarg2; 
  if (arg1) (arg1)->InvestorRange = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateField_1InvestorRange_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcInstrumentMarginRateField *arg1 = (CThostFtdcInstrumentMarginRateField *) 0 ;
  TThostFtdcInvestorRangeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateField **)&jarg1; 
  result = (TThostFtdcInvestorRangeType) ((arg1)->InvestorRange);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInstrumentMarginRateField *arg1 = (CThostFtdcInstrumentMarginRateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInstrumentMarginRateField *arg1 = (CThostFtdcInstrumentMarginRateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInstrumentMarginRateField *arg1 = (CThostFtdcInstrumentMarginRateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInstrumentMarginRateField *arg1 = (CThostFtdcInstrumentMarginRateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateField_1HedgeFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcInstrumentMarginRateField *arg1 = (CThostFtdcInstrumentMarginRateField *) 0 ;
  TThostFtdcHedgeFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateField **)&jarg1; 
  arg2 = (TThostFtdcHedgeFlagType)jarg2; 
  if (arg1) (arg1)->HedgeFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateField_1HedgeFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcInstrumentMarginRateField *arg1 = (CThostFtdcInstrumentMarginRateField *) 0 ;
  TThostFtdcHedgeFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateField **)&jarg1; 
  result = (TThostFtdcHedgeFlagType) ((arg1)->HedgeFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateField_1LongMarginRatioByMoney_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInstrumentMarginRateField *arg1 = (CThostFtdcInstrumentMarginRateField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->LongMarginRatioByMoney = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateField_1LongMarginRatioByMoney_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInstrumentMarginRateField *arg1 = (CThostFtdcInstrumentMarginRateField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->LongMarginRatioByMoney);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateField_1LongMarginRatioByVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInstrumentMarginRateField *arg1 = (CThostFtdcInstrumentMarginRateField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->LongMarginRatioByVolume = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateField_1LongMarginRatioByVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInstrumentMarginRateField *arg1 = (CThostFtdcInstrumentMarginRateField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->LongMarginRatioByVolume);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateField_1ShortMarginRatioByMoney_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInstrumentMarginRateField *arg1 = (CThostFtdcInstrumentMarginRateField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->ShortMarginRatioByMoney = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateField_1ShortMarginRatioByMoney_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInstrumentMarginRateField *arg1 = (CThostFtdcInstrumentMarginRateField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->ShortMarginRatioByMoney);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateField_1ShortMarginRatioByVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInstrumentMarginRateField *arg1 = (CThostFtdcInstrumentMarginRateField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->ShortMarginRatioByVolume = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateField_1ShortMarginRatioByVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInstrumentMarginRateField *arg1 = (CThostFtdcInstrumentMarginRateField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->ShortMarginRatioByVolume);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateField_1IsRelative_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInstrumentMarginRateField *arg1 = (CThostFtdcInstrumentMarginRateField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->IsRelative = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateField_1IsRelative_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInstrumentMarginRateField *arg1 = (CThostFtdcInstrumentMarginRateField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->IsRelative);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcInstrumentMarginRateField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcInstrumentMarginRateField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcInstrumentMarginRateField *)new CThostFtdcInstrumentMarginRateField();
  *(CThostFtdcInstrumentMarginRateField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcInstrumentMarginRateField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcInstrumentMarginRateField *arg1 = (CThostFtdcInstrumentMarginRateField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcInstrumentMarginRateField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentCommissionRateField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInstrumentCommissionRateField *arg1 = (CThostFtdcInstrumentCommissionRateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentCommissionRateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentCommissionRateField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInstrumentCommissionRateField *arg1 = (CThostFtdcInstrumentCommissionRateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentCommissionRateField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentCommissionRateField_1InvestorRange_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcInstrumentCommissionRateField *arg1 = (CThostFtdcInstrumentCommissionRateField *) 0 ;
  TThostFtdcInvestorRangeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentCommissionRateField **)&jarg1; 
  arg2 = (TThostFtdcInvestorRangeType)jarg2; 
  if (arg1) (arg1)->InvestorRange = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentCommissionRateField_1InvestorRange_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcInstrumentCommissionRateField *arg1 = (CThostFtdcInstrumentCommissionRateField *) 0 ;
  TThostFtdcInvestorRangeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentCommissionRateField **)&jarg1; 
  result = (TThostFtdcInvestorRangeType) ((arg1)->InvestorRange);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentCommissionRateField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInstrumentCommissionRateField *arg1 = (CThostFtdcInstrumentCommissionRateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentCommissionRateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentCommissionRateField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInstrumentCommissionRateField *arg1 = (CThostFtdcInstrumentCommissionRateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentCommissionRateField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentCommissionRateField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInstrumentCommissionRateField *arg1 = (CThostFtdcInstrumentCommissionRateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentCommissionRateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentCommissionRateField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInstrumentCommissionRateField *arg1 = (CThostFtdcInstrumentCommissionRateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentCommissionRateField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentCommissionRateField_1OpenRatioByMoney_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInstrumentCommissionRateField *arg1 = (CThostFtdcInstrumentCommissionRateField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentCommissionRateField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->OpenRatioByMoney = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentCommissionRateField_1OpenRatioByMoney_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInstrumentCommissionRateField *arg1 = (CThostFtdcInstrumentCommissionRateField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentCommissionRateField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->OpenRatioByMoney);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentCommissionRateField_1OpenRatioByVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInstrumentCommissionRateField *arg1 = (CThostFtdcInstrumentCommissionRateField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentCommissionRateField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->OpenRatioByVolume = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentCommissionRateField_1OpenRatioByVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInstrumentCommissionRateField *arg1 = (CThostFtdcInstrumentCommissionRateField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentCommissionRateField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->OpenRatioByVolume);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentCommissionRateField_1CloseRatioByMoney_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInstrumentCommissionRateField *arg1 = (CThostFtdcInstrumentCommissionRateField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentCommissionRateField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->CloseRatioByMoney = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentCommissionRateField_1CloseRatioByMoney_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInstrumentCommissionRateField *arg1 = (CThostFtdcInstrumentCommissionRateField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentCommissionRateField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->CloseRatioByMoney);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentCommissionRateField_1CloseRatioByVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInstrumentCommissionRateField *arg1 = (CThostFtdcInstrumentCommissionRateField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentCommissionRateField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->CloseRatioByVolume = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentCommissionRateField_1CloseRatioByVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInstrumentCommissionRateField *arg1 = (CThostFtdcInstrumentCommissionRateField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentCommissionRateField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->CloseRatioByVolume);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentCommissionRateField_1CloseTodayRatioByMoney_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInstrumentCommissionRateField *arg1 = (CThostFtdcInstrumentCommissionRateField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentCommissionRateField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->CloseTodayRatioByMoney = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentCommissionRateField_1CloseTodayRatioByMoney_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInstrumentCommissionRateField *arg1 = (CThostFtdcInstrumentCommissionRateField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentCommissionRateField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->CloseTodayRatioByMoney);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentCommissionRateField_1CloseTodayRatioByVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInstrumentCommissionRateField *arg1 = (CThostFtdcInstrumentCommissionRateField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentCommissionRateField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->CloseTodayRatioByVolume = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentCommissionRateField_1CloseTodayRatioByVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInstrumentCommissionRateField *arg1 = (CThostFtdcInstrumentCommissionRateField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentCommissionRateField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->CloseTodayRatioByVolume);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcInstrumentCommissionRateField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcInstrumentCommissionRateField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcInstrumentCommissionRateField *)new CThostFtdcInstrumentCommissionRateField();
  *(CThostFtdcInstrumentCommissionRateField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcInstrumentCommissionRateField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcInstrumentCommissionRateField *arg1 = (CThostFtdcInstrumentCommissionRateField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcInstrumentCommissionRateField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1ExchangeInstID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeInstID, (const char *)arg2, 31-1);
      arg1->ExchangeInstID[31-1] = 0;
    } else {
      arg1->ExchangeInstID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1ExchangeInstID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeInstID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1LastPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->LastPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1LastPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->LastPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1PreSettlementPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->PreSettlementPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1PreSettlementPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->PreSettlementPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1PreClosePrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->PreClosePrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1PreClosePrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->PreClosePrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1PreOpenInterest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcLargeVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcLargeVolumeType)jarg2; 
  if (arg1) (arg1)->PreOpenInterest = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1PreOpenInterest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcLargeVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcLargeVolumeType) ((arg1)->PreOpenInterest);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1OpenPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->OpenPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1OpenPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->OpenPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1HighestPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->HighestPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1HighestPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->HighestPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1LowestPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->LowestPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1LowestPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->LowestPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1Volume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->Volume = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1Volume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->Volume);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1Turnover_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Turnover = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1Turnover_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Turnover);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1OpenInterest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcLargeVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcLargeVolumeType)jarg2; 
  if (arg1) (arg1)->OpenInterest = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1OpenInterest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcLargeVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcLargeVolumeType) ((arg1)->OpenInterest);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1ClosePrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->ClosePrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1ClosePrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->ClosePrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1SettlementPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->SettlementPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1SettlementPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->SettlementPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1UpperLimitPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->UpperLimitPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1UpperLimitPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->UpperLimitPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1LowerLimitPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->LowerLimitPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1LowerLimitPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->LowerLimitPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1PreDelta_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->PreDelta = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1PreDelta_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->PreDelta);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1CurrDelta_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->CurrDelta = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1CurrDelta_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->CurrDelta);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1UpdateTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UpdateTime, (const char *)arg2, 9-1);
      arg1->UpdateTime[9-1] = 0;
    } else {
      arg1->UpdateTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1UpdateTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (char *) ((arg1)->UpdateTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1UpdateMillisec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcMillisecType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcMillisecType)jarg2; 
  if (arg1) (arg1)->UpdateMillisec = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1UpdateMillisec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcMillisecType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcMillisecType) ((arg1)->UpdateMillisec);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1BidPrice1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->BidPrice1 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1BidPrice1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->BidPrice1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1BidVolume1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->BidVolume1 = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1BidVolume1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->BidVolume1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1AskPrice1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->AskPrice1 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1AskPrice1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->AskPrice1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1AskVolume1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->AskVolume1 = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1AskVolume1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->AskVolume1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1BidPrice2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->BidPrice2 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1BidPrice2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->BidPrice2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1BidVolume2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->BidVolume2 = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1BidVolume2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->BidVolume2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1AskPrice2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->AskPrice2 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1AskPrice2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->AskPrice2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1AskVolume2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->AskVolume2 = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1AskVolume2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->AskVolume2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1BidPrice3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->BidPrice3 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1BidPrice3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->BidPrice3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1BidVolume3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->BidVolume3 = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1BidVolume3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->BidVolume3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1AskPrice3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->AskPrice3 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1AskPrice3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->AskPrice3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1AskVolume3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->AskVolume3 = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1AskVolume3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->AskVolume3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1BidPrice4_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->BidPrice4 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1BidPrice4_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->BidPrice4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1BidVolume4_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->BidVolume4 = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1BidVolume4_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->BidVolume4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1AskPrice4_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->AskPrice4 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1AskPrice4_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->AskPrice4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1AskVolume4_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->AskVolume4 = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1AskVolume4_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->AskVolume4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1BidPrice5_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->BidPrice5 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1BidPrice5_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->BidPrice5);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1BidVolume5_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->BidVolume5 = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1BidVolume5_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->BidVolume5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1AskPrice5_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->AskPrice5 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1AskPrice5_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->AskPrice5);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1AskVolume5_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->AskVolume5 = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1AskVolume5_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->AskVolume5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1AveragePrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->AveragePrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1AveragePrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->AveragePrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1ActionDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ActionDay, (const char *)arg2, 9-1);
      arg1->ActionDay[9-1] = 0;
    } else {
      arg1->ActionDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepthMarketDataField_1ActionDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  result = (char *) ((arg1)->ActionDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcDepthMarketDataField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcDepthMarketDataField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcDepthMarketDataField *)new CThostFtdcDepthMarketDataField();
  *(CThostFtdcDepthMarketDataField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcDepthMarketDataField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcDepthMarketDataField *arg1 = (CThostFtdcDepthMarketDataField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcDepthMarketDataField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentTradingRightField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInstrumentTradingRightField *arg1 = (CThostFtdcInstrumentTradingRightField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentTradingRightField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentTradingRightField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInstrumentTradingRightField *arg1 = (CThostFtdcInstrumentTradingRightField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentTradingRightField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentTradingRightField_1InvestorRange_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcInstrumentTradingRightField *arg1 = (CThostFtdcInstrumentTradingRightField *) 0 ;
  TThostFtdcInvestorRangeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentTradingRightField **)&jarg1; 
  arg2 = (TThostFtdcInvestorRangeType)jarg2; 
  if (arg1) (arg1)->InvestorRange = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentTradingRightField_1InvestorRange_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcInstrumentTradingRightField *arg1 = (CThostFtdcInstrumentTradingRightField *) 0 ;
  TThostFtdcInvestorRangeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentTradingRightField **)&jarg1; 
  result = (TThostFtdcInvestorRangeType) ((arg1)->InvestorRange);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentTradingRightField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInstrumentTradingRightField *arg1 = (CThostFtdcInstrumentTradingRightField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentTradingRightField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentTradingRightField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInstrumentTradingRightField *arg1 = (CThostFtdcInstrumentTradingRightField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentTradingRightField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentTradingRightField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInstrumentTradingRightField *arg1 = (CThostFtdcInstrumentTradingRightField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentTradingRightField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentTradingRightField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInstrumentTradingRightField *arg1 = (CThostFtdcInstrumentTradingRightField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentTradingRightField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentTradingRightField_1TradingRight_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcInstrumentTradingRightField *arg1 = (CThostFtdcInstrumentTradingRightField *) 0 ;
  TThostFtdcTradingRightType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentTradingRightField **)&jarg1; 
  arg2 = (TThostFtdcTradingRightType)jarg2; 
  if (arg1) (arg1)->TradingRight = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentTradingRightField_1TradingRight_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcInstrumentTradingRightField *arg1 = (CThostFtdcInstrumentTradingRightField *) 0 ;
  TThostFtdcTradingRightType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentTradingRightField **)&jarg1; 
  result = (TThostFtdcTradingRightType) ((arg1)->TradingRight);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcInstrumentTradingRightField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcInstrumentTradingRightField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcInstrumentTradingRightField *)new CThostFtdcInstrumentTradingRightField();
  *(CThostFtdcInstrumentTradingRightField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcInstrumentTradingRightField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcInstrumentTradingRightField *arg1 = (CThostFtdcInstrumentTradingRightField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcInstrumentTradingRightField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerUserField *arg1 = (CThostFtdcBrokerUserField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerUserField *arg1 = (CThostFtdcBrokerUserField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerUserField *arg1 = (CThostFtdcBrokerUserField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerUserField *arg1 = (CThostFtdcBrokerUserField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserField_1UserName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerUserField *arg1 = (CThostFtdcBrokerUserField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserName, (const char *)arg2, 81-1);
      arg1->UserName[81-1] = 0;
    } else {
      arg1->UserName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserField_1UserName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerUserField *arg1 = (CThostFtdcBrokerUserField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserField **)&jarg1; 
  result = (char *) ((arg1)->UserName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserField_1UserType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcBrokerUserField *arg1 = (CThostFtdcBrokerUserField *) 0 ;
  TThostFtdcUserTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserField **)&jarg1; 
  arg2 = (TThostFtdcUserTypeType)jarg2; 
  if (arg1) (arg1)->UserType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserField_1UserType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcBrokerUserField *arg1 = (CThostFtdcBrokerUserField *) 0 ;
  TThostFtdcUserTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserField **)&jarg1; 
  result = (TThostFtdcUserTypeType) ((arg1)->UserType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserField_1IsActive_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcBrokerUserField *arg1 = (CThostFtdcBrokerUserField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->IsActive = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserField_1IsActive_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcBrokerUserField *arg1 = (CThostFtdcBrokerUserField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->IsActive);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserField_1IsUsingOTP_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcBrokerUserField *arg1 = (CThostFtdcBrokerUserField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->IsUsingOTP = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserField_1IsUsingOTP_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcBrokerUserField *arg1 = (CThostFtdcBrokerUserField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->IsUsingOTP);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcBrokerUserField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcBrokerUserField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcBrokerUserField *)new CThostFtdcBrokerUserField();
  *(CThostFtdcBrokerUserField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcBrokerUserField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcBrokerUserField *arg1 = (CThostFtdcBrokerUserField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcBrokerUserField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserPasswordField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerUserPasswordField *arg1 = (CThostFtdcBrokerUserPasswordField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserPasswordField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserPasswordField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerUserPasswordField *arg1 = (CThostFtdcBrokerUserPasswordField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserPasswordField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserPasswordField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerUserPasswordField *arg1 = (CThostFtdcBrokerUserPasswordField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserPasswordField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserPasswordField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerUserPasswordField *arg1 = (CThostFtdcBrokerUserPasswordField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserPasswordField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserPasswordField_1Password_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerUserPasswordField *arg1 = (CThostFtdcBrokerUserPasswordField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserPasswordField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Password, (const char *)arg2, 41-1);
      arg1->Password[41-1] = 0;
    } else {
      arg1->Password[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserPasswordField_1Password_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerUserPasswordField *arg1 = (CThostFtdcBrokerUserPasswordField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserPasswordField **)&jarg1; 
  result = (char *) ((arg1)->Password);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcBrokerUserPasswordField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcBrokerUserPasswordField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcBrokerUserPasswordField *)new CThostFtdcBrokerUserPasswordField();
  *(CThostFtdcBrokerUserPasswordField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcBrokerUserPasswordField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcBrokerUserPasswordField *arg1 = (CThostFtdcBrokerUserPasswordField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcBrokerUserPasswordField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserFunctionField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerUserFunctionField *arg1 = (CThostFtdcBrokerUserFunctionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserFunctionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserFunctionField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerUserFunctionField *arg1 = (CThostFtdcBrokerUserFunctionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserFunctionField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserFunctionField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerUserFunctionField *arg1 = (CThostFtdcBrokerUserFunctionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserFunctionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserFunctionField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerUserFunctionField *arg1 = (CThostFtdcBrokerUserFunctionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserFunctionField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserFunctionField_1BrokerFunctionCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcBrokerUserFunctionField *arg1 = (CThostFtdcBrokerUserFunctionField *) 0 ;
  TThostFtdcBrokerFunctionCodeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserFunctionField **)&jarg1; 
  arg2 = (TThostFtdcBrokerFunctionCodeType)jarg2; 
  if (arg1) (arg1)->BrokerFunctionCode = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserFunctionField_1BrokerFunctionCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcBrokerUserFunctionField *arg1 = (CThostFtdcBrokerUserFunctionField *) 0 ;
  TThostFtdcBrokerFunctionCodeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserFunctionField **)&jarg1; 
  result = (TThostFtdcBrokerFunctionCodeType) ((arg1)->BrokerFunctionCode);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcBrokerUserFunctionField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcBrokerUserFunctionField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcBrokerUserFunctionField *)new CThostFtdcBrokerUserFunctionField();
  *(CThostFtdcBrokerUserFunctionField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcBrokerUserFunctionField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcBrokerUserFunctionField *arg1 = (CThostFtdcBrokerUserFunctionField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcBrokerUserFunctionField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1TraderID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TraderID, (const char *)arg2, 21-1);
      arg1->TraderID[21-1] = 0;
    } else {
      arg1->TraderID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1TraderID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->TraderID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1ParticipantID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ParticipantID, (const char *)arg2, 11-1);
      arg1->ParticipantID[11-1] = 0;
    } else {
      arg1->ParticipantID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1ParticipantID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->ParticipantID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1Password_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Password, (const char *)arg2, 41-1);
      arg1->Password[41-1] = 0;
    } else {
      arg1->Password[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1Password_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->Password);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1InstallID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  TThostFtdcInstallIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  arg2 = (TThostFtdcInstallIDType)jarg2; 
  if (arg1) (arg1)->InstallID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1InstallID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  TThostFtdcInstallIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  result = (TThostFtdcInstallIDType) ((arg1)->InstallID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1OrderLocalID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderLocalID, (const char *)arg2, 13-1);
      arg1->OrderLocalID[13-1] = 0;
    } else {
      arg1->OrderLocalID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1OrderLocalID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->OrderLocalID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1TraderConnectStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  TThostFtdcTraderConnectStatusType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  arg2 = (TThostFtdcTraderConnectStatusType)jarg2; 
  if (arg1) (arg1)->TraderConnectStatus = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1TraderConnectStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  TThostFtdcTraderConnectStatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  result = (TThostFtdcTraderConnectStatusType) ((arg1)->TraderConnectStatus);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1ConnectRequestDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ConnectRequestDate, (const char *)arg2, 9-1);
      arg1->ConnectRequestDate[9-1] = 0;
    } else {
      arg1->ConnectRequestDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1ConnectRequestDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->ConnectRequestDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1ConnectRequestTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ConnectRequestTime, (const char *)arg2, 9-1);
      arg1->ConnectRequestTime[9-1] = 0;
    } else {
      arg1->ConnectRequestTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1ConnectRequestTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->ConnectRequestTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1LastReportDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->LastReportDate, (const char *)arg2, 9-1);
      arg1->LastReportDate[9-1] = 0;
    } else {
      arg1->LastReportDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1LastReportDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->LastReportDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1LastReportTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->LastReportTime, (const char *)arg2, 9-1);
      arg1->LastReportTime[9-1] = 0;
    } else {
      arg1->LastReportTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1LastReportTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->LastReportTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1ConnectDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ConnectDate, (const char *)arg2, 9-1);
      arg1->ConnectDate[9-1] = 0;
    } else {
      arg1->ConnectDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1ConnectDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->ConnectDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1ConnectTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ConnectTime, (const char *)arg2, 9-1);
      arg1->ConnectTime[9-1] = 0;
    } else {
      arg1->ConnectTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1ConnectTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->ConnectTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1StartDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->StartDate, (const char *)arg2, 9-1);
      arg1->StartDate[9-1] = 0;
    } else {
      arg1->StartDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1StartDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->StartDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1StartTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->StartTime, (const char *)arg2, 9-1);
      arg1->StartTime[9-1] = 0;
    } else {
      arg1->StartTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1StartTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->StartTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1MaxTradeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->MaxTradeID, (const char *)arg2, 21-1);
      arg1->MaxTradeID[21-1] = 0;
    } else {
      arg1->MaxTradeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1MaxTradeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->MaxTradeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1MaxOrderMessageReference_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->MaxOrderMessageReference, (const char *)arg2, 7-1);
      arg1->MaxOrderMessageReference[7-1] = 0;
    } else {
      arg1->MaxOrderMessageReference[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderOfferField_1MaxOrderMessageReference_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->MaxOrderMessageReference);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcTraderOfferField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcTraderOfferField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcTraderOfferField *)new CThostFtdcTraderOfferField();
  *(CThostFtdcTraderOfferField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcTraderOfferField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcTraderOfferField *arg1 = (CThostFtdcTraderOfferField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcTraderOfferField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSettlementInfoField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSettlementInfoField *arg1 = (CThostFtdcSettlementInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSettlementInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSettlementInfoField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSettlementInfoField *arg1 = (CThostFtdcSettlementInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSettlementInfoField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSettlementInfoField_1SettlementID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcSettlementInfoField *arg1 = (CThostFtdcSettlementInfoField *) 0 ;
  TThostFtdcSettlementIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSettlementInfoField **)&jarg1; 
  arg2 = (TThostFtdcSettlementIDType)jarg2; 
  if (arg1) (arg1)->SettlementID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcSettlementInfoField_1SettlementID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcSettlementInfoField *arg1 = (CThostFtdcSettlementInfoField *) 0 ;
  TThostFtdcSettlementIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSettlementInfoField **)&jarg1; 
  result = (TThostFtdcSettlementIDType) ((arg1)->SettlementID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSettlementInfoField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSettlementInfoField *arg1 = (CThostFtdcSettlementInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSettlementInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSettlementInfoField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSettlementInfoField *arg1 = (CThostFtdcSettlementInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSettlementInfoField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSettlementInfoField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSettlementInfoField *arg1 = (CThostFtdcSettlementInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSettlementInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSettlementInfoField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSettlementInfoField *arg1 = (CThostFtdcSettlementInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSettlementInfoField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSettlementInfoField_1SequenceNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcSettlementInfoField *arg1 = (CThostFtdcSettlementInfoField *) 0 ;
  TThostFtdcSequenceNoType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSettlementInfoField **)&jarg1; 
  arg2 = (TThostFtdcSequenceNoType)jarg2; 
  if (arg1) (arg1)->SequenceNo = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcSettlementInfoField_1SequenceNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcSettlementInfoField *arg1 = (CThostFtdcSettlementInfoField *) 0 ;
  TThostFtdcSequenceNoType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSettlementInfoField **)&jarg1; 
  result = (TThostFtdcSequenceNoType) ((arg1)->SequenceNo);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSettlementInfoField_1Content_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSettlementInfoField *arg1 = (CThostFtdcSettlementInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSettlementInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Content, (const char *)arg2, 501-1);
      arg1->Content[501-1] = 0;
    } else {
      arg1->Content[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSettlementInfoField_1Content_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSettlementInfoField *arg1 = (CThostFtdcSettlementInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSettlementInfoField **)&jarg1; 
  result = (char *) ((arg1)->Content);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcSettlementInfoField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcSettlementInfoField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcSettlementInfoField *)new CThostFtdcSettlementInfoField();
  *(CThostFtdcSettlementInfoField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcSettlementInfoField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcSettlementInfoField *arg1 = (CThostFtdcSettlementInfoField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcSettlementInfoField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateAdjustField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInstrumentMarginRateAdjustField *arg1 = (CThostFtdcInstrumentMarginRateAdjustField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateAdjustField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateAdjustField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInstrumentMarginRateAdjustField *arg1 = (CThostFtdcInstrumentMarginRateAdjustField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateAdjustField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateAdjustField_1InvestorRange_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcInstrumentMarginRateAdjustField *arg1 = (CThostFtdcInstrumentMarginRateAdjustField *) 0 ;
  TThostFtdcInvestorRangeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateAdjustField **)&jarg1; 
  arg2 = (TThostFtdcInvestorRangeType)jarg2; 
  if (arg1) (arg1)->InvestorRange = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateAdjustField_1InvestorRange_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcInstrumentMarginRateAdjustField *arg1 = (CThostFtdcInstrumentMarginRateAdjustField *) 0 ;
  TThostFtdcInvestorRangeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateAdjustField **)&jarg1; 
  result = (TThostFtdcInvestorRangeType) ((arg1)->InvestorRange);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateAdjustField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInstrumentMarginRateAdjustField *arg1 = (CThostFtdcInstrumentMarginRateAdjustField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateAdjustField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateAdjustField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInstrumentMarginRateAdjustField *arg1 = (CThostFtdcInstrumentMarginRateAdjustField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateAdjustField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateAdjustField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInstrumentMarginRateAdjustField *arg1 = (CThostFtdcInstrumentMarginRateAdjustField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateAdjustField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateAdjustField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInstrumentMarginRateAdjustField *arg1 = (CThostFtdcInstrumentMarginRateAdjustField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateAdjustField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateAdjustField_1HedgeFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcInstrumentMarginRateAdjustField *arg1 = (CThostFtdcInstrumentMarginRateAdjustField *) 0 ;
  TThostFtdcHedgeFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateAdjustField **)&jarg1; 
  arg2 = (TThostFtdcHedgeFlagType)jarg2; 
  if (arg1) (arg1)->HedgeFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateAdjustField_1HedgeFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcInstrumentMarginRateAdjustField *arg1 = (CThostFtdcInstrumentMarginRateAdjustField *) 0 ;
  TThostFtdcHedgeFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateAdjustField **)&jarg1; 
  result = (TThostFtdcHedgeFlagType) ((arg1)->HedgeFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateAdjustField_1LongMarginRatioByMoney_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInstrumentMarginRateAdjustField *arg1 = (CThostFtdcInstrumentMarginRateAdjustField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateAdjustField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->LongMarginRatioByMoney = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateAdjustField_1LongMarginRatioByMoney_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInstrumentMarginRateAdjustField *arg1 = (CThostFtdcInstrumentMarginRateAdjustField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateAdjustField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->LongMarginRatioByMoney);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateAdjustField_1LongMarginRatioByVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInstrumentMarginRateAdjustField *arg1 = (CThostFtdcInstrumentMarginRateAdjustField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateAdjustField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->LongMarginRatioByVolume = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateAdjustField_1LongMarginRatioByVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInstrumentMarginRateAdjustField *arg1 = (CThostFtdcInstrumentMarginRateAdjustField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateAdjustField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->LongMarginRatioByVolume);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateAdjustField_1ShortMarginRatioByMoney_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInstrumentMarginRateAdjustField *arg1 = (CThostFtdcInstrumentMarginRateAdjustField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateAdjustField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->ShortMarginRatioByMoney = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateAdjustField_1ShortMarginRatioByMoney_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInstrumentMarginRateAdjustField *arg1 = (CThostFtdcInstrumentMarginRateAdjustField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateAdjustField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->ShortMarginRatioByMoney);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateAdjustField_1ShortMarginRatioByVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInstrumentMarginRateAdjustField *arg1 = (CThostFtdcInstrumentMarginRateAdjustField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateAdjustField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->ShortMarginRatioByVolume = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateAdjustField_1ShortMarginRatioByVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInstrumentMarginRateAdjustField *arg1 = (CThostFtdcInstrumentMarginRateAdjustField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateAdjustField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->ShortMarginRatioByVolume);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateAdjustField_1IsRelative_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInstrumentMarginRateAdjustField *arg1 = (CThostFtdcInstrumentMarginRateAdjustField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateAdjustField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->IsRelative = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentMarginRateAdjustField_1IsRelative_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInstrumentMarginRateAdjustField *arg1 = (CThostFtdcInstrumentMarginRateAdjustField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentMarginRateAdjustField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->IsRelative);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcInstrumentMarginRateAdjustField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcInstrumentMarginRateAdjustField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcInstrumentMarginRateAdjustField *)new CThostFtdcInstrumentMarginRateAdjustField();
  *(CThostFtdcInstrumentMarginRateAdjustField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcInstrumentMarginRateAdjustField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcInstrumentMarginRateAdjustField *arg1 = (CThostFtdcInstrumentMarginRateAdjustField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcInstrumentMarginRateAdjustField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeMarginRateField *arg1 = (CThostFtdcExchangeMarginRateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeMarginRateField *arg1 = (CThostFtdcExchangeMarginRateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeMarginRateField *arg1 = (CThostFtdcExchangeMarginRateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeMarginRateField *arg1 = (CThostFtdcExchangeMarginRateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateField_1HedgeFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcExchangeMarginRateField *arg1 = (CThostFtdcExchangeMarginRateField *) 0 ;
  TThostFtdcHedgeFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateField **)&jarg1; 
  arg2 = (TThostFtdcHedgeFlagType)jarg2; 
  if (arg1) (arg1)->HedgeFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateField_1HedgeFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcExchangeMarginRateField *arg1 = (CThostFtdcExchangeMarginRateField *) 0 ;
  TThostFtdcHedgeFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateField **)&jarg1; 
  result = (TThostFtdcHedgeFlagType) ((arg1)->HedgeFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateField_1LongMarginRatioByMoney_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcExchangeMarginRateField *arg1 = (CThostFtdcExchangeMarginRateField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->LongMarginRatioByMoney = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateField_1LongMarginRatioByMoney_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcExchangeMarginRateField *arg1 = (CThostFtdcExchangeMarginRateField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->LongMarginRatioByMoney);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateField_1LongMarginRatioByVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcExchangeMarginRateField *arg1 = (CThostFtdcExchangeMarginRateField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->LongMarginRatioByVolume = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateField_1LongMarginRatioByVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcExchangeMarginRateField *arg1 = (CThostFtdcExchangeMarginRateField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->LongMarginRatioByVolume);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateField_1ShortMarginRatioByMoney_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcExchangeMarginRateField *arg1 = (CThostFtdcExchangeMarginRateField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->ShortMarginRatioByMoney = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateField_1ShortMarginRatioByMoney_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcExchangeMarginRateField *arg1 = (CThostFtdcExchangeMarginRateField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->ShortMarginRatioByMoney);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateField_1ShortMarginRatioByVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcExchangeMarginRateField *arg1 = (CThostFtdcExchangeMarginRateField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->ShortMarginRatioByVolume = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateField_1ShortMarginRatioByVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcExchangeMarginRateField *arg1 = (CThostFtdcExchangeMarginRateField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->ShortMarginRatioByVolume);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcExchangeMarginRateField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcExchangeMarginRateField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcExchangeMarginRateField *)new CThostFtdcExchangeMarginRateField();
  *(CThostFtdcExchangeMarginRateField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcExchangeMarginRateField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcExchangeMarginRateField *arg1 = (CThostFtdcExchangeMarginRateField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcExchangeMarginRateField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateAdjustField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeMarginRateAdjustField *arg1 = (CThostFtdcExchangeMarginRateAdjustField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateAdjustField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateAdjustField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeMarginRateAdjustField *arg1 = (CThostFtdcExchangeMarginRateAdjustField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateAdjustField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateAdjustField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeMarginRateAdjustField *arg1 = (CThostFtdcExchangeMarginRateAdjustField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateAdjustField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateAdjustField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeMarginRateAdjustField *arg1 = (CThostFtdcExchangeMarginRateAdjustField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateAdjustField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateAdjustField_1HedgeFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcExchangeMarginRateAdjustField *arg1 = (CThostFtdcExchangeMarginRateAdjustField *) 0 ;
  TThostFtdcHedgeFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateAdjustField **)&jarg1; 
  arg2 = (TThostFtdcHedgeFlagType)jarg2; 
  if (arg1) (arg1)->HedgeFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateAdjustField_1HedgeFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcExchangeMarginRateAdjustField *arg1 = (CThostFtdcExchangeMarginRateAdjustField *) 0 ;
  TThostFtdcHedgeFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateAdjustField **)&jarg1; 
  result = (TThostFtdcHedgeFlagType) ((arg1)->HedgeFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateAdjustField_1LongMarginRatioByMoney_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcExchangeMarginRateAdjustField *arg1 = (CThostFtdcExchangeMarginRateAdjustField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateAdjustField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->LongMarginRatioByMoney = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateAdjustField_1LongMarginRatioByMoney_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcExchangeMarginRateAdjustField *arg1 = (CThostFtdcExchangeMarginRateAdjustField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateAdjustField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->LongMarginRatioByMoney);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateAdjustField_1LongMarginRatioByVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcExchangeMarginRateAdjustField *arg1 = (CThostFtdcExchangeMarginRateAdjustField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateAdjustField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->LongMarginRatioByVolume = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateAdjustField_1LongMarginRatioByVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcExchangeMarginRateAdjustField *arg1 = (CThostFtdcExchangeMarginRateAdjustField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateAdjustField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->LongMarginRatioByVolume);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateAdjustField_1ShortMarginRatioByMoney_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcExchangeMarginRateAdjustField *arg1 = (CThostFtdcExchangeMarginRateAdjustField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateAdjustField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->ShortMarginRatioByMoney = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateAdjustField_1ShortMarginRatioByMoney_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcExchangeMarginRateAdjustField *arg1 = (CThostFtdcExchangeMarginRateAdjustField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateAdjustField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->ShortMarginRatioByMoney);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateAdjustField_1ShortMarginRatioByVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcExchangeMarginRateAdjustField *arg1 = (CThostFtdcExchangeMarginRateAdjustField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateAdjustField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->ShortMarginRatioByVolume = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateAdjustField_1ShortMarginRatioByVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcExchangeMarginRateAdjustField *arg1 = (CThostFtdcExchangeMarginRateAdjustField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateAdjustField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->ShortMarginRatioByVolume);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateAdjustField_1ExchLongMarginRatioByMoney_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcExchangeMarginRateAdjustField *arg1 = (CThostFtdcExchangeMarginRateAdjustField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateAdjustField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->ExchLongMarginRatioByMoney = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateAdjustField_1ExchLongMarginRatioByMoney_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcExchangeMarginRateAdjustField *arg1 = (CThostFtdcExchangeMarginRateAdjustField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateAdjustField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->ExchLongMarginRatioByMoney);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateAdjustField_1ExchLongMarginRatioByVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcExchangeMarginRateAdjustField *arg1 = (CThostFtdcExchangeMarginRateAdjustField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateAdjustField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->ExchLongMarginRatioByVolume = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateAdjustField_1ExchLongMarginRatioByVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcExchangeMarginRateAdjustField *arg1 = (CThostFtdcExchangeMarginRateAdjustField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateAdjustField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->ExchLongMarginRatioByVolume);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateAdjustField_1ExchShortMarginRatioByMoney_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcExchangeMarginRateAdjustField *arg1 = (CThostFtdcExchangeMarginRateAdjustField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateAdjustField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->ExchShortMarginRatioByMoney = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateAdjustField_1ExchShortMarginRatioByMoney_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcExchangeMarginRateAdjustField *arg1 = (CThostFtdcExchangeMarginRateAdjustField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateAdjustField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->ExchShortMarginRatioByMoney);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateAdjustField_1ExchShortMarginRatioByVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcExchangeMarginRateAdjustField *arg1 = (CThostFtdcExchangeMarginRateAdjustField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateAdjustField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->ExchShortMarginRatioByVolume = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateAdjustField_1ExchShortMarginRatioByVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcExchangeMarginRateAdjustField *arg1 = (CThostFtdcExchangeMarginRateAdjustField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateAdjustField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->ExchShortMarginRatioByVolume);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateAdjustField_1NoLongMarginRatioByMoney_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcExchangeMarginRateAdjustField *arg1 = (CThostFtdcExchangeMarginRateAdjustField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateAdjustField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->NoLongMarginRatioByMoney = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateAdjustField_1NoLongMarginRatioByMoney_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcExchangeMarginRateAdjustField *arg1 = (CThostFtdcExchangeMarginRateAdjustField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateAdjustField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->NoLongMarginRatioByMoney);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateAdjustField_1NoLongMarginRatioByVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcExchangeMarginRateAdjustField *arg1 = (CThostFtdcExchangeMarginRateAdjustField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateAdjustField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->NoLongMarginRatioByVolume = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateAdjustField_1NoLongMarginRatioByVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcExchangeMarginRateAdjustField *arg1 = (CThostFtdcExchangeMarginRateAdjustField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateAdjustField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->NoLongMarginRatioByVolume);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateAdjustField_1NoShortMarginRatioByMoney_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcExchangeMarginRateAdjustField *arg1 = (CThostFtdcExchangeMarginRateAdjustField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateAdjustField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->NoShortMarginRatioByMoney = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateAdjustField_1NoShortMarginRatioByMoney_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcExchangeMarginRateAdjustField *arg1 = (CThostFtdcExchangeMarginRateAdjustField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateAdjustField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->NoShortMarginRatioByMoney);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateAdjustField_1NoShortMarginRatioByVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcExchangeMarginRateAdjustField *arg1 = (CThostFtdcExchangeMarginRateAdjustField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateAdjustField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->NoShortMarginRatioByVolume = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeMarginRateAdjustField_1NoShortMarginRatioByVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcExchangeMarginRateAdjustField *arg1 = (CThostFtdcExchangeMarginRateAdjustField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeMarginRateAdjustField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->NoShortMarginRatioByVolume);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcExchangeMarginRateAdjustField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcExchangeMarginRateAdjustField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcExchangeMarginRateAdjustField *)new CThostFtdcExchangeMarginRateAdjustField();
  *(CThostFtdcExchangeMarginRateAdjustField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcExchangeMarginRateAdjustField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcExchangeMarginRateAdjustField *arg1 = (CThostFtdcExchangeMarginRateAdjustField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcExchangeMarginRateAdjustField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSettlementRefField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSettlementRefField *arg1 = (CThostFtdcSettlementRefField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSettlementRefField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSettlementRefField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSettlementRefField *arg1 = (CThostFtdcSettlementRefField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSettlementRefField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSettlementRefField_1SettlementID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcSettlementRefField *arg1 = (CThostFtdcSettlementRefField *) 0 ;
  TThostFtdcSettlementIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSettlementRefField **)&jarg1; 
  arg2 = (TThostFtdcSettlementIDType)jarg2; 
  if (arg1) (arg1)->SettlementID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcSettlementRefField_1SettlementID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcSettlementRefField *arg1 = (CThostFtdcSettlementRefField *) 0 ;
  TThostFtdcSettlementIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSettlementRefField **)&jarg1; 
  result = (TThostFtdcSettlementIDType) ((arg1)->SettlementID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcSettlementRefField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcSettlementRefField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcSettlementRefField *)new CThostFtdcSettlementRefField();
  *(CThostFtdcSettlementRefField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcSettlementRefField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcSettlementRefField *arg1 = (CThostFtdcSettlementRefField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcSettlementRefField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCurrentTimeField_1CurrDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCurrentTimeField *arg1 = (CThostFtdcCurrentTimeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCurrentTimeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrDate, (const char *)arg2, 9-1);
      arg1->CurrDate[9-1] = 0;
    } else {
      arg1->CurrDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCurrentTimeField_1CurrDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCurrentTimeField *arg1 = (CThostFtdcCurrentTimeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCurrentTimeField **)&jarg1; 
  result = (char *) ((arg1)->CurrDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCurrentTimeField_1CurrTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCurrentTimeField *arg1 = (CThostFtdcCurrentTimeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCurrentTimeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrTime, (const char *)arg2, 9-1);
      arg1->CurrTime[9-1] = 0;
    } else {
      arg1->CurrTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCurrentTimeField_1CurrTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCurrentTimeField *arg1 = (CThostFtdcCurrentTimeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCurrentTimeField **)&jarg1; 
  result = (char *) ((arg1)->CurrTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCurrentTimeField_1CurrMillisec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcCurrentTimeField *arg1 = (CThostFtdcCurrentTimeField *) 0 ;
  TThostFtdcMillisecType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCurrentTimeField **)&jarg1; 
  arg2 = (TThostFtdcMillisecType)jarg2; 
  if (arg1) (arg1)->CurrMillisec = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcCurrentTimeField_1CurrMillisec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcCurrentTimeField *arg1 = (CThostFtdcCurrentTimeField *) 0 ;
  TThostFtdcMillisecType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCurrentTimeField **)&jarg1; 
  result = (TThostFtdcMillisecType) ((arg1)->CurrMillisec);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCurrentTimeField_1ActionDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCurrentTimeField *arg1 = (CThostFtdcCurrentTimeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCurrentTimeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ActionDay, (const char *)arg2, 9-1);
      arg1->ActionDay[9-1] = 0;
    } else {
      arg1->ActionDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCurrentTimeField_1ActionDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCurrentTimeField *arg1 = (CThostFtdcCurrentTimeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCurrentTimeField **)&jarg1; 
  result = (char *) ((arg1)->ActionDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcCurrentTimeField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcCurrentTimeField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcCurrentTimeField *)new CThostFtdcCurrentTimeField();
  *(CThostFtdcCurrentTimeField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcCurrentTimeField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcCurrentTimeField *arg1 = (CThostFtdcCurrentTimeField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcCurrentTimeField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCommPhaseField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCommPhaseField *arg1 = (CThostFtdcCommPhaseField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCommPhaseField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCommPhaseField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCommPhaseField *arg1 = (CThostFtdcCommPhaseField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCommPhaseField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCommPhaseField_1CommPhaseNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  CThostFtdcCommPhaseField *arg1 = (CThostFtdcCommPhaseField *) 0 ;
  TThostFtdcCommPhaseNoType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCommPhaseField **)&jarg1; 
  arg2 = (TThostFtdcCommPhaseNoType)jarg2; 
  if (arg1) (arg1)->CommPhaseNo = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_ctp_CtpJNI_CThostFtdcCommPhaseField_1CommPhaseNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  CThostFtdcCommPhaseField *arg1 = (CThostFtdcCommPhaseField *) 0 ;
  TThostFtdcCommPhaseNoType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCommPhaseField **)&jarg1; 
  result = (TThostFtdcCommPhaseNoType) ((arg1)->CommPhaseNo);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCommPhaseField_1SystemID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCommPhaseField *arg1 = (CThostFtdcCommPhaseField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCommPhaseField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->SystemID, (const char *)arg2, 21-1);
      arg1->SystemID[21-1] = 0;
    } else {
      arg1->SystemID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCommPhaseField_1SystemID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCommPhaseField *arg1 = (CThostFtdcCommPhaseField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCommPhaseField **)&jarg1; 
  result = (char *) ((arg1)->SystemID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcCommPhaseField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcCommPhaseField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcCommPhaseField *)new CThostFtdcCommPhaseField();
  *(CThostFtdcCommPhaseField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcCommPhaseField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcCommPhaseField *arg1 = (CThostFtdcCommPhaseField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcCommPhaseField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1FrontID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  TThostFtdcFrontIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  arg2 = (TThostFtdcFrontIDType)jarg2; 
  if (arg1) (arg1)->FrontID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1FrontID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  TThostFtdcFrontIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  result = (TThostFtdcFrontIDType) ((arg1)->FrontID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1LoginDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->LoginDate, (const char *)arg2, 9-1);
      arg1->LoginDate[9-1] = 0;
    } else {
      arg1->LoginDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1LoginDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  result = (char *) ((arg1)->LoginDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1LoginTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->LoginTime, (const char *)arg2, 9-1);
      arg1->LoginTime[9-1] = 0;
    } else {
      arg1->LoginTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1LoginTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  result = (char *) ((arg1)->LoginTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1IPAddress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->IPAddress, (const char *)arg2, 16-1);
      arg1->IPAddress[16-1] = 0;
    } else {
      arg1->IPAddress[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1IPAddress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  result = (char *) ((arg1)->IPAddress);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1UserProductInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserProductInfo, (const char *)arg2, 11-1);
      arg1->UserProductInfo[11-1] = 0;
    } else {
      arg1->UserProductInfo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1UserProductInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  result = (char *) ((arg1)->UserProductInfo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1InterfaceProductInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InterfaceProductInfo, (const char *)arg2, 11-1);
      arg1->InterfaceProductInfo[11-1] = 0;
    } else {
      arg1->InterfaceProductInfo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1InterfaceProductInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  result = (char *) ((arg1)->InterfaceProductInfo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1ProtocolInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ProtocolInfo, (const char *)arg2, 11-1);
      arg1->ProtocolInfo[11-1] = 0;
    } else {
      arg1->ProtocolInfo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1ProtocolInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  result = (char *) ((arg1)->ProtocolInfo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1SystemName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->SystemName, (const char *)arg2, 41-1);
      arg1->SystemName[41-1] = 0;
    } else {
      arg1->SystemName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1SystemName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  result = (char *) ((arg1)->SystemName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1Password_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Password, (const char *)arg2, 41-1);
      arg1->Password[41-1] = 0;
    } else {
      arg1->Password[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1Password_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  result = (char *) ((arg1)->Password);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1MaxOrderRef_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->MaxOrderRef, (const char *)arg2, 13-1);
      arg1->MaxOrderRef[13-1] = 0;
    } else {
      arg1->MaxOrderRef[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1MaxOrderRef_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  result = (char *) ((arg1)->MaxOrderRef);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1SHFETime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->SHFETime, (const char *)arg2, 9-1);
      arg1->SHFETime[9-1] = 0;
    } else {
      arg1->SHFETime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1SHFETime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  result = (char *) ((arg1)->SHFETime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1DCETime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->DCETime, (const char *)arg2, 9-1);
      arg1->DCETime[9-1] = 0;
    } else {
      arg1->DCETime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1DCETime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  result = (char *) ((arg1)->DCETime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1CZCETime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CZCETime, (const char *)arg2, 9-1);
      arg1->CZCETime[9-1] = 0;
    } else {
      arg1->CZCETime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1CZCETime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  result = (char *) ((arg1)->CZCETime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1FFEXTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->FFEXTime, (const char *)arg2, 9-1);
      arg1->FFEXTime[9-1] = 0;
    } else {
      arg1->FFEXTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1FFEXTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  result = (char *) ((arg1)->FFEXTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1MacAddress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->MacAddress, (const char *)arg2, 21-1);
      arg1->MacAddress[21-1] = 0;
    } else {
      arg1->MacAddress[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1MacAddress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  result = (char *) ((arg1)->MacAddress);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1OneTimePassword_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OneTimePassword, (const char *)arg2, 41-1);
      arg1->OneTimePassword[41-1] = 0;
    } else {
      arg1->OneTimePassword[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginInfoField_1OneTimePassword_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  result = (char *) ((arg1)->OneTimePassword);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcLoginInfoField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcLoginInfoField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcLoginInfoField *)new CThostFtdcLoginInfoField();
  *(CThostFtdcLoginInfoField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcLoginInfoField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcLoginInfoField *arg1 = (CThostFtdcLoginInfoField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcLoginInfoField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLogoutAllField_1FrontID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcLogoutAllField *arg1 = (CThostFtdcLogoutAllField *) 0 ;
  TThostFtdcFrontIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLogoutAllField **)&jarg1; 
  arg2 = (TThostFtdcFrontIDType)jarg2; 
  if (arg1) (arg1)->FrontID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcLogoutAllField_1FrontID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcLogoutAllField *arg1 = (CThostFtdcLogoutAllField *) 0 ;
  TThostFtdcFrontIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLogoutAllField **)&jarg1; 
  result = (TThostFtdcFrontIDType) ((arg1)->FrontID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLogoutAllField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcLogoutAllField *arg1 = (CThostFtdcLogoutAllField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLogoutAllField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcLogoutAllField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcLogoutAllField *arg1 = (CThostFtdcLogoutAllField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLogoutAllField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLogoutAllField_1SystemName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcLogoutAllField *arg1 = (CThostFtdcLogoutAllField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLogoutAllField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->SystemName, (const char *)arg2, 41-1);
      arg1->SystemName[41-1] = 0;
    } else {
      arg1->SystemName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcLogoutAllField_1SystemName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcLogoutAllField *arg1 = (CThostFtdcLogoutAllField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLogoutAllField **)&jarg1; 
  result = (char *) ((arg1)->SystemName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcLogoutAllField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcLogoutAllField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcLogoutAllField *)new CThostFtdcLogoutAllField();
  *(CThostFtdcLogoutAllField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcLogoutAllField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcLogoutAllField *arg1 = (CThostFtdcLogoutAllField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcLogoutAllField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcFrontStatusField_1FrontID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcFrontStatusField *arg1 = (CThostFtdcFrontStatusField *) 0 ;
  TThostFtdcFrontIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFrontStatusField **)&jarg1; 
  arg2 = (TThostFtdcFrontIDType)jarg2; 
  if (arg1) (arg1)->FrontID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcFrontStatusField_1FrontID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcFrontStatusField *arg1 = (CThostFtdcFrontStatusField *) 0 ;
  TThostFtdcFrontIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFrontStatusField **)&jarg1; 
  result = (TThostFtdcFrontIDType) ((arg1)->FrontID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcFrontStatusField_1LastReportDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcFrontStatusField *arg1 = (CThostFtdcFrontStatusField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFrontStatusField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->LastReportDate, (const char *)arg2, 9-1);
      arg1->LastReportDate[9-1] = 0;
    } else {
      arg1->LastReportDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcFrontStatusField_1LastReportDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcFrontStatusField *arg1 = (CThostFtdcFrontStatusField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFrontStatusField **)&jarg1; 
  result = (char *) ((arg1)->LastReportDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcFrontStatusField_1LastReportTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcFrontStatusField *arg1 = (CThostFtdcFrontStatusField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFrontStatusField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->LastReportTime, (const char *)arg2, 9-1);
      arg1->LastReportTime[9-1] = 0;
    } else {
      arg1->LastReportTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcFrontStatusField_1LastReportTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcFrontStatusField *arg1 = (CThostFtdcFrontStatusField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFrontStatusField **)&jarg1; 
  result = (char *) ((arg1)->LastReportTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcFrontStatusField_1IsActive_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcFrontStatusField *arg1 = (CThostFtdcFrontStatusField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFrontStatusField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->IsActive = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcFrontStatusField_1IsActive_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcFrontStatusField *arg1 = (CThostFtdcFrontStatusField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFrontStatusField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->IsActive);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcFrontStatusField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcFrontStatusField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcFrontStatusField *)new CThostFtdcFrontStatusField();
  *(CThostFtdcFrontStatusField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcFrontStatusField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcFrontStatusField *arg1 = (CThostFtdcFrontStatusField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcFrontStatusField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserPasswordUpdateField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcUserPasswordUpdateField *arg1 = (CThostFtdcUserPasswordUpdateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserPasswordUpdateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserPasswordUpdateField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcUserPasswordUpdateField *arg1 = (CThostFtdcUserPasswordUpdateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserPasswordUpdateField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserPasswordUpdateField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcUserPasswordUpdateField *arg1 = (CThostFtdcUserPasswordUpdateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserPasswordUpdateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserPasswordUpdateField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcUserPasswordUpdateField *arg1 = (CThostFtdcUserPasswordUpdateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserPasswordUpdateField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserPasswordUpdateField_1OldPassword_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcUserPasswordUpdateField *arg1 = (CThostFtdcUserPasswordUpdateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserPasswordUpdateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OldPassword, (const char *)arg2, 41-1);
      arg1->OldPassword[41-1] = 0;
    } else {
      arg1->OldPassword[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserPasswordUpdateField_1OldPassword_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcUserPasswordUpdateField *arg1 = (CThostFtdcUserPasswordUpdateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserPasswordUpdateField **)&jarg1; 
  result = (char *) ((arg1)->OldPassword);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserPasswordUpdateField_1NewPassword_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcUserPasswordUpdateField *arg1 = (CThostFtdcUserPasswordUpdateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserPasswordUpdateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->NewPassword, (const char *)arg2, 41-1);
      arg1->NewPassword[41-1] = 0;
    } else {
      arg1->NewPassword[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserPasswordUpdateField_1NewPassword_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcUserPasswordUpdateField *arg1 = (CThostFtdcUserPasswordUpdateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserPasswordUpdateField **)&jarg1; 
  result = (char *) ((arg1)->NewPassword);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcUserPasswordUpdateField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcUserPasswordUpdateField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcUserPasswordUpdateField *)new CThostFtdcUserPasswordUpdateField();
  *(CThostFtdcUserPasswordUpdateField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcUserPasswordUpdateField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcUserPasswordUpdateField *arg1 = (CThostFtdcUserPasswordUpdateField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcUserPasswordUpdateField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1OrderRef_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderRef, (const char *)arg2, 13-1);
      arg1->OrderRef[13-1] = 0;
    } else {
      arg1->OrderRef[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1OrderRef_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  result = (char *) ((arg1)->OrderRef);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1OrderPriceType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  TThostFtdcOrderPriceTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  arg2 = (TThostFtdcOrderPriceTypeType)jarg2; 
  if (arg1) (arg1)->OrderPriceType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1OrderPriceType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  TThostFtdcOrderPriceTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  result = (TThostFtdcOrderPriceTypeType) ((arg1)->OrderPriceType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1Direction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  TThostFtdcDirectionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  arg2 = (TThostFtdcDirectionType)jarg2; 
  if (arg1) (arg1)->Direction = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1Direction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  TThostFtdcDirectionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  result = (TThostFtdcDirectionType) ((arg1)->Direction);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1CombOffsetFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CombOffsetFlag, (const char *)arg2, 5-1);
      arg1->CombOffsetFlag[5-1] = 0;
    } else {
      arg1->CombOffsetFlag[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1CombOffsetFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  result = (char *) ((arg1)->CombOffsetFlag);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1CombHedgeFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CombHedgeFlag, (const char *)arg2, 5-1);
      arg1->CombHedgeFlag[5-1] = 0;
    } else {
      arg1->CombHedgeFlag[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1CombHedgeFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  result = (char *) ((arg1)->CombHedgeFlag);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1LimitPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->LimitPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1LimitPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->LimitPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1VolumeTotalOriginal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->VolumeTotalOriginal = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1VolumeTotalOriginal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->VolumeTotalOriginal);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1TimeCondition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  TThostFtdcTimeConditionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  arg2 = (TThostFtdcTimeConditionType)jarg2; 
  if (arg1) (arg1)->TimeCondition = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1TimeCondition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  TThostFtdcTimeConditionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  result = (TThostFtdcTimeConditionType) ((arg1)->TimeCondition);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1GTDDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->GTDDate, (const char *)arg2, 9-1);
      arg1->GTDDate[9-1] = 0;
    } else {
      arg1->GTDDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1GTDDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  result = (char *) ((arg1)->GTDDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1VolumeCondition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  TThostFtdcVolumeConditionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  arg2 = (TThostFtdcVolumeConditionType)jarg2; 
  if (arg1) (arg1)->VolumeCondition = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1VolumeCondition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  TThostFtdcVolumeConditionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  result = (TThostFtdcVolumeConditionType) ((arg1)->VolumeCondition);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1MinVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->MinVolume = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1MinVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->MinVolume);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1ContingentCondition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  TThostFtdcContingentConditionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  arg2 = (TThostFtdcContingentConditionType)jarg2; 
  if (arg1) (arg1)->ContingentCondition = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1ContingentCondition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  TThostFtdcContingentConditionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  result = (TThostFtdcContingentConditionType) ((arg1)->ContingentCondition);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1StopPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->StopPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1StopPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->StopPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1ForceCloseReason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  TThostFtdcForceCloseReasonType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  arg2 = (TThostFtdcForceCloseReasonType)jarg2; 
  if (arg1) (arg1)->ForceCloseReason = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1ForceCloseReason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  TThostFtdcForceCloseReasonType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  result = (TThostFtdcForceCloseReasonType) ((arg1)->ForceCloseReason);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1IsAutoSuspend_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->IsAutoSuspend = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1IsAutoSuspend_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->IsAutoSuspend);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1BusinessUnit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BusinessUnit, (const char *)arg2, 21-1);
      arg1->BusinessUnit[21-1] = 0;
    } else {
      arg1->BusinessUnit[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1BusinessUnit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  result = (char *) ((arg1)->BusinessUnit);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1RequestID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  TThostFtdcRequestIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  arg2 = (TThostFtdcRequestIDType)jarg2; 
  if (arg1) (arg1)->RequestID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1RequestID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  TThostFtdcRequestIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  result = (TThostFtdcRequestIDType) ((arg1)->RequestID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1UserForceClose_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->UserForceClose = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1UserForceClose_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->UserForceClose);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1IsSwapOrder_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->IsSwapOrder = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderField_1IsSwapOrder_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->IsSwapOrder);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcInputOrderField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcInputOrderField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcInputOrderField *)new CThostFtdcInputOrderField();
  *(CThostFtdcInputOrderField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcInputOrderField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcInputOrderField *arg1 = (CThostFtdcInputOrderField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcInputOrderField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1OrderRef_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderRef, (const char *)arg2, 13-1);
      arg1->OrderRef[13-1] = 0;
    } else {
      arg1->OrderRef[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1OrderRef_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (char *) ((arg1)->OrderRef);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1OrderPriceType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcOrderPriceTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = (TThostFtdcOrderPriceTypeType)jarg2; 
  if (arg1) (arg1)->OrderPriceType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1OrderPriceType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcOrderPriceTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (TThostFtdcOrderPriceTypeType) ((arg1)->OrderPriceType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1Direction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcDirectionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = (TThostFtdcDirectionType)jarg2; 
  if (arg1) (arg1)->Direction = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1Direction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcDirectionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (TThostFtdcDirectionType) ((arg1)->Direction);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1CombOffsetFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CombOffsetFlag, (const char *)arg2, 5-1);
      arg1->CombOffsetFlag[5-1] = 0;
    } else {
      arg1->CombOffsetFlag[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1CombOffsetFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (char *) ((arg1)->CombOffsetFlag);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1CombHedgeFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CombHedgeFlag, (const char *)arg2, 5-1);
      arg1->CombHedgeFlag[5-1] = 0;
    } else {
      arg1->CombHedgeFlag[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1CombHedgeFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (char *) ((arg1)->CombHedgeFlag);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1LimitPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->LimitPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1LimitPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->LimitPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1VolumeTotalOriginal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->VolumeTotalOriginal = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1VolumeTotalOriginal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->VolumeTotalOriginal);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1TimeCondition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcTimeConditionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = (TThostFtdcTimeConditionType)jarg2; 
  if (arg1) (arg1)->TimeCondition = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1TimeCondition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcTimeConditionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (TThostFtdcTimeConditionType) ((arg1)->TimeCondition);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1GTDDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->GTDDate, (const char *)arg2, 9-1);
      arg1->GTDDate[9-1] = 0;
    } else {
      arg1->GTDDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1GTDDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (char *) ((arg1)->GTDDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1VolumeCondition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcVolumeConditionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = (TThostFtdcVolumeConditionType)jarg2; 
  if (arg1) (arg1)->VolumeCondition = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1VolumeCondition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcVolumeConditionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (TThostFtdcVolumeConditionType) ((arg1)->VolumeCondition);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1MinVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->MinVolume = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1MinVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->MinVolume);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1ContingentCondition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcContingentConditionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = (TThostFtdcContingentConditionType)jarg2; 
  if (arg1) (arg1)->ContingentCondition = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1ContingentCondition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcContingentConditionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (TThostFtdcContingentConditionType) ((arg1)->ContingentCondition);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1StopPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->StopPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1StopPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->StopPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1ForceCloseReason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcForceCloseReasonType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = (TThostFtdcForceCloseReasonType)jarg2; 
  if (arg1) (arg1)->ForceCloseReason = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1ForceCloseReason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcForceCloseReasonType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (TThostFtdcForceCloseReasonType) ((arg1)->ForceCloseReason);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1IsAutoSuspend_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->IsAutoSuspend = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1IsAutoSuspend_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->IsAutoSuspend);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1BusinessUnit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BusinessUnit, (const char *)arg2, 21-1);
      arg1->BusinessUnit[21-1] = 0;
    } else {
      arg1->BusinessUnit[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1BusinessUnit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (char *) ((arg1)->BusinessUnit);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1RequestID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcRequestIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = (TThostFtdcRequestIDType)jarg2; 
  if (arg1) (arg1)->RequestID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1RequestID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcRequestIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (TThostFtdcRequestIDType) ((arg1)->RequestID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1OrderLocalID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderLocalID, (const char *)arg2, 13-1);
      arg1->OrderLocalID[13-1] = 0;
    } else {
      arg1->OrderLocalID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1OrderLocalID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (char *) ((arg1)->OrderLocalID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1ParticipantID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ParticipantID, (const char *)arg2, 11-1);
      arg1->ParticipantID[11-1] = 0;
    } else {
      arg1->ParticipantID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1ParticipantID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (char *) ((arg1)->ParticipantID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1ClientID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ClientID, (const char *)arg2, 11-1);
      arg1->ClientID[11-1] = 0;
    } else {
      arg1->ClientID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1ClientID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (char *) ((arg1)->ClientID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1ExchangeInstID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeInstID, (const char *)arg2, 31-1);
      arg1->ExchangeInstID[31-1] = 0;
    } else {
      arg1->ExchangeInstID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1ExchangeInstID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeInstID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1TraderID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TraderID, (const char *)arg2, 21-1);
      arg1->TraderID[21-1] = 0;
    } else {
      arg1->TraderID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1TraderID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (char *) ((arg1)->TraderID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1InstallID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcInstallIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = (TThostFtdcInstallIDType)jarg2; 
  if (arg1) (arg1)->InstallID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1InstallID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcInstallIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (TThostFtdcInstallIDType) ((arg1)->InstallID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1OrderSubmitStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcOrderSubmitStatusType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = (TThostFtdcOrderSubmitStatusType)jarg2; 
  if (arg1) (arg1)->OrderSubmitStatus = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1OrderSubmitStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcOrderSubmitStatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (TThostFtdcOrderSubmitStatusType) ((arg1)->OrderSubmitStatus);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1NotifySequence_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcSequenceNoType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = (TThostFtdcSequenceNoType)jarg2; 
  if (arg1) (arg1)->NotifySequence = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1NotifySequence_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcSequenceNoType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (TThostFtdcSequenceNoType) ((arg1)->NotifySequence);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1SettlementID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcSettlementIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = (TThostFtdcSettlementIDType)jarg2; 
  if (arg1) (arg1)->SettlementID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1SettlementID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcSettlementIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (TThostFtdcSettlementIDType) ((arg1)->SettlementID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1OrderSysID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderSysID, (const char *)arg2, 21-1);
      arg1->OrderSysID[21-1] = 0;
    } else {
      arg1->OrderSysID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1OrderSysID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (char *) ((arg1)->OrderSysID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1OrderSource_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcOrderSourceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = (TThostFtdcOrderSourceType)jarg2; 
  if (arg1) (arg1)->OrderSource = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1OrderSource_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcOrderSourceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (TThostFtdcOrderSourceType) ((arg1)->OrderSource);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1OrderStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcOrderStatusType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = (TThostFtdcOrderStatusType)jarg2; 
  if (arg1) (arg1)->OrderStatus = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1OrderStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcOrderStatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (TThostFtdcOrderStatusType) ((arg1)->OrderStatus);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1OrderType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcOrderTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = (TThostFtdcOrderTypeType)jarg2; 
  if (arg1) (arg1)->OrderType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1OrderType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcOrderTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (TThostFtdcOrderTypeType) ((arg1)->OrderType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1VolumeTraded_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->VolumeTraded = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1VolumeTraded_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->VolumeTraded);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1VolumeTotal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->VolumeTotal = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1VolumeTotal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->VolumeTotal);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1InsertDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InsertDate, (const char *)arg2, 9-1);
      arg1->InsertDate[9-1] = 0;
    } else {
      arg1->InsertDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1InsertDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (char *) ((arg1)->InsertDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1InsertTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InsertTime, (const char *)arg2, 9-1);
      arg1->InsertTime[9-1] = 0;
    } else {
      arg1->InsertTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1InsertTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (char *) ((arg1)->InsertTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1ActiveTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ActiveTime, (const char *)arg2, 9-1);
      arg1->ActiveTime[9-1] = 0;
    } else {
      arg1->ActiveTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1ActiveTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (char *) ((arg1)->ActiveTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1SuspendTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->SuspendTime, (const char *)arg2, 9-1);
      arg1->SuspendTime[9-1] = 0;
    } else {
      arg1->SuspendTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1SuspendTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (char *) ((arg1)->SuspendTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1UpdateTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UpdateTime, (const char *)arg2, 9-1);
      arg1->UpdateTime[9-1] = 0;
    } else {
      arg1->UpdateTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1UpdateTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (char *) ((arg1)->UpdateTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1CancelTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CancelTime, (const char *)arg2, 9-1);
      arg1->CancelTime[9-1] = 0;
    } else {
      arg1->CancelTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1CancelTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (char *) ((arg1)->CancelTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1ActiveTraderID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ActiveTraderID, (const char *)arg2, 21-1);
      arg1->ActiveTraderID[21-1] = 0;
    } else {
      arg1->ActiveTraderID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1ActiveTraderID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (char *) ((arg1)->ActiveTraderID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1ClearingPartID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ClearingPartID, (const char *)arg2, 11-1);
      arg1->ClearingPartID[11-1] = 0;
    } else {
      arg1->ClearingPartID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1ClearingPartID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (char *) ((arg1)->ClearingPartID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1SequenceNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcSequenceNoType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = (TThostFtdcSequenceNoType)jarg2; 
  if (arg1) (arg1)->SequenceNo = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1SequenceNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcSequenceNoType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (TThostFtdcSequenceNoType) ((arg1)->SequenceNo);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1FrontID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcFrontIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = (TThostFtdcFrontIDType)jarg2; 
  if (arg1) (arg1)->FrontID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1FrontID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcFrontIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (TThostFtdcFrontIDType) ((arg1)->FrontID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1UserProductInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserProductInfo, (const char *)arg2, 11-1);
      arg1->UserProductInfo[11-1] = 0;
    } else {
      arg1->UserProductInfo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1UserProductInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (char *) ((arg1)->UserProductInfo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1StatusMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->StatusMsg, (const char *)arg2, 81-1);
      arg1->StatusMsg[81-1] = 0;
    } else {
      arg1->StatusMsg[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1StatusMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (char *) ((arg1)->StatusMsg);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1UserForceClose_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->UserForceClose = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1UserForceClose_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->UserForceClose);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1ActiveUserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ActiveUserID, (const char *)arg2, 16-1);
      arg1->ActiveUserID[16-1] = 0;
    } else {
      arg1->ActiveUserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1ActiveUserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (char *) ((arg1)->ActiveUserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1BrokerOrderSeq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcSequenceNoType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = (TThostFtdcSequenceNoType)jarg2; 
  if (arg1) (arg1)->BrokerOrderSeq = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1BrokerOrderSeq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcSequenceNoType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (TThostFtdcSequenceNoType) ((arg1)->BrokerOrderSeq);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1RelativeOrderSysID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->RelativeOrderSysID, (const char *)arg2, 21-1);
      arg1->RelativeOrderSysID[21-1] = 0;
    } else {
      arg1->RelativeOrderSysID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1RelativeOrderSysID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (char *) ((arg1)->RelativeOrderSysID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1ZCETotalTradedVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->ZCETotalTradedVolume = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1ZCETotalTradedVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->ZCETotalTradedVolume);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1IsSwapOrder_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->IsSwapOrder = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderField_1IsSwapOrder_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->IsSwapOrder);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcOrderField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcOrderField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcOrderField *)new CThostFtdcOrderField();
  *(CThostFtdcOrderField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcOrderField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcOrderField *arg1 = (CThostFtdcOrderField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcOrderField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1OrderPriceType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcOrderPriceTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = (TThostFtdcOrderPriceTypeType)jarg2; 
  if (arg1) (arg1)->OrderPriceType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1OrderPriceType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcOrderPriceTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (TThostFtdcOrderPriceTypeType) ((arg1)->OrderPriceType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1Direction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcDirectionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = (TThostFtdcDirectionType)jarg2; 
  if (arg1) (arg1)->Direction = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1Direction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcDirectionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (TThostFtdcDirectionType) ((arg1)->Direction);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1CombOffsetFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CombOffsetFlag, (const char *)arg2, 5-1);
      arg1->CombOffsetFlag[5-1] = 0;
    } else {
      arg1->CombOffsetFlag[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1CombOffsetFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (char *) ((arg1)->CombOffsetFlag);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1CombHedgeFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CombHedgeFlag, (const char *)arg2, 5-1);
      arg1->CombHedgeFlag[5-1] = 0;
    } else {
      arg1->CombHedgeFlag[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1CombHedgeFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (char *) ((arg1)->CombHedgeFlag);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1LimitPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->LimitPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1LimitPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->LimitPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1VolumeTotalOriginal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->VolumeTotalOriginal = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1VolumeTotalOriginal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->VolumeTotalOriginal);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1TimeCondition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcTimeConditionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = (TThostFtdcTimeConditionType)jarg2; 
  if (arg1) (arg1)->TimeCondition = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1TimeCondition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcTimeConditionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (TThostFtdcTimeConditionType) ((arg1)->TimeCondition);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1GTDDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->GTDDate, (const char *)arg2, 9-1);
      arg1->GTDDate[9-1] = 0;
    } else {
      arg1->GTDDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1GTDDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (char *) ((arg1)->GTDDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1VolumeCondition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcVolumeConditionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = (TThostFtdcVolumeConditionType)jarg2; 
  if (arg1) (arg1)->VolumeCondition = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1VolumeCondition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcVolumeConditionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (TThostFtdcVolumeConditionType) ((arg1)->VolumeCondition);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1MinVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->MinVolume = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1MinVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->MinVolume);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1ContingentCondition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcContingentConditionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = (TThostFtdcContingentConditionType)jarg2; 
  if (arg1) (arg1)->ContingentCondition = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1ContingentCondition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcContingentConditionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (TThostFtdcContingentConditionType) ((arg1)->ContingentCondition);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1StopPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->StopPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1StopPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->StopPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1ForceCloseReason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcForceCloseReasonType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = (TThostFtdcForceCloseReasonType)jarg2; 
  if (arg1) (arg1)->ForceCloseReason = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1ForceCloseReason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcForceCloseReasonType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (TThostFtdcForceCloseReasonType) ((arg1)->ForceCloseReason);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1IsAutoSuspend_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->IsAutoSuspend = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1IsAutoSuspend_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->IsAutoSuspend);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1BusinessUnit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BusinessUnit, (const char *)arg2, 21-1);
      arg1->BusinessUnit[21-1] = 0;
    } else {
      arg1->BusinessUnit[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1BusinessUnit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (char *) ((arg1)->BusinessUnit);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1RequestID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcRequestIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = (TThostFtdcRequestIDType)jarg2; 
  if (arg1) (arg1)->RequestID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1RequestID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcRequestIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (TThostFtdcRequestIDType) ((arg1)->RequestID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1OrderLocalID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderLocalID, (const char *)arg2, 13-1);
      arg1->OrderLocalID[13-1] = 0;
    } else {
      arg1->OrderLocalID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1OrderLocalID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (char *) ((arg1)->OrderLocalID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1ParticipantID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ParticipantID, (const char *)arg2, 11-1);
      arg1->ParticipantID[11-1] = 0;
    } else {
      arg1->ParticipantID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1ParticipantID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (char *) ((arg1)->ParticipantID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1ClientID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ClientID, (const char *)arg2, 11-1);
      arg1->ClientID[11-1] = 0;
    } else {
      arg1->ClientID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1ClientID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (char *) ((arg1)->ClientID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1ExchangeInstID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeInstID, (const char *)arg2, 31-1);
      arg1->ExchangeInstID[31-1] = 0;
    } else {
      arg1->ExchangeInstID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1ExchangeInstID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeInstID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1TraderID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TraderID, (const char *)arg2, 21-1);
      arg1->TraderID[21-1] = 0;
    } else {
      arg1->TraderID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1TraderID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (char *) ((arg1)->TraderID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1InstallID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcInstallIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = (TThostFtdcInstallIDType)jarg2; 
  if (arg1) (arg1)->InstallID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1InstallID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcInstallIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (TThostFtdcInstallIDType) ((arg1)->InstallID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1OrderSubmitStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcOrderSubmitStatusType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = (TThostFtdcOrderSubmitStatusType)jarg2; 
  if (arg1) (arg1)->OrderSubmitStatus = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1OrderSubmitStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcOrderSubmitStatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (TThostFtdcOrderSubmitStatusType) ((arg1)->OrderSubmitStatus);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1NotifySequence_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcSequenceNoType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = (TThostFtdcSequenceNoType)jarg2; 
  if (arg1) (arg1)->NotifySequence = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1NotifySequence_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcSequenceNoType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (TThostFtdcSequenceNoType) ((arg1)->NotifySequence);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1SettlementID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcSettlementIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = (TThostFtdcSettlementIDType)jarg2; 
  if (arg1) (arg1)->SettlementID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1SettlementID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcSettlementIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (TThostFtdcSettlementIDType) ((arg1)->SettlementID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1OrderSysID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderSysID, (const char *)arg2, 21-1);
      arg1->OrderSysID[21-1] = 0;
    } else {
      arg1->OrderSysID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1OrderSysID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (char *) ((arg1)->OrderSysID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1OrderSource_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcOrderSourceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = (TThostFtdcOrderSourceType)jarg2; 
  if (arg1) (arg1)->OrderSource = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1OrderSource_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcOrderSourceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (TThostFtdcOrderSourceType) ((arg1)->OrderSource);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1OrderStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcOrderStatusType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = (TThostFtdcOrderStatusType)jarg2; 
  if (arg1) (arg1)->OrderStatus = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1OrderStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcOrderStatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (TThostFtdcOrderStatusType) ((arg1)->OrderStatus);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1OrderType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcOrderTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = (TThostFtdcOrderTypeType)jarg2; 
  if (arg1) (arg1)->OrderType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1OrderType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcOrderTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (TThostFtdcOrderTypeType) ((arg1)->OrderType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1VolumeTraded_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->VolumeTraded = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1VolumeTraded_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->VolumeTraded);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1VolumeTotal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->VolumeTotal = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1VolumeTotal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->VolumeTotal);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1InsertDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InsertDate, (const char *)arg2, 9-1);
      arg1->InsertDate[9-1] = 0;
    } else {
      arg1->InsertDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1InsertDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (char *) ((arg1)->InsertDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1InsertTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InsertTime, (const char *)arg2, 9-1);
      arg1->InsertTime[9-1] = 0;
    } else {
      arg1->InsertTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1InsertTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (char *) ((arg1)->InsertTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1ActiveTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ActiveTime, (const char *)arg2, 9-1);
      arg1->ActiveTime[9-1] = 0;
    } else {
      arg1->ActiveTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1ActiveTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (char *) ((arg1)->ActiveTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1SuspendTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->SuspendTime, (const char *)arg2, 9-1);
      arg1->SuspendTime[9-1] = 0;
    } else {
      arg1->SuspendTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1SuspendTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (char *) ((arg1)->SuspendTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1UpdateTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UpdateTime, (const char *)arg2, 9-1);
      arg1->UpdateTime[9-1] = 0;
    } else {
      arg1->UpdateTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1UpdateTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (char *) ((arg1)->UpdateTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1CancelTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CancelTime, (const char *)arg2, 9-1);
      arg1->CancelTime[9-1] = 0;
    } else {
      arg1->CancelTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1CancelTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (char *) ((arg1)->CancelTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1ActiveTraderID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ActiveTraderID, (const char *)arg2, 21-1);
      arg1->ActiveTraderID[21-1] = 0;
    } else {
      arg1->ActiveTraderID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1ActiveTraderID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (char *) ((arg1)->ActiveTraderID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1ClearingPartID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ClearingPartID, (const char *)arg2, 11-1);
      arg1->ClearingPartID[11-1] = 0;
    } else {
      arg1->ClearingPartID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1ClearingPartID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (char *) ((arg1)->ClearingPartID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1SequenceNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcSequenceNoType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  arg2 = (TThostFtdcSequenceNoType)jarg2; 
  if (arg1) (arg1)->SequenceNo = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderField_1SequenceNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  TThostFtdcSequenceNoType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  result = (TThostFtdcSequenceNoType) ((arg1)->SequenceNo);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcExchangeOrderField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcExchangeOrderField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcExchangeOrderField *)new CThostFtdcExchangeOrderField();
  *(CThostFtdcExchangeOrderField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcExchangeOrderField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcExchangeOrderField *arg1 = (CThostFtdcExchangeOrderField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcExchangeOrderField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderInsertErrorField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderInsertErrorField *arg1 = (CThostFtdcExchangeOrderInsertErrorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderInsertErrorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderInsertErrorField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderInsertErrorField *arg1 = (CThostFtdcExchangeOrderInsertErrorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderInsertErrorField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderInsertErrorField_1ParticipantID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderInsertErrorField *arg1 = (CThostFtdcExchangeOrderInsertErrorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderInsertErrorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ParticipantID, (const char *)arg2, 11-1);
      arg1->ParticipantID[11-1] = 0;
    } else {
      arg1->ParticipantID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderInsertErrorField_1ParticipantID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderInsertErrorField *arg1 = (CThostFtdcExchangeOrderInsertErrorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderInsertErrorField **)&jarg1; 
  result = (char *) ((arg1)->ParticipantID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderInsertErrorField_1TraderID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderInsertErrorField *arg1 = (CThostFtdcExchangeOrderInsertErrorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderInsertErrorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TraderID, (const char *)arg2, 21-1);
      arg1->TraderID[21-1] = 0;
    } else {
      arg1->TraderID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderInsertErrorField_1TraderID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderInsertErrorField *arg1 = (CThostFtdcExchangeOrderInsertErrorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderInsertErrorField **)&jarg1; 
  result = (char *) ((arg1)->TraderID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderInsertErrorField_1InstallID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcExchangeOrderInsertErrorField *arg1 = (CThostFtdcExchangeOrderInsertErrorField *) 0 ;
  TThostFtdcInstallIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderInsertErrorField **)&jarg1; 
  arg2 = (TThostFtdcInstallIDType)jarg2; 
  if (arg1) (arg1)->InstallID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderInsertErrorField_1InstallID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcExchangeOrderInsertErrorField *arg1 = (CThostFtdcExchangeOrderInsertErrorField *) 0 ;
  TThostFtdcInstallIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderInsertErrorField **)&jarg1; 
  result = (TThostFtdcInstallIDType) ((arg1)->InstallID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderInsertErrorField_1OrderLocalID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderInsertErrorField *arg1 = (CThostFtdcExchangeOrderInsertErrorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderInsertErrorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderLocalID, (const char *)arg2, 13-1);
      arg1->OrderLocalID[13-1] = 0;
    } else {
      arg1->OrderLocalID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderInsertErrorField_1OrderLocalID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderInsertErrorField *arg1 = (CThostFtdcExchangeOrderInsertErrorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderInsertErrorField **)&jarg1; 
  result = (char *) ((arg1)->OrderLocalID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderInsertErrorField_1ErrorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcExchangeOrderInsertErrorField *arg1 = (CThostFtdcExchangeOrderInsertErrorField *) 0 ;
  TThostFtdcErrorIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderInsertErrorField **)&jarg1; 
  arg2 = (TThostFtdcErrorIDType)jarg2; 
  if (arg1) (arg1)->ErrorID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderInsertErrorField_1ErrorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcExchangeOrderInsertErrorField *arg1 = (CThostFtdcExchangeOrderInsertErrorField *) 0 ;
  TThostFtdcErrorIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderInsertErrorField **)&jarg1; 
  result = (TThostFtdcErrorIDType) ((arg1)->ErrorID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderInsertErrorField_1ErrorMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderInsertErrorField *arg1 = (CThostFtdcExchangeOrderInsertErrorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderInsertErrorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ErrorMsg, (const char *)arg2, 81-1);
      arg1->ErrorMsg[81-1] = 0;
    } else {
      arg1->ErrorMsg[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderInsertErrorField_1ErrorMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderInsertErrorField *arg1 = (CThostFtdcExchangeOrderInsertErrorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderInsertErrorField **)&jarg1; 
  result = (char *) ((arg1)->ErrorMsg);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcExchangeOrderInsertErrorField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcExchangeOrderInsertErrorField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcExchangeOrderInsertErrorField *)new CThostFtdcExchangeOrderInsertErrorField();
  *(CThostFtdcExchangeOrderInsertErrorField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcExchangeOrderInsertErrorField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcExchangeOrderInsertErrorField *arg1 = (CThostFtdcExchangeOrderInsertErrorField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcExchangeOrderInsertErrorField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderActionField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInputOrderActionField *arg1 = (CThostFtdcInputOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderActionField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInputOrderActionField *arg1 = (CThostFtdcInputOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderActionField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInputOrderActionField *arg1 = (CThostFtdcInputOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderActionField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInputOrderActionField *arg1 = (CThostFtdcInputOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderActionField_1OrderActionRef_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInputOrderActionField *arg1 = (CThostFtdcInputOrderActionField *) 0 ;
  TThostFtdcOrderActionRefType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcOrderActionRefType)jarg2; 
  if (arg1) (arg1)->OrderActionRef = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderActionField_1OrderActionRef_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInputOrderActionField *arg1 = (CThostFtdcInputOrderActionField *) 0 ;
  TThostFtdcOrderActionRefType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderActionField **)&jarg1; 
  result = (TThostFtdcOrderActionRefType) ((arg1)->OrderActionRef);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderActionField_1OrderRef_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInputOrderActionField *arg1 = (CThostFtdcInputOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderRef, (const char *)arg2, 13-1);
      arg1->OrderRef[13-1] = 0;
    } else {
      arg1->OrderRef[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderActionField_1OrderRef_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInputOrderActionField *arg1 = (CThostFtdcInputOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->OrderRef);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderActionField_1RequestID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInputOrderActionField *arg1 = (CThostFtdcInputOrderActionField *) 0 ;
  TThostFtdcRequestIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcRequestIDType)jarg2; 
  if (arg1) (arg1)->RequestID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderActionField_1RequestID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInputOrderActionField *arg1 = (CThostFtdcInputOrderActionField *) 0 ;
  TThostFtdcRequestIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderActionField **)&jarg1; 
  result = (TThostFtdcRequestIDType) ((arg1)->RequestID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderActionField_1FrontID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInputOrderActionField *arg1 = (CThostFtdcInputOrderActionField *) 0 ;
  TThostFtdcFrontIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcFrontIDType)jarg2; 
  if (arg1) (arg1)->FrontID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderActionField_1FrontID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInputOrderActionField *arg1 = (CThostFtdcInputOrderActionField *) 0 ;
  TThostFtdcFrontIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderActionField **)&jarg1; 
  result = (TThostFtdcFrontIDType) ((arg1)->FrontID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderActionField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInputOrderActionField *arg1 = (CThostFtdcInputOrderActionField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderActionField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInputOrderActionField *arg1 = (CThostFtdcInputOrderActionField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderActionField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderActionField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInputOrderActionField *arg1 = (CThostFtdcInputOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderActionField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInputOrderActionField *arg1 = (CThostFtdcInputOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderActionField_1OrderSysID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInputOrderActionField *arg1 = (CThostFtdcInputOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderSysID, (const char *)arg2, 21-1);
      arg1->OrderSysID[21-1] = 0;
    } else {
      arg1->OrderSysID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderActionField_1OrderSysID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInputOrderActionField *arg1 = (CThostFtdcInputOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->OrderSysID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderActionField_1ActionFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcInputOrderActionField *arg1 = (CThostFtdcInputOrderActionField *) 0 ;
  TThostFtdcActionFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcActionFlagType)jarg2; 
  if (arg1) (arg1)->ActionFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderActionField_1ActionFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcInputOrderActionField *arg1 = (CThostFtdcInputOrderActionField *) 0 ;
  TThostFtdcActionFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderActionField **)&jarg1; 
  result = (TThostFtdcActionFlagType) ((arg1)->ActionFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderActionField_1LimitPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInputOrderActionField *arg1 = (CThostFtdcInputOrderActionField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->LimitPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderActionField_1LimitPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInputOrderActionField *arg1 = (CThostFtdcInputOrderActionField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderActionField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->LimitPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderActionField_1VolumeChange_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInputOrderActionField *arg1 = (CThostFtdcInputOrderActionField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->VolumeChange = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderActionField_1VolumeChange_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInputOrderActionField *arg1 = (CThostFtdcInputOrderActionField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderActionField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->VolumeChange);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderActionField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInputOrderActionField *arg1 = (CThostFtdcInputOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderActionField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInputOrderActionField *arg1 = (CThostFtdcInputOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderActionField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInputOrderActionField *arg1 = (CThostFtdcInputOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInputOrderActionField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInputOrderActionField *arg1 = (CThostFtdcInputOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInputOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcInputOrderActionField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcInputOrderActionField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcInputOrderActionField *)new CThostFtdcInputOrderActionField();
  *(CThostFtdcInputOrderActionField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcInputOrderActionField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcInputOrderActionField *arg1 = (CThostFtdcInputOrderActionField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcInputOrderActionField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1OrderActionRef_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  TThostFtdcOrderActionRefType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcOrderActionRefType)jarg2; 
  if (arg1) (arg1)->OrderActionRef = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1OrderActionRef_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  TThostFtdcOrderActionRefType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  result = (TThostFtdcOrderActionRefType) ((arg1)->OrderActionRef);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1OrderRef_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderRef, (const char *)arg2, 13-1);
      arg1->OrderRef[13-1] = 0;
    } else {
      arg1->OrderRef[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1OrderRef_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->OrderRef);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1RequestID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  TThostFtdcRequestIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcRequestIDType)jarg2; 
  if (arg1) (arg1)->RequestID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1RequestID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  TThostFtdcRequestIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  result = (TThostFtdcRequestIDType) ((arg1)->RequestID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1FrontID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  TThostFtdcFrontIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcFrontIDType)jarg2; 
  if (arg1) (arg1)->FrontID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1FrontID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  TThostFtdcFrontIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  result = (TThostFtdcFrontIDType) ((arg1)->FrontID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1OrderSysID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderSysID, (const char *)arg2, 21-1);
      arg1->OrderSysID[21-1] = 0;
    } else {
      arg1->OrderSysID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1OrderSysID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->OrderSysID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1ActionFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  TThostFtdcActionFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcActionFlagType)jarg2; 
  if (arg1) (arg1)->ActionFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1ActionFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  TThostFtdcActionFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  result = (TThostFtdcActionFlagType) ((arg1)->ActionFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1LimitPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->LimitPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1LimitPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->LimitPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1VolumeChange_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->VolumeChange = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1VolumeChange_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->VolumeChange);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1ActionDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ActionDate, (const char *)arg2, 9-1);
      arg1->ActionDate[9-1] = 0;
    } else {
      arg1->ActionDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1ActionDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->ActionDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1ActionTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ActionTime, (const char *)arg2, 9-1);
      arg1->ActionTime[9-1] = 0;
    } else {
      arg1->ActionTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1ActionTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->ActionTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1TraderID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TraderID, (const char *)arg2, 21-1);
      arg1->TraderID[21-1] = 0;
    } else {
      arg1->TraderID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1TraderID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->TraderID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1InstallID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  TThostFtdcInstallIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcInstallIDType)jarg2; 
  if (arg1) (arg1)->InstallID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1InstallID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  TThostFtdcInstallIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  result = (TThostFtdcInstallIDType) ((arg1)->InstallID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1OrderLocalID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderLocalID, (const char *)arg2, 13-1);
      arg1->OrderLocalID[13-1] = 0;
    } else {
      arg1->OrderLocalID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1OrderLocalID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->OrderLocalID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1ActionLocalID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ActionLocalID, (const char *)arg2, 13-1);
      arg1->ActionLocalID[13-1] = 0;
    } else {
      arg1->ActionLocalID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1ActionLocalID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->ActionLocalID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1ParticipantID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ParticipantID, (const char *)arg2, 11-1);
      arg1->ParticipantID[11-1] = 0;
    } else {
      arg1->ParticipantID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1ParticipantID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->ParticipantID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1ClientID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ClientID, (const char *)arg2, 11-1);
      arg1->ClientID[11-1] = 0;
    } else {
      arg1->ClientID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1ClientID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->ClientID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1BusinessUnit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BusinessUnit, (const char *)arg2, 21-1);
      arg1->BusinessUnit[21-1] = 0;
    } else {
      arg1->BusinessUnit[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1BusinessUnit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->BusinessUnit);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1OrderActionStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  TThostFtdcOrderActionStatusType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcOrderActionStatusType)jarg2; 
  if (arg1) (arg1)->OrderActionStatus = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1OrderActionStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  TThostFtdcOrderActionStatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  result = (TThostFtdcOrderActionStatusType) ((arg1)->OrderActionStatus);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1StatusMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->StatusMsg, (const char *)arg2, 81-1);
      arg1->StatusMsg[81-1] = 0;
    } else {
      arg1->StatusMsg[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1StatusMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->StatusMsg);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOrderActionField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcOrderActionField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcOrderActionField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcOrderActionField *)new CThostFtdcOrderActionField();
  *(CThostFtdcOrderActionField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcOrderActionField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcOrderActionField *arg1 = (CThostFtdcOrderActionField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcOrderActionField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderActionField *arg1 = (CThostFtdcExchangeOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderActionField *arg1 = (CThostFtdcExchangeOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionField_1OrderSysID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderActionField *arg1 = (CThostFtdcExchangeOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderSysID, (const char *)arg2, 21-1);
      arg1->OrderSysID[21-1] = 0;
    } else {
      arg1->OrderSysID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionField_1OrderSysID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderActionField *arg1 = (CThostFtdcExchangeOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->OrderSysID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionField_1ActionFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcExchangeOrderActionField *arg1 = (CThostFtdcExchangeOrderActionField *) 0 ;
  TThostFtdcActionFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcActionFlagType)jarg2; 
  if (arg1) (arg1)->ActionFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionField_1ActionFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcExchangeOrderActionField *arg1 = (CThostFtdcExchangeOrderActionField *) 0 ;
  TThostFtdcActionFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionField **)&jarg1; 
  result = (TThostFtdcActionFlagType) ((arg1)->ActionFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionField_1LimitPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcExchangeOrderActionField *arg1 = (CThostFtdcExchangeOrderActionField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->LimitPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionField_1LimitPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcExchangeOrderActionField *arg1 = (CThostFtdcExchangeOrderActionField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->LimitPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionField_1VolumeChange_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcExchangeOrderActionField *arg1 = (CThostFtdcExchangeOrderActionField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->VolumeChange = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionField_1VolumeChange_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcExchangeOrderActionField *arg1 = (CThostFtdcExchangeOrderActionField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->VolumeChange);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionField_1ActionDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderActionField *arg1 = (CThostFtdcExchangeOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ActionDate, (const char *)arg2, 9-1);
      arg1->ActionDate[9-1] = 0;
    } else {
      arg1->ActionDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionField_1ActionDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderActionField *arg1 = (CThostFtdcExchangeOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->ActionDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionField_1ActionTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderActionField *arg1 = (CThostFtdcExchangeOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ActionTime, (const char *)arg2, 9-1);
      arg1->ActionTime[9-1] = 0;
    } else {
      arg1->ActionTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionField_1ActionTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderActionField *arg1 = (CThostFtdcExchangeOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->ActionTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionField_1TraderID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderActionField *arg1 = (CThostFtdcExchangeOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TraderID, (const char *)arg2, 21-1);
      arg1->TraderID[21-1] = 0;
    } else {
      arg1->TraderID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionField_1TraderID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderActionField *arg1 = (CThostFtdcExchangeOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->TraderID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionField_1InstallID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcExchangeOrderActionField *arg1 = (CThostFtdcExchangeOrderActionField *) 0 ;
  TThostFtdcInstallIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcInstallIDType)jarg2; 
  if (arg1) (arg1)->InstallID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionField_1InstallID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcExchangeOrderActionField *arg1 = (CThostFtdcExchangeOrderActionField *) 0 ;
  TThostFtdcInstallIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionField **)&jarg1; 
  result = (TThostFtdcInstallIDType) ((arg1)->InstallID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionField_1OrderLocalID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderActionField *arg1 = (CThostFtdcExchangeOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderLocalID, (const char *)arg2, 13-1);
      arg1->OrderLocalID[13-1] = 0;
    } else {
      arg1->OrderLocalID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionField_1OrderLocalID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderActionField *arg1 = (CThostFtdcExchangeOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->OrderLocalID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionField_1ActionLocalID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderActionField *arg1 = (CThostFtdcExchangeOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ActionLocalID, (const char *)arg2, 13-1);
      arg1->ActionLocalID[13-1] = 0;
    } else {
      arg1->ActionLocalID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionField_1ActionLocalID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderActionField *arg1 = (CThostFtdcExchangeOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->ActionLocalID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionField_1ParticipantID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderActionField *arg1 = (CThostFtdcExchangeOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ParticipantID, (const char *)arg2, 11-1);
      arg1->ParticipantID[11-1] = 0;
    } else {
      arg1->ParticipantID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionField_1ParticipantID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderActionField *arg1 = (CThostFtdcExchangeOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->ParticipantID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionField_1ClientID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderActionField *arg1 = (CThostFtdcExchangeOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ClientID, (const char *)arg2, 11-1);
      arg1->ClientID[11-1] = 0;
    } else {
      arg1->ClientID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionField_1ClientID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderActionField *arg1 = (CThostFtdcExchangeOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->ClientID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionField_1BusinessUnit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderActionField *arg1 = (CThostFtdcExchangeOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BusinessUnit, (const char *)arg2, 21-1);
      arg1->BusinessUnit[21-1] = 0;
    } else {
      arg1->BusinessUnit[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionField_1BusinessUnit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderActionField *arg1 = (CThostFtdcExchangeOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->BusinessUnit);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionField_1OrderActionStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcExchangeOrderActionField *arg1 = (CThostFtdcExchangeOrderActionField *) 0 ;
  TThostFtdcOrderActionStatusType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcOrderActionStatusType)jarg2; 
  if (arg1) (arg1)->OrderActionStatus = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionField_1OrderActionStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcExchangeOrderActionField *arg1 = (CThostFtdcExchangeOrderActionField *) 0 ;
  TThostFtdcOrderActionStatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionField **)&jarg1; 
  result = (TThostFtdcOrderActionStatusType) ((arg1)->OrderActionStatus);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderActionField *arg1 = (CThostFtdcExchangeOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderActionField *arg1 = (CThostFtdcExchangeOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcExchangeOrderActionField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcExchangeOrderActionField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcExchangeOrderActionField *)new CThostFtdcExchangeOrderActionField();
  *(CThostFtdcExchangeOrderActionField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcExchangeOrderActionField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcExchangeOrderActionField *arg1 = (CThostFtdcExchangeOrderActionField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcExchangeOrderActionField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionErrorField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderActionErrorField *arg1 = (CThostFtdcExchangeOrderActionErrorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionErrorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionErrorField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderActionErrorField *arg1 = (CThostFtdcExchangeOrderActionErrorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionErrorField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionErrorField_1OrderSysID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderActionErrorField *arg1 = (CThostFtdcExchangeOrderActionErrorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionErrorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderSysID, (const char *)arg2, 21-1);
      arg1->OrderSysID[21-1] = 0;
    } else {
      arg1->OrderSysID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionErrorField_1OrderSysID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderActionErrorField *arg1 = (CThostFtdcExchangeOrderActionErrorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionErrorField **)&jarg1; 
  result = (char *) ((arg1)->OrderSysID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionErrorField_1TraderID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderActionErrorField *arg1 = (CThostFtdcExchangeOrderActionErrorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionErrorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TraderID, (const char *)arg2, 21-1);
      arg1->TraderID[21-1] = 0;
    } else {
      arg1->TraderID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionErrorField_1TraderID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderActionErrorField *arg1 = (CThostFtdcExchangeOrderActionErrorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionErrorField **)&jarg1; 
  result = (char *) ((arg1)->TraderID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionErrorField_1InstallID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcExchangeOrderActionErrorField *arg1 = (CThostFtdcExchangeOrderActionErrorField *) 0 ;
  TThostFtdcInstallIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionErrorField **)&jarg1; 
  arg2 = (TThostFtdcInstallIDType)jarg2; 
  if (arg1) (arg1)->InstallID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionErrorField_1InstallID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcExchangeOrderActionErrorField *arg1 = (CThostFtdcExchangeOrderActionErrorField *) 0 ;
  TThostFtdcInstallIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionErrorField **)&jarg1; 
  result = (TThostFtdcInstallIDType) ((arg1)->InstallID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionErrorField_1OrderLocalID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderActionErrorField *arg1 = (CThostFtdcExchangeOrderActionErrorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionErrorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderLocalID, (const char *)arg2, 13-1);
      arg1->OrderLocalID[13-1] = 0;
    } else {
      arg1->OrderLocalID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionErrorField_1OrderLocalID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderActionErrorField *arg1 = (CThostFtdcExchangeOrderActionErrorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionErrorField **)&jarg1; 
  result = (char *) ((arg1)->OrderLocalID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionErrorField_1ActionLocalID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderActionErrorField *arg1 = (CThostFtdcExchangeOrderActionErrorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionErrorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ActionLocalID, (const char *)arg2, 13-1);
      arg1->ActionLocalID[13-1] = 0;
    } else {
      arg1->ActionLocalID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionErrorField_1ActionLocalID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderActionErrorField *arg1 = (CThostFtdcExchangeOrderActionErrorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionErrorField **)&jarg1; 
  result = (char *) ((arg1)->ActionLocalID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionErrorField_1ErrorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcExchangeOrderActionErrorField *arg1 = (CThostFtdcExchangeOrderActionErrorField *) 0 ;
  TThostFtdcErrorIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionErrorField **)&jarg1; 
  arg2 = (TThostFtdcErrorIDType)jarg2; 
  if (arg1) (arg1)->ErrorID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionErrorField_1ErrorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcExchangeOrderActionErrorField *arg1 = (CThostFtdcExchangeOrderActionErrorField *) 0 ;
  TThostFtdcErrorIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionErrorField **)&jarg1; 
  result = (TThostFtdcErrorIDType) ((arg1)->ErrorID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionErrorField_1ErrorMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeOrderActionErrorField *arg1 = (CThostFtdcExchangeOrderActionErrorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionErrorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ErrorMsg, (const char *)arg2, 81-1);
      arg1->ErrorMsg[81-1] = 0;
    } else {
      arg1->ErrorMsg[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeOrderActionErrorField_1ErrorMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeOrderActionErrorField *arg1 = (CThostFtdcExchangeOrderActionErrorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeOrderActionErrorField **)&jarg1; 
  result = (char *) ((arg1)->ErrorMsg);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcExchangeOrderActionErrorField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcExchangeOrderActionErrorField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcExchangeOrderActionErrorField *)new CThostFtdcExchangeOrderActionErrorField();
  *(CThostFtdcExchangeOrderActionErrorField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcExchangeOrderActionErrorField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcExchangeOrderActionErrorField *arg1 = (CThostFtdcExchangeOrderActionErrorField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcExchangeOrderActionErrorField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1TradeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeID, (const char *)arg2, 21-1);
      arg1->TradeID[21-1] = 0;
    } else {
      arg1->TradeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1TradeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  result = (char *) ((arg1)->TradeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1Direction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  TThostFtdcDirectionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  arg2 = (TThostFtdcDirectionType)jarg2; 
  if (arg1) (arg1)->Direction = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1Direction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  TThostFtdcDirectionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  result = (TThostFtdcDirectionType) ((arg1)->Direction);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1OrderSysID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderSysID, (const char *)arg2, 21-1);
      arg1->OrderSysID[21-1] = 0;
    } else {
      arg1->OrderSysID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1OrderSysID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  result = (char *) ((arg1)->OrderSysID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1ParticipantID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ParticipantID, (const char *)arg2, 11-1);
      arg1->ParticipantID[11-1] = 0;
    } else {
      arg1->ParticipantID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1ParticipantID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  result = (char *) ((arg1)->ParticipantID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1ClientID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ClientID, (const char *)arg2, 11-1);
      arg1->ClientID[11-1] = 0;
    } else {
      arg1->ClientID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1ClientID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  result = (char *) ((arg1)->ClientID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1TradingRole_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  TThostFtdcTradingRoleType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  arg2 = (TThostFtdcTradingRoleType)jarg2; 
  if (arg1) (arg1)->TradingRole = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1TradingRole_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  TThostFtdcTradingRoleType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  result = (TThostFtdcTradingRoleType) ((arg1)->TradingRole);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1ExchangeInstID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeInstID, (const char *)arg2, 31-1);
      arg1->ExchangeInstID[31-1] = 0;
    } else {
      arg1->ExchangeInstID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1ExchangeInstID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeInstID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1OffsetFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  TThostFtdcOffsetFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  arg2 = (TThostFtdcOffsetFlagType)jarg2; 
  if (arg1) (arg1)->OffsetFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1OffsetFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  TThostFtdcOffsetFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  result = (TThostFtdcOffsetFlagType) ((arg1)->OffsetFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1HedgeFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  TThostFtdcHedgeFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  arg2 = (TThostFtdcHedgeFlagType)jarg2; 
  if (arg1) (arg1)->HedgeFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1HedgeFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  TThostFtdcHedgeFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  result = (TThostFtdcHedgeFlagType) ((arg1)->HedgeFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1Price_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->Price = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1Price_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->Price);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1Volume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->Volume = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1Volume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->Volume);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1TradeDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeDate, (const char *)arg2, 9-1);
      arg1->TradeDate[9-1] = 0;
    } else {
      arg1->TradeDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1TradeDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  result = (char *) ((arg1)->TradeDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1TradeTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeTime, (const char *)arg2, 9-1);
      arg1->TradeTime[9-1] = 0;
    } else {
      arg1->TradeTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1TradeTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  result = (char *) ((arg1)->TradeTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1TradeType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  TThostFtdcTradeTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  arg2 = (TThostFtdcTradeTypeType)jarg2; 
  if (arg1) (arg1)->TradeType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1TradeType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  TThostFtdcTradeTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  result = (TThostFtdcTradeTypeType) ((arg1)->TradeType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1PriceSource_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  TThostFtdcPriceSourceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  arg2 = (TThostFtdcPriceSourceType)jarg2; 
  if (arg1) (arg1)->PriceSource = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1PriceSource_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  TThostFtdcPriceSourceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  result = (TThostFtdcPriceSourceType) ((arg1)->PriceSource);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1TraderID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TraderID, (const char *)arg2, 21-1);
      arg1->TraderID[21-1] = 0;
    } else {
      arg1->TraderID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1TraderID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  result = (char *) ((arg1)->TraderID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1OrderLocalID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderLocalID, (const char *)arg2, 13-1);
      arg1->OrderLocalID[13-1] = 0;
    } else {
      arg1->OrderLocalID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1OrderLocalID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  result = (char *) ((arg1)->OrderLocalID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1ClearingPartID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ClearingPartID, (const char *)arg2, 11-1);
      arg1->ClearingPartID[11-1] = 0;
    } else {
      arg1->ClearingPartID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1ClearingPartID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  result = (char *) ((arg1)->ClearingPartID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1BusinessUnit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BusinessUnit, (const char *)arg2, 21-1);
      arg1->BusinessUnit[21-1] = 0;
    } else {
      arg1->BusinessUnit[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1BusinessUnit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  result = (char *) ((arg1)->BusinessUnit);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1SequenceNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  TThostFtdcSequenceNoType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  arg2 = (TThostFtdcSequenceNoType)jarg2; 
  if (arg1) (arg1)->SequenceNo = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1SequenceNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  TThostFtdcSequenceNoType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  result = (TThostFtdcSequenceNoType) ((arg1)->SequenceNo);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1TradeSource_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  TThostFtdcTradeSourceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  arg2 = (TThostFtdcTradeSourceType)jarg2; 
  if (arg1) (arg1)->TradeSource = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeTradeField_1TradeSource_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  TThostFtdcTradeSourceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  result = (TThostFtdcTradeSourceType) ((arg1)->TradeSource);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcExchangeTradeField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcExchangeTradeField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcExchangeTradeField *)new CThostFtdcExchangeTradeField();
  *(CThostFtdcExchangeTradeField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcExchangeTradeField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcExchangeTradeField *arg1 = (CThostFtdcExchangeTradeField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcExchangeTradeField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1OrderRef_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderRef, (const char *)arg2, 13-1);
      arg1->OrderRef[13-1] = 0;
    } else {
      arg1->OrderRef[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1OrderRef_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  result = (char *) ((arg1)->OrderRef);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1TradeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeID, (const char *)arg2, 21-1);
      arg1->TradeID[21-1] = 0;
    } else {
      arg1->TradeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1TradeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  result = (char *) ((arg1)->TradeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1Direction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  TThostFtdcDirectionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  arg2 = (TThostFtdcDirectionType)jarg2; 
  if (arg1) (arg1)->Direction = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1Direction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  TThostFtdcDirectionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  result = (TThostFtdcDirectionType) ((arg1)->Direction);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1OrderSysID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderSysID, (const char *)arg2, 21-1);
      arg1->OrderSysID[21-1] = 0;
    } else {
      arg1->OrderSysID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1OrderSysID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  result = (char *) ((arg1)->OrderSysID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1ParticipantID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ParticipantID, (const char *)arg2, 11-1);
      arg1->ParticipantID[11-1] = 0;
    } else {
      arg1->ParticipantID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1ParticipantID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  result = (char *) ((arg1)->ParticipantID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1ClientID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ClientID, (const char *)arg2, 11-1);
      arg1->ClientID[11-1] = 0;
    } else {
      arg1->ClientID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1ClientID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  result = (char *) ((arg1)->ClientID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1TradingRole_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  TThostFtdcTradingRoleType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  arg2 = (TThostFtdcTradingRoleType)jarg2; 
  if (arg1) (arg1)->TradingRole = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1TradingRole_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  TThostFtdcTradingRoleType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  result = (TThostFtdcTradingRoleType) ((arg1)->TradingRole);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1ExchangeInstID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeInstID, (const char *)arg2, 31-1);
      arg1->ExchangeInstID[31-1] = 0;
    } else {
      arg1->ExchangeInstID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1ExchangeInstID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeInstID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1OffsetFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  TThostFtdcOffsetFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  arg2 = (TThostFtdcOffsetFlagType)jarg2; 
  if (arg1) (arg1)->OffsetFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1OffsetFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  TThostFtdcOffsetFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  result = (TThostFtdcOffsetFlagType) ((arg1)->OffsetFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1HedgeFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  TThostFtdcHedgeFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  arg2 = (TThostFtdcHedgeFlagType)jarg2; 
  if (arg1) (arg1)->HedgeFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1HedgeFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  TThostFtdcHedgeFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  result = (TThostFtdcHedgeFlagType) ((arg1)->HedgeFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1Price_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->Price = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1Price_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->Price);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1Volume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->Volume = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1Volume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->Volume);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1TradeDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeDate, (const char *)arg2, 9-1);
      arg1->TradeDate[9-1] = 0;
    } else {
      arg1->TradeDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1TradeDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  result = (char *) ((arg1)->TradeDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1TradeTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeTime, (const char *)arg2, 9-1);
      arg1->TradeTime[9-1] = 0;
    } else {
      arg1->TradeTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1TradeTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  result = (char *) ((arg1)->TradeTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1TradeType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  TThostFtdcTradeTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  arg2 = (TThostFtdcTradeTypeType)jarg2; 
  if (arg1) (arg1)->TradeType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1TradeType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  TThostFtdcTradeTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  result = (TThostFtdcTradeTypeType) ((arg1)->TradeType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1PriceSource_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  TThostFtdcPriceSourceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  arg2 = (TThostFtdcPriceSourceType)jarg2; 
  if (arg1) (arg1)->PriceSource = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1PriceSource_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  TThostFtdcPriceSourceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  result = (TThostFtdcPriceSourceType) ((arg1)->PriceSource);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1TraderID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TraderID, (const char *)arg2, 21-1);
      arg1->TraderID[21-1] = 0;
    } else {
      arg1->TraderID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1TraderID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  result = (char *) ((arg1)->TraderID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1OrderLocalID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderLocalID, (const char *)arg2, 13-1);
      arg1->OrderLocalID[13-1] = 0;
    } else {
      arg1->OrderLocalID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1OrderLocalID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  result = (char *) ((arg1)->OrderLocalID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1ClearingPartID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ClearingPartID, (const char *)arg2, 11-1);
      arg1->ClearingPartID[11-1] = 0;
    } else {
      arg1->ClearingPartID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1ClearingPartID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  result = (char *) ((arg1)->ClearingPartID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1BusinessUnit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BusinessUnit, (const char *)arg2, 21-1);
      arg1->BusinessUnit[21-1] = 0;
    } else {
      arg1->BusinessUnit[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1BusinessUnit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  result = (char *) ((arg1)->BusinessUnit);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1SequenceNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  TThostFtdcSequenceNoType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  arg2 = (TThostFtdcSequenceNoType)jarg2; 
  if (arg1) (arg1)->SequenceNo = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1SequenceNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  TThostFtdcSequenceNoType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  result = (TThostFtdcSequenceNoType) ((arg1)->SequenceNo);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1SettlementID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  TThostFtdcSettlementIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  arg2 = (TThostFtdcSettlementIDType)jarg2; 
  if (arg1) (arg1)->SettlementID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1SettlementID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  TThostFtdcSettlementIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  result = (TThostFtdcSettlementIDType) ((arg1)->SettlementID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1BrokerOrderSeq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  TThostFtdcSequenceNoType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  arg2 = (TThostFtdcSequenceNoType)jarg2; 
  if (arg1) (arg1)->BrokerOrderSeq = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1BrokerOrderSeq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  TThostFtdcSequenceNoType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  result = (TThostFtdcSequenceNoType) ((arg1)->BrokerOrderSeq);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1TradeSource_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  TThostFtdcTradeSourceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  arg2 = (TThostFtdcTradeSourceType)jarg2; 
  if (arg1) (arg1)->TradeSource = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradeField_1TradeSource_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  TThostFtdcTradeSourceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  result = (TThostFtdcTradeSourceType) ((arg1)->TradeSource);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcTradeField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcTradeField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcTradeField *)new CThostFtdcTradeField();
  *(CThostFtdcTradeField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcTradeField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcTradeField *arg1 = (CThostFtdcTradeField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcTradeField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserSessionField_1FrontID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcUserSessionField *arg1 = (CThostFtdcUserSessionField *) 0 ;
  TThostFtdcFrontIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserSessionField **)&jarg1; 
  arg2 = (TThostFtdcFrontIDType)jarg2; 
  if (arg1) (arg1)->FrontID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserSessionField_1FrontID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcUserSessionField *arg1 = (CThostFtdcUserSessionField *) 0 ;
  TThostFtdcFrontIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserSessionField **)&jarg1; 
  result = (TThostFtdcFrontIDType) ((arg1)->FrontID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserSessionField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcUserSessionField *arg1 = (CThostFtdcUserSessionField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserSessionField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserSessionField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcUserSessionField *arg1 = (CThostFtdcUserSessionField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserSessionField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserSessionField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcUserSessionField *arg1 = (CThostFtdcUserSessionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserSessionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserSessionField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcUserSessionField *arg1 = (CThostFtdcUserSessionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserSessionField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserSessionField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcUserSessionField *arg1 = (CThostFtdcUserSessionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserSessionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserSessionField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcUserSessionField *arg1 = (CThostFtdcUserSessionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserSessionField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserSessionField_1LoginDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcUserSessionField *arg1 = (CThostFtdcUserSessionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserSessionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->LoginDate, (const char *)arg2, 9-1);
      arg1->LoginDate[9-1] = 0;
    } else {
      arg1->LoginDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserSessionField_1LoginDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcUserSessionField *arg1 = (CThostFtdcUserSessionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserSessionField **)&jarg1; 
  result = (char *) ((arg1)->LoginDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserSessionField_1LoginTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcUserSessionField *arg1 = (CThostFtdcUserSessionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserSessionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->LoginTime, (const char *)arg2, 9-1);
      arg1->LoginTime[9-1] = 0;
    } else {
      arg1->LoginTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserSessionField_1LoginTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcUserSessionField *arg1 = (CThostFtdcUserSessionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserSessionField **)&jarg1; 
  result = (char *) ((arg1)->LoginTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserSessionField_1IPAddress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcUserSessionField *arg1 = (CThostFtdcUserSessionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserSessionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->IPAddress, (const char *)arg2, 16-1);
      arg1->IPAddress[16-1] = 0;
    } else {
      arg1->IPAddress[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserSessionField_1IPAddress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcUserSessionField *arg1 = (CThostFtdcUserSessionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserSessionField **)&jarg1; 
  result = (char *) ((arg1)->IPAddress);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserSessionField_1UserProductInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcUserSessionField *arg1 = (CThostFtdcUserSessionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserSessionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserProductInfo, (const char *)arg2, 11-1);
      arg1->UserProductInfo[11-1] = 0;
    } else {
      arg1->UserProductInfo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserSessionField_1UserProductInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcUserSessionField *arg1 = (CThostFtdcUserSessionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserSessionField **)&jarg1; 
  result = (char *) ((arg1)->UserProductInfo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserSessionField_1InterfaceProductInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcUserSessionField *arg1 = (CThostFtdcUserSessionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserSessionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InterfaceProductInfo, (const char *)arg2, 11-1);
      arg1->InterfaceProductInfo[11-1] = 0;
    } else {
      arg1->InterfaceProductInfo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserSessionField_1InterfaceProductInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcUserSessionField *arg1 = (CThostFtdcUserSessionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserSessionField **)&jarg1; 
  result = (char *) ((arg1)->InterfaceProductInfo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserSessionField_1ProtocolInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcUserSessionField *arg1 = (CThostFtdcUserSessionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserSessionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ProtocolInfo, (const char *)arg2, 11-1);
      arg1->ProtocolInfo[11-1] = 0;
    } else {
      arg1->ProtocolInfo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserSessionField_1ProtocolInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcUserSessionField *arg1 = (CThostFtdcUserSessionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserSessionField **)&jarg1; 
  result = (char *) ((arg1)->ProtocolInfo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserSessionField_1MacAddress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcUserSessionField *arg1 = (CThostFtdcUserSessionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserSessionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->MacAddress, (const char *)arg2, 21-1);
      arg1->MacAddress[21-1] = 0;
    } else {
      arg1->MacAddress[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserSessionField_1MacAddress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcUserSessionField *arg1 = (CThostFtdcUserSessionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserSessionField **)&jarg1; 
  result = (char *) ((arg1)->MacAddress);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcUserSessionField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcUserSessionField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcUserSessionField *)new CThostFtdcUserSessionField();
  *(CThostFtdcUserSessionField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcUserSessionField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcUserSessionField *arg1 = (CThostFtdcUserSessionField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcUserSessionField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryMaxOrderVolumeField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQueryMaxOrderVolumeField *arg1 = (CThostFtdcQueryMaxOrderVolumeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryMaxOrderVolumeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryMaxOrderVolumeField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQueryMaxOrderVolumeField *arg1 = (CThostFtdcQueryMaxOrderVolumeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryMaxOrderVolumeField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryMaxOrderVolumeField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQueryMaxOrderVolumeField *arg1 = (CThostFtdcQueryMaxOrderVolumeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryMaxOrderVolumeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryMaxOrderVolumeField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQueryMaxOrderVolumeField *arg1 = (CThostFtdcQueryMaxOrderVolumeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryMaxOrderVolumeField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryMaxOrderVolumeField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQueryMaxOrderVolumeField *arg1 = (CThostFtdcQueryMaxOrderVolumeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryMaxOrderVolumeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryMaxOrderVolumeField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQueryMaxOrderVolumeField *arg1 = (CThostFtdcQueryMaxOrderVolumeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryMaxOrderVolumeField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryMaxOrderVolumeField_1Direction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcQueryMaxOrderVolumeField *arg1 = (CThostFtdcQueryMaxOrderVolumeField *) 0 ;
  TThostFtdcDirectionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryMaxOrderVolumeField **)&jarg1; 
  arg2 = (TThostFtdcDirectionType)jarg2; 
  if (arg1) (arg1)->Direction = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryMaxOrderVolumeField_1Direction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcQueryMaxOrderVolumeField *arg1 = (CThostFtdcQueryMaxOrderVolumeField *) 0 ;
  TThostFtdcDirectionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryMaxOrderVolumeField **)&jarg1; 
  result = (TThostFtdcDirectionType) ((arg1)->Direction);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryMaxOrderVolumeField_1OffsetFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcQueryMaxOrderVolumeField *arg1 = (CThostFtdcQueryMaxOrderVolumeField *) 0 ;
  TThostFtdcOffsetFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryMaxOrderVolumeField **)&jarg1; 
  arg2 = (TThostFtdcOffsetFlagType)jarg2; 
  if (arg1) (arg1)->OffsetFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryMaxOrderVolumeField_1OffsetFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcQueryMaxOrderVolumeField *arg1 = (CThostFtdcQueryMaxOrderVolumeField *) 0 ;
  TThostFtdcOffsetFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryMaxOrderVolumeField **)&jarg1; 
  result = (TThostFtdcOffsetFlagType) ((arg1)->OffsetFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryMaxOrderVolumeField_1HedgeFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcQueryMaxOrderVolumeField *arg1 = (CThostFtdcQueryMaxOrderVolumeField *) 0 ;
  TThostFtdcHedgeFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryMaxOrderVolumeField **)&jarg1; 
  arg2 = (TThostFtdcHedgeFlagType)jarg2; 
  if (arg1) (arg1)->HedgeFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryMaxOrderVolumeField_1HedgeFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcQueryMaxOrderVolumeField *arg1 = (CThostFtdcQueryMaxOrderVolumeField *) 0 ;
  TThostFtdcHedgeFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryMaxOrderVolumeField **)&jarg1; 
  result = (TThostFtdcHedgeFlagType) ((arg1)->HedgeFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryMaxOrderVolumeField_1MaxVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcQueryMaxOrderVolumeField *arg1 = (CThostFtdcQueryMaxOrderVolumeField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryMaxOrderVolumeField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->MaxVolume = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryMaxOrderVolumeField_1MaxVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcQueryMaxOrderVolumeField *arg1 = (CThostFtdcQueryMaxOrderVolumeField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryMaxOrderVolumeField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->MaxVolume);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQueryMaxOrderVolumeField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQueryMaxOrderVolumeField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQueryMaxOrderVolumeField *)new CThostFtdcQueryMaxOrderVolumeField();
  *(CThostFtdcQueryMaxOrderVolumeField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQueryMaxOrderVolumeField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQueryMaxOrderVolumeField *arg1 = (CThostFtdcQueryMaxOrderVolumeField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQueryMaxOrderVolumeField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSettlementInfoConfirmField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSettlementInfoConfirmField *arg1 = (CThostFtdcSettlementInfoConfirmField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSettlementInfoConfirmField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSettlementInfoConfirmField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSettlementInfoConfirmField *arg1 = (CThostFtdcSettlementInfoConfirmField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSettlementInfoConfirmField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSettlementInfoConfirmField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSettlementInfoConfirmField *arg1 = (CThostFtdcSettlementInfoConfirmField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSettlementInfoConfirmField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSettlementInfoConfirmField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSettlementInfoConfirmField *arg1 = (CThostFtdcSettlementInfoConfirmField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSettlementInfoConfirmField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSettlementInfoConfirmField_1ConfirmDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSettlementInfoConfirmField *arg1 = (CThostFtdcSettlementInfoConfirmField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSettlementInfoConfirmField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ConfirmDate, (const char *)arg2, 9-1);
      arg1->ConfirmDate[9-1] = 0;
    } else {
      arg1->ConfirmDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSettlementInfoConfirmField_1ConfirmDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSettlementInfoConfirmField *arg1 = (CThostFtdcSettlementInfoConfirmField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSettlementInfoConfirmField **)&jarg1; 
  result = (char *) ((arg1)->ConfirmDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSettlementInfoConfirmField_1ConfirmTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSettlementInfoConfirmField *arg1 = (CThostFtdcSettlementInfoConfirmField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSettlementInfoConfirmField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ConfirmTime, (const char *)arg2, 9-1);
      arg1->ConfirmTime[9-1] = 0;
    } else {
      arg1->ConfirmTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSettlementInfoConfirmField_1ConfirmTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSettlementInfoConfirmField *arg1 = (CThostFtdcSettlementInfoConfirmField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSettlementInfoConfirmField **)&jarg1; 
  result = (char *) ((arg1)->ConfirmTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcSettlementInfoConfirmField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcSettlementInfoConfirmField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcSettlementInfoConfirmField *)new CThostFtdcSettlementInfoConfirmField();
  *(CThostFtdcSettlementInfoConfirmField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcSettlementInfoConfirmField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcSettlementInfoConfirmField *arg1 = (CThostFtdcSettlementInfoConfirmField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcSettlementInfoConfirmField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncDepositField_1DepositSeqNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncDepositField *arg1 = (CThostFtdcSyncDepositField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncDepositField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->DepositSeqNo, (const char *)arg2, 15-1);
      arg1->DepositSeqNo[15-1] = 0;
    } else {
      arg1->DepositSeqNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncDepositField_1DepositSeqNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncDepositField *arg1 = (CThostFtdcSyncDepositField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncDepositField **)&jarg1; 
  result = (char *) ((arg1)->DepositSeqNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncDepositField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncDepositField *arg1 = (CThostFtdcSyncDepositField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncDepositField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncDepositField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncDepositField *arg1 = (CThostFtdcSyncDepositField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncDepositField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncDepositField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncDepositField *arg1 = (CThostFtdcSyncDepositField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncDepositField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncDepositField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncDepositField *arg1 = (CThostFtdcSyncDepositField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncDepositField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncDepositField_1Deposit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncDepositField *arg1 = (CThostFtdcSyncDepositField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncDepositField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Deposit = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncDepositField_1Deposit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncDepositField *arg1 = (CThostFtdcSyncDepositField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncDepositField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Deposit);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncDepositField_1IsForce_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcSyncDepositField *arg1 = (CThostFtdcSyncDepositField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncDepositField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->IsForce = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncDepositField_1IsForce_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcSyncDepositField *arg1 = (CThostFtdcSyncDepositField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncDepositField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->IsForce);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcSyncDepositField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcSyncDepositField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcSyncDepositField *)new CThostFtdcSyncDepositField();
  *(CThostFtdcSyncDepositField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcSyncDepositField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcSyncDepositField *arg1 = (CThostFtdcSyncDepositField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcSyncDepositField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerSyncField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerSyncField *arg1 = (CThostFtdcBrokerSyncField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerSyncField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerSyncField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerSyncField *arg1 = (CThostFtdcBrokerSyncField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerSyncField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcBrokerSyncField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcBrokerSyncField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcBrokerSyncField *)new CThostFtdcBrokerSyncField();
  *(CThostFtdcBrokerSyncField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcBrokerSyncField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcBrokerSyncField *arg1 = (CThostFtdcBrokerSyncField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcBrokerSyncField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingInvestorField *arg1 = (CThostFtdcSyncingInvestorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingInvestorField *arg1 = (CThostFtdcSyncingInvestorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingInvestorField *arg1 = (CThostFtdcSyncingInvestorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingInvestorField *arg1 = (CThostFtdcSyncingInvestorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorField_1InvestorGroupID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingInvestorField *arg1 = (CThostFtdcSyncingInvestorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorGroupID, (const char *)arg2, 13-1);
      arg1->InvestorGroupID[13-1] = 0;
    } else {
      arg1->InvestorGroupID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorField_1InvestorGroupID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingInvestorField *arg1 = (CThostFtdcSyncingInvestorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorField **)&jarg1; 
  result = (char *) ((arg1)->InvestorGroupID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorField_1InvestorName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingInvestorField *arg1 = (CThostFtdcSyncingInvestorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorName, (const char *)arg2, 81-1);
      arg1->InvestorName[81-1] = 0;
    } else {
      arg1->InvestorName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorField_1InvestorName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingInvestorField *arg1 = (CThostFtdcSyncingInvestorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorField **)&jarg1; 
  result = (char *) ((arg1)->InvestorName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorField_1IdentifiedCardType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcSyncingInvestorField *arg1 = (CThostFtdcSyncingInvestorField *) 0 ;
  TThostFtdcIdCardTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorField **)&jarg1; 
  arg2 = (TThostFtdcIdCardTypeType)jarg2; 
  if (arg1) (arg1)->IdentifiedCardType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorField_1IdentifiedCardType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcSyncingInvestorField *arg1 = (CThostFtdcSyncingInvestorField *) 0 ;
  TThostFtdcIdCardTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorField **)&jarg1; 
  result = (TThostFtdcIdCardTypeType) ((arg1)->IdentifiedCardType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorField_1IdentifiedCardNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingInvestorField *arg1 = (CThostFtdcSyncingInvestorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->IdentifiedCardNo, (const char *)arg2, 51-1);
      arg1->IdentifiedCardNo[51-1] = 0;
    } else {
      arg1->IdentifiedCardNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorField_1IdentifiedCardNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingInvestorField *arg1 = (CThostFtdcSyncingInvestorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorField **)&jarg1; 
  result = (char *) ((arg1)->IdentifiedCardNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorField_1IsActive_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcSyncingInvestorField *arg1 = (CThostFtdcSyncingInvestorField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->IsActive = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorField_1IsActive_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcSyncingInvestorField *arg1 = (CThostFtdcSyncingInvestorField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->IsActive);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorField_1Telephone_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingInvestorField *arg1 = (CThostFtdcSyncingInvestorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Telephone, (const char *)arg2, 41-1);
      arg1->Telephone[41-1] = 0;
    } else {
      arg1->Telephone[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorField_1Telephone_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingInvestorField *arg1 = (CThostFtdcSyncingInvestorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorField **)&jarg1; 
  result = (char *) ((arg1)->Telephone);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorField_1Address_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingInvestorField *arg1 = (CThostFtdcSyncingInvestorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Address, (const char *)arg2, 101-1);
      arg1->Address[101-1] = 0;
    } else {
      arg1->Address[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorField_1Address_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingInvestorField *arg1 = (CThostFtdcSyncingInvestorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorField **)&jarg1; 
  result = (char *) ((arg1)->Address);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorField_1OpenDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingInvestorField *arg1 = (CThostFtdcSyncingInvestorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OpenDate, (const char *)arg2, 9-1);
      arg1->OpenDate[9-1] = 0;
    } else {
      arg1->OpenDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorField_1OpenDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingInvestorField *arg1 = (CThostFtdcSyncingInvestorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorField **)&jarg1; 
  result = (char *) ((arg1)->OpenDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorField_1Mobile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingInvestorField *arg1 = (CThostFtdcSyncingInvestorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Mobile, (const char *)arg2, 41-1);
      arg1->Mobile[41-1] = 0;
    } else {
      arg1->Mobile[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorField_1Mobile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingInvestorField *arg1 = (CThostFtdcSyncingInvestorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorField **)&jarg1; 
  result = (char *) ((arg1)->Mobile);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorField_1CommModelID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingInvestorField *arg1 = (CThostFtdcSyncingInvestorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CommModelID, (const char *)arg2, 13-1);
      arg1->CommModelID[13-1] = 0;
    } else {
      arg1->CommModelID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorField_1CommModelID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingInvestorField *arg1 = (CThostFtdcSyncingInvestorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorField **)&jarg1; 
  result = (char *) ((arg1)->CommModelID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorField_1MarginModelID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingInvestorField *arg1 = (CThostFtdcSyncingInvestorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->MarginModelID, (const char *)arg2, 13-1);
      arg1->MarginModelID[13-1] = 0;
    } else {
      arg1->MarginModelID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorField_1MarginModelID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingInvestorField *arg1 = (CThostFtdcSyncingInvestorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorField **)&jarg1; 
  result = (char *) ((arg1)->MarginModelID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcSyncingInvestorField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcSyncingInvestorField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcSyncingInvestorField *)new CThostFtdcSyncingInvestorField();
  *(CThostFtdcSyncingInvestorField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcSyncingInvestorField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcSyncingInvestorField *arg1 = (CThostFtdcSyncingInvestorField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcSyncingInvestorField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingCodeField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingTradingCodeField *arg1 = (CThostFtdcSyncingTradingCodeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingCodeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingCodeField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingTradingCodeField *arg1 = (CThostFtdcSyncingTradingCodeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingCodeField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingCodeField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingTradingCodeField *arg1 = (CThostFtdcSyncingTradingCodeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingCodeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingCodeField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingTradingCodeField *arg1 = (CThostFtdcSyncingTradingCodeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingCodeField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingCodeField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingTradingCodeField *arg1 = (CThostFtdcSyncingTradingCodeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingCodeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingCodeField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingTradingCodeField *arg1 = (CThostFtdcSyncingTradingCodeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingCodeField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingCodeField_1ClientID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingTradingCodeField *arg1 = (CThostFtdcSyncingTradingCodeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingCodeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ClientID, (const char *)arg2, 11-1);
      arg1->ClientID[11-1] = 0;
    } else {
      arg1->ClientID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingCodeField_1ClientID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingTradingCodeField *arg1 = (CThostFtdcSyncingTradingCodeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingCodeField **)&jarg1; 
  result = (char *) ((arg1)->ClientID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingCodeField_1IsActive_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcSyncingTradingCodeField *arg1 = (CThostFtdcSyncingTradingCodeField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingCodeField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->IsActive = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingCodeField_1IsActive_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcSyncingTradingCodeField *arg1 = (CThostFtdcSyncingTradingCodeField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingCodeField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->IsActive);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingCodeField_1ClientIDType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcSyncingTradingCodeField *arg1 = (CThostFtdcSyncingTradingCodeField *) 0 ;
  TThostFtdcClientIDTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingCodeField **)&jarg1; 
  arg2 = (TThostFtdcClientIDTypeType)jarg2; 
  if (arg1) (arg1)->ClientIDType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingCodeField_1ClientIDType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcSyncingTradingCodeField *arg1 = (CThostFtdcSyncingTradingCodeField *) 0 ;
  TThostFtdcClientIDTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingCodeField **)&jarg1; 
  result = (TThostFtdcClientIDTypeType) ((arg1)->ClientIDType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcSyncingTradingCodeField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcSyncingTradingCodeField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcSyncingTradingCodeField *)new CThostFtdcSyncingTradingCodeField();
  *(CThostFtdcSyncingTradingCodeField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcSyncingTradingCodeField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcSyncingTradingCodeField *arg1 = (CThostFtdcSyncingTradingCodeField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcSyncingTradingCodeField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorGroupField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingInvestorGroupField *arg1 = (CThostFtdcSyncingInvestorGroupField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorGroupField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorGroupField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingInvestorGroupField *arg1 = (CThostFtdcSyncingInvestorGroupField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorGroupField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorGroupField_1InvestorGroupID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingInvestorGroupField *arg1 = (CThostFtdcSyncingInvestorGroupField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorGroupField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorGroupID, (const char *)arg2, 13-1);
      arg1->InvestorGroupID[13-1] = 0;
    } else {
      arg1->InvestorGroupID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorGroupField_1InvestorGroupID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingInvestorGroupField *arg1 = (CThostFtdcSyncingInvestorGroupField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorGroupField **)&jarg1; 
  result = (char *) ((arg1)->InvestorGroupID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorGroupField_1InvestorGroupName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingInvestorGroupField *arg1 = (CThostFtdcSyncingInvestorGroupField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorGroupField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorGroupName, (const char *)arg2, 41-1);
      arg1->InvestorGroupName[41-1] = 0;
    } else {
      arg1->InvestorGroupName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorGroupField_1InvestorGroupName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingInvestorGroupField *arg1 = (CThostFtdcSyncingInvestorGroupField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorGroupField **)&jarg1; 
  result = (char *) ((arg1)->InvestorGroupName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcSyncingInvestorGroupField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcSyncingInvestorGroupField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcSyncingInvestorGroupField *)new CThostFtdcSyncingInvestorGroupField();
  *(CThostFtdcSyncingInvestorGroupField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcSyncingInvestorGroupField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcSyncingInvestorGroupField *arg1 = (CThostFtdcSyncingInvestorGroupField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcSyncingInvestorGroupField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1AccountID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 13-1);
      arg1->AccountID[13-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1AccountID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  result = (char *) ((arg1)->AccountID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1PreMortgage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->PreMortgage = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1PreMortgage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->PreMortgage);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1PreCredit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->PreCredit = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1PreCredit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->PreCredit);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1PreDeposit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->PreDeposit = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1PreDeposit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->PreDeposit);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1PreBalance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->PreBalance = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1PreBalance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->PreBalance);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1PreMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->PreMargin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1PreMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->PreMargin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1InterestBase_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->InterestBase = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1InterestBase_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->InterestBase);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1Interest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Interest = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1Interest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Interest);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1Deposit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Deposit = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1Deposit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Deposit);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1Withdraw_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Withdraw = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1Withdraw_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Withdraw);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1FrozenMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->FrozenMargin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1FrozenMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->FrozenMargin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1FrozenCash_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->FrozenCash = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1FrozenCash_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->FrozenCash);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1FrozenCommission_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->FrozenCommission = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1FrozenCommission_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->FrozenCommission);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1CurrMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->CurrMargin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1CurrMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->CurrMargin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1CashIn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->CashIn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1CashIn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->CashIn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1Commission_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Commission = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1Commission_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Commission);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1CloseProfit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->CloseProfit = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1CloseProfit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->CloseProfit);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1PositionProfit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->PositionProfit = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1PositionProfit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->PositionProfit);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1Balance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Balance = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1Balance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Balance);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1Available_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Available = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1Available_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Available);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1WithdrawQuota_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->WithdrawQuota = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1WithdrawQuota_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->WithdrawQuota);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1Reserve_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Reserve = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1Reserve_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Reserve);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1SettlementID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcSettlementIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcSettlementIDType)jarg2; 
  if (arg1) (arg1)->SettlementID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1SettlementID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcSettlementIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  result = (TThostFtdcSettlementIDType) ((arg1)->SettlementID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1Credit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Credit = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1Credit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Credit);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1Mortgage_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Mortgage = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1Mortgage_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Mortgage);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1ExchangeMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->ExchangeMargin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1ExchangeMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->ExchangeMargin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1DeliveryMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->DeliveryMargin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1DeliveryMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->DeliveryMargin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1ExchangeDeliveryMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->ExchangeDeliveryMargin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1ExchangeDeliveryMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->ExchangeDeliveryMargin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1ReserveBalance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->ReserveBalance = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingTradingAccountField_1ReserveBalance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->ReserveBalance);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcSyncingTradingAccountField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcSyncingTradingAccountField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcSyncingTradingAccountField *)new CThostFtdcSyncingTradingAccountField();
  *(CThostFtdcSyncingTradingAccountField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcSyncingTradingAccountField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcSyncingTradingAccountField *arg1 = (CThostFtdcSyncingTradingAccountField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcSyncingTradingAccountField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1PosiDirection_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcPosiDirectionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcPosiDirectionType)jarg2; 
  if (arg1) (arg1)->PosiDirection = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1PosiDirection_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcPosiDirectionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcPosiDirectionType) ((arg1)->PosiDirection);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1HedgeFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcHedgeFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcHedgeFlagType)jarg2; 
  if (arg1) (arg1)->HedgeFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1HedgeFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcHedgeFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcHedgeFlagType) ((arg1)->HedgeFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1PositionDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcPositionDateType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcPositionDateType)jarg2; 
  if (arg1) (arg1)->PositionDate = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1PositionDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcPositionDateType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcPositionDateType) ((arg1)->PositionDate);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1YdPosition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->YdPosition = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1YdPosition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->YdPosition);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1Position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->Position = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1Position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->Position);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1LongFrozen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->LongFrozen = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1LongFrozen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->LongFrozen);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1ShortFrozen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->ShortFrozen = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1ShortFrozen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->ShortFrozen);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1LongFrozenAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->LongFrozenAmount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1LongFrozenAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->LongFrozenAmount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1ShortFrozenAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->ShortFrozenAmount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1ShortFrozenAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->ShortFrozenAmount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1OpenVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->OpenVolume = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1OpenVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->OpenVolume);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1CloseVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->CloseVolume = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1CloseVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->CloseVolume);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1OpenAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->OpenAmount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1OpenAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->OpenAmount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1CloseAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->CloseAmount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1CloseAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->CloseAmount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1PositionCost_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->PositionCost = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1PositionCost_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->PositionCost);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1PreMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->PreMargin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1PreMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->PreMargin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1UseMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->UseMargin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1UseMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->UseMargin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1FrozenMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->FrozenMargin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1FrozenMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->FrozenMargin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1FrozenCash_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->FrozenCash = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1FrozenCash_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->FrozenCash);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1FrozenCommission_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->FrozenCommission = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1FrozenCommission_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->FrozenCommission);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1CashIn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->CashIn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1CashIn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->CashIn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1Commission_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Commission = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1Commission_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Commission);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1CloseProfit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->CloseProfit = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1CloseProfit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->CloseProfit);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1PositionProfit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->PositionProfit = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1PositionProfit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->PositionProfit);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1PreSettlementPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->PreSettlementPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1PreSettlementPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->PreSettlementPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1SettlementPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->SettlementPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1SettlementPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->SettlementPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1SettlementID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcSettlementIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcSettlementIDType)jarg2; 
  if (arg1) (arg1)->SettlementID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1SettlementID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcSettlementIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcSettlementIDType) ((arg1)->SettlementID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1OpenCost_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->OpenCost = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1OpenCost_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->OpenCost);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1ExchangeMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->ExchangeMargin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1ExchangeMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->ExchangeMargin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1CombPosition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->CombPosition = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1CombPosition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->CombPosition);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1CombLongFrozen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->CombLongFrozen = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1CombLongFrozen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->CombLongFrozen);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1CombShortFrozen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->CombShortFrozen = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1CombShortFrozen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->CombShortFrozen);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1CloseProfitByDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->CloseProfitByDate = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1CloseProfitByDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->CloseProfitByDate);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1CloseProfitByTrade_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->CloseProfitByTrade = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1CloseProfitByTrade_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->CloseProfitByTrade);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1TodayPosition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->TodayPosition = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1TodayPosition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->TodayPosition);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1MarginRateByMoney_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->MarginRateByMoney = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1MarginRateByMoney_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->MarginRateByMoney);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1MarginRateByVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->MarginRateByVolume = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInvestorPositionField_1MarginRateByVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->MarginRateByVolume);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcSyncingInvestorPositionField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcSyncingInvestorPositionField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcSyncingInvestorPositionField *)new CThostFtdcSyncingInvestorPositionField();
  *(CThostFtdcSyncingInvestorPositionField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcSyncingInvestorPositionField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcSyncingInvestorPositionField *arg1 = (CThostFtdcSyncingInvestorPositionField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcSyncingInvestorPositionField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentMarginRateField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingInstrumentMarginRateField *arg1 = (CThostFtdcSyncingInstrumentMarginRateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentMarginRateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentMarginRateField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingInstrumentMarginRateField *arg1 = (CThostFtdcSyncingInstrumentMarginRateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentMarginRateField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentMarginRateField_1InvestorRange_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcSyncingInstrumentMarginRateField *arg1 = (CThostFtdcSyncingInstrumentMarginRateField *) 0 ;
  TThostFtdcInvestorRangeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentMarginRateField **)&jarg1; 
  arg2 = (TThostFtdcInvestorRangeType)jarg2; 
  if (arg1) (arg1)->InvestorRange = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentMarginRateField_1InvestorRange_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcSyncingInstrumentMarginRateField *arg1 = (CThostFtdcSyncingInstrumentMarginRateField *) 0 ;
  TThostFtdcInvestorRangeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentMarginRateField **)&jarg1; 
  result = (TThostFtdcInvestorRangeType) ((arg1)->InvestorRange);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentMarginRateField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingInstrumentMarginRateField *arg1 = (CThostFtdcSyncingInstrumentMarginRateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentMarginRateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentMarginRateField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingInstrumentMarginRateField *arg1 = (CThostFtdcSyncingInstrumentMarginRateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentMarginRateField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentMarginRateField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingInstrumentMarginRateField *arg1 = (CThostFtdcSyncingInstrumentMarginRateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentMarginRateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentMarginRateField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingInstrumentMarginRateField *arg1 = (CThostFtdcSyncingInstrumentMarginRateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentMarginRateField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentMarginRateField_1HedgeFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcSyncingInstrumentMarginRateField *arg1 = (CThostFtdcSyncingInstrumentMarginRateField *) 0 ;
  TThostFtdcHedgeFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentMarginRateField **)&jarg1; 
  arg2 = (TThostFtdcHedgeFlagType)jarg2; 
  if (arg1) (arg1)->HedgeFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentMarginRateField_1HedgeFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcSyncingInstrumentMarginRateField *arg1 = (CThostFtdcSyncingInstrumentMarginRateField *) 0 ;
  TThostFtdcHedgeFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentMarginRateField **)&jarg1; 
  result = (TThostFtdcHedgeFlagType) ((arg1)->HedgeFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentMarginRateField_1LongMarginRatioByMoney_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingInstrumentMarginRateField *arg1 = (CThostFtdcSyncingInstrumentMarginRateField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentMarginRateField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->LongMarginRatioByMoney = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentMarginRateField_1LongMarginRatioByMoney_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingInstrumentMarginRateField *arg1 = (CThostFtdcSyncingInstrumentMarginRateField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentMarginRateField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->LongMarginRatioByMoney);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentMarginRateField_1LongMarginRatioByVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingInstrumentMarginRateField *arg1 = (CThostFtdcSyncingInstrumentMarginRateField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentMarginRateField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->LongMarginRatioByVolume = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentMarginRateField_1LongMarginRatioByVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingInstrumentMarginRateField *arg1 = (CThostFtdcSyncingInstrumentMarginRateField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentMarginRateField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->LongMarginRatioByVolume);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentMarginRateField_1ShortMarginRatioByMoney_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingInstrumentMarginRateField *arg1 = (CThostFtdcSyncingInstrumentMarginRateField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentMarginRateField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->ShortMarginRatioByMoney = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentMarginRateField_1ShortMarginRatioByMoney_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingInstrumentMarginRateField *arg1 = (CThostFtdcSyncingInstrumentMarginRateField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentMarginRateField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->ShortMarginRatioByMoney);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentMarginRateField_1ShortMarginRatioByVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingInstrumentMarginRateField *arg1 = (CThostFtdcSyncingInstrumentMarginRateField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentMarginRateField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->ShortMarginRatioByVolume = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentMarginRateField_1ShortMarginRatioByVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingInstrumentMarginRateField *arg1 = (CThostFtdcSyncingInstrumentMarginRateField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentMarginRateField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->ShortMarginRatioByVolume);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentMarginRateField_1IsRelative_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcSyncingInstrumentMarginRateField *arg1 = (CThostFtdcSyncingInstrumentMarginRateField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentMarginRateField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->IsRelative = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentMarginRateField_1IsRelative_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcSyncingInstrumentMarginRateField *arg1 = (CThostFtdcSyncingInstrumentMarginRateField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentMarginRateField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->IsRelative);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcSyncingInstrumentMarginRateField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcSyncingInstrumentMarginRateField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcSyncingInstrumentMarginRateField *)new CThostFtdcSyncingInstrumentMarginRateField();
  *(CThostFtdcSyncingInstrumentMarginRateField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcSyncingInstrumentMarginRateField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcSyncingInstrumentMarginRateField *arg1 = (CThostFtdcSyncingInstrumentMarginRateField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcSyncingInstrumentMarginRateField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentCommissionRateField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingInstrumentCommissionRateField *arg1 = (CThostFtdcSyncingInstrumentCommissionRateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentCommissionRateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentCommissionRateField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingInstrumentCommissionRateField *arg1 = (CThostFtdcSyncingInstrumentCommissionRateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentCommissionRateField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentCommissionRateField_1InvestorRange_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcSyncingInstrumentCommissionRateField *arg1 = (CThostFtdcSyncingInstrumentCommissionRateField *) 0 ;
  TThostFtdcInvestorRangeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentCommissionRateField **)&jarg1; 
  arg2 = (TThostFtdcInvestorRangeType)jarg2; 
  if (arg1) (arg1)->InvestorRange = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentCommissionRateField_1InvestorRange_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcSyncingInstrumentCommissionRateField *arg1 = (CThostFtdcSyncingInstrumentCommissionRateField *) 0 ;
  TThostFtdcInvestorRangeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentCommissionRateField **)&jarg1; 
  result = (TThostFtdcInvestorRangeType) ((arg1)->InvestorRange);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentCommissionRateField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingInstrumentCommissionRateField *arg1 = (CThostFtdcSyncingInstrumentCommissionRateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentCommissionRateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentCommissionRateField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingInstrumentCommissionRateField *arg1 = (CThostFtdcSyncingInstrumentCommissionRateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentCommissionRateField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentCommissionRateField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingInstrumentCommissionRateField *arg1 = (CThostFtdcSyncingInstrumentCommissionRateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentCommissionRateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentCommissionRateField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingInstrumentCommissionRateField *arg1 = (CThostFtdcSyncingInstrumentCommissionRateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentCommissionRateField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentCommissionRateField_1OpenRatioByMoney_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingInstrumentCommissionRateField *arg1 = (CThostFtdcSyncingInstrumentCommissionRateField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentCommissionRateField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->OpenRatioByMoney = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentCommissionRateField_1OpenRatioByMoney_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingInstrumentCommissionRateField *arg1 = (CThostFtdcSyncingInstrumentCommissionRateField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentCommissionRateField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->OpenRatioByMoney);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentCommissionRateField_1OpenRatioByVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingInstrumentCommissionRateField *arg1 = (CThostFtdcSyncingInstrumentCommissionRateField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentCommissionRateField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->OpenRatioByVolume = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentCommissionRateField_1OpenRatioByVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingInstrumentCommissionRateField *arg1 = (CThostFtdcSyncingInstrumentCommissionRateField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentCommissionRateField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->OpenRatioByVolume);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentCommissionRateField_1CloseRatioByMoney_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingInstrumentCommissionRateField *arg1 = (CThostFtdcSyncingInstrumentCommissionRateField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentCommissionRateField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->CloseRatioByMoney = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentCommissionRateField_1CloseRatioByMoney_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingInstrumentCommissionRateField *arg1 = (CThostFtdcSyncingInstrumentCommissionRateField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentCommissionRateField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->CloseRatioByMoney);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentCommissionRateField_1CloseRatioByVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingInstrumentCommissionRateField *arg1 = (CThostFtdcSyncingInstrumentCommissionRateField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentCommissionRateField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->CloseRatioByVolume = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentCommissionRateField_1CloseRatioByVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingInstrumentCommissionRateField *arg1 = (CThostFtdcSyncingInstrumentCommissionRateField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentCommissionRateField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->CloseRatioByVolume);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentCommissionRateField_1CloseTodayRatioByMoney_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingInstrumentCommissionRateField *arg1 = (CThostFtdcSyncingInstrumentCommissionRateField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentCommissionRateField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->CloseTodayRatioByMoney = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentCommissionRateField_1CloseTodayRatioByMoney_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingInstrumentCommissionRateField *arg1 = (CThostFtdcSyncingInstrumentCommissionRateField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentCommissionRateField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->CloseTodayRatioByMoney);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentCommissionRateField_1CloseTodayRatioByVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcSyncingInstrumentCommissionRateField *arg1 = (CThostFtdcSyncingInstrumentCommissionRateField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentCommissionRateField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->CloseTodayRatioByVolume = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentCommissionRateField_1CloseTodayRatioByVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcSyncingInstrumentCommissionRateField *arg1 = (CThostFtdcSyncingInstrumentCommissionRateField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentCommissionRateField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->CloseTodayRatioByVolume);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcSyncingInstrumentCommissionRateField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcSyncingInstrumentCommissionRateField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcSyncingInstrumentCommissionRateField *)new CThostFtdcSyncingInstrumentCommissionRateField();
  *(CThostFtdcSyncingInstrumentCommissionRateField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcSyncingInstrumentCommissionRateField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcSyncingInstrumentCommissionRateField *arg1 = (CThostFtdcSyncingInstrumentCommissionRateField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcSyncingInstrumentCommissionRateField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentTradingRightField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingInstrumentTradingRightField *arg1 = (CThostFtdcSyncingInstrumentTradingRightField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentTradingRightField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentTradingRightField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingInstrumentTradingRightField *arg1 = (CThostFtdcSyncingInstrumentTradingRightField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentTradingRightField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentTradingRightField_1InvestorRange_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcSyncingInstrumentTradingRightField *arg1 = (CThostFtdcSyncingInstrumentTradingRightField *) 0 ;
  TThostFtdcInvestorRangeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentTradingRightField **)&jarg1; 
  arg2 = (TThostFtdcInvestorRangeType)jarg2; 
  if (arg1) (arg1)->InvestorRange = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentTradingRightField_1InvestorRange_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcSyncingInstrumentTradingRightField *arg1 = (CThostFtdcSyncingInstrumentTradingRightField *) 0 ;
  TThostFtdcInvestorRangeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentTradingRightField **)&jarg1; 
  result = (TThostFtdcInvestorRangeType) ((arg1)->InvestorRange);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentTradingRightField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingInstrumentTradingRightField *arg1 = (CThostFtdcSyncingInstrumentTradingRightField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentTradingRightField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentTradingRightField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingInstrumentTradingRightField *arg1 = (CThostFtdcSyncingInstrumentTradingRightField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentTradingRightField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentTradingRightField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncingInstrumentTradingRightField *arg1 = (CThostFtdcSyncingInstrumentTradingRightField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentTradingRightField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentTradingRightField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncingInstrumentTradingRightField *arg1 = (CThostFtdcSyncingInstrumentTradingRightField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentTradingRightField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentTradingRightField_1TradingRight_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcSyncingInstrumentTradingRightField *arg1 = (CThostFtdcSyncingInstrumentTradingRightField *) 0 ;
  TThostFtdcTradingRightType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentTradingRightField **)&jarg1; 
  arg2 = (TThostFtdcTradingRightType)jarg2; 
  if (arg1) (arg1)->TradingRight = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncingInstrumentTradingRightField_1TradingRight_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcSyncingInstrumentTradingRightField *arg1 = (CThostFtdcSyncingInstrumentTradingRightField *) 0 ;
  TThostFtdcTradingRightType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncingInstrumentTradingRightField **)&jarg1; 
  result = (TThostFtdcTradingRightType) ((arg1)->TradingRight);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcSyncingInstrumentTradingRightField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcSyncingInstrumentTradingRightField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcSyncingInstrumentTradingRightField *)new CThostFtdcSyncingInstrumentTradingRightField();
  *(CThostFtdcSyncingInstrumentTradingRightField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcSyncingInstrumentTradingRightField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcSyncingInstrumentTradingRightField *arg1 = (CThostFtdcSyncingInstrumentTradingRightField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcSyncingInstrumentTradingRightField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryOrderField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryOrderField *arg1 = (CThostFtdcQryOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryOrderField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryOrderField *arg1 = (CThostFtdcQryOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryOrderField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryOrderField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryOrderField *arg1 = (CThostFtdcQryOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryOrderField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryOrderField *arg1 = (CThostFtdcQryOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryOrderField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryOrderField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryOrderField *arg1 = (CThostFtdcQryOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryOrderField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryOrderField *arg1 = (CThostFtdcQryOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryOrderField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryOrderField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryOrderField *arg1 = (CThostFtdcQryOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryOrderField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryOrderField *arg1 = (CThostFtdcQryOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryOrderField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryOrderField_1OrderSysID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryOrderField *arg1 = (CThostFtdcQryOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderSysID, (const char *)arg2, 21-1);
      arg1->OrderSysID[21-1] = 0;
    } else {
      arg1->OrderSysID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryOrderField_1OrderSysID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryOrderField *arg1 = (CThostFtdcQryOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryOrderField **)&jarg1; 
  result = (char *) ((arg1)->OrderSysID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryOrderField_1InsertTimeStart_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryOrderField *arg1 = (CThostFtdcQryOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InsertTimeStart, (const char *)arg2, 9-1);
      arg1->InsertTimeStart[9-1] = 0;
    } else {
      arg1->InsertTimeStart[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryOrderField_1InsertTimeStart_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryOrderField *arg1 = (CThostFtdcQryOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryOrderField **)&jarg1; 
  result = (char *) ((arg1)->InsertTimeStart);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryOrderField_1InsertTimeEnd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryOrderField *arg1 = (CThostFtdcQryOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InsertTimeEnd, (const char *)arg2, 9-1);
      arg1->InsertTimeEnd[9-1] = 0;
    } else {
      arg1->InsertTimeEnd[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryOrderField_1InsertTimeEnd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryOrderField *arg1 = (CThostFtdcQryOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryOrderField **)&jarg1; 
  result = (char *) ((arg1)->InsertTimeEnd);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryOrderField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryOrderField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryOrderField *)new CThostFtdcQryOrderField();
  *(CThostFtdcQryOrderField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryOrderField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryOrderField *arg1 = (CThostFtdcQryOrderField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryOrderField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTradeField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryTradeField *arg1 = (CThostFtdcQryTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTradeField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryTradeField *arg1 = (CThostFtdcQryTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTradeField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTradeField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryTradeField *arg1 = (CThostFtdcQryTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTradeField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryTradeField *arg1 = (CThostFtdcQryTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTradeField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTradeField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryTradeField *arg1 = (CThostFtdcQryTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTradeField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryTradeField *arg1 = (CThostFtdcQryTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTradeField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTradeField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryTradeField *arg1 = (CThostFtdcQryTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTradeField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryTradeField *arg1 = (CThostFtdcQryTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTradeField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTradeField_1TradeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryTradeField *arg1 = (CThostFtdcQryTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeID, (const char *)arg2, 21-1);
      arg1->TradeID[21-1] = 0;
    } else {
      arg1->TradeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTradeField_1TradeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryTradeField *arg1 = (CThostFtdcQryTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTradeField **)&jarg1; 
  result = (char *) ((arg1)->TradeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTradeField_1TradeTimeStart_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryTradeField *arg1 = (CThostFtdcQryTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeTimeStart, (const char *)arg2, 9-1);
      arg1->TradeTimeStart[9-1] = 0;
    } else {
      arg1->TradeTimeStart[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTradeField_1TradeTimeStart_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryTradeField *arg1 = (CThostFtdcQryTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTradeField **)&jarg1; 
  result = (char *) ((arg1)->TradeTimeStart);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTradeField_1TradeTimeEnd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryTradeField *arg1 = (CThostFtdcQryTradeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTradeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeTimeEnd, (const char *)arg2, 9-1);
      arg1->TradeTimeEnd[9-1] = 0;
    } else {
      arg1->TradeTimeEnd[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTradeField_1TradeTimeEnd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryTradeField *arg1 = (CThostFtdcQryTradeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTradeField **)&jarg1; 
  result = (char *) ((arg1)->TradeTimeEnd);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryTradeField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryTradeField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryTradeField *)new CThostFtdcQryTradeField();
  *(CThostFtdcQryTradeField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryTradeField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryTradeField *arg1 = (CThostFtdcQryTradeField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryTradeField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInvestorPositionField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryInvestorPositionField *arg1 = (CThostFtdcQryInvestorPositionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInvestorPositionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInvestorPositionField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryInvestorPositionField *arg1 = (CThostFtdcQryInvestorPositionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInvestorPositionField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInvestorPositionField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryInvestorPositionField *arg1 = (CThostFtdcQryInvestorPositionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInvestorPositionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInvestorPositionField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryInvestorPositionField *arg1 = (CThostFtdcQryInvestorPositionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInvestorPositionField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInvestorPositionField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryInvestorPositionField *arg1 = (CThostFtdcQryInvestorPositionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInvestorPositionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInvestorPositionField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryInvestorPositionField *arg1 = (CThostFtdcQryInvestorPositionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInvestorPositionField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryInvestorPositionField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryInvestorPositionField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryInvestorPositionField *)new CThostFtdcQryInvestorPositionField();
  *(CThostFtdcQryInvestorPositionField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryInvestorPositionField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryInvestorPositionField *arg1 = (CThostFtdcQryInvestorPositionField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryInvestorPositionField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTradingAccountField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryTradingAccountField *arg1 = (CThostFtdcQryTradingAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTradingAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTradingAccountField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryTradingAccountField *arg1 = (CThostFtdcQryTradingAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTradingAccountField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTradingAccountField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryTradingAccountField *arg1 = (CThostFtdcQryTradingAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTradingAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTradingAccountField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryTradingAccountField *arg1 = (CThostFtdcQryTradingAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTradingAccountField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryTradingAccountField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryTradingAccountField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryTradingAccountField *)new CThostFtdcQryTradingAccountField();
  *(CThostFtdcQryTradingAccountField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryTradingAccountField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryTradingAccountField *arg1 = (CThostFtdcQryTradingAccountField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryTradingAccountField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInvestorField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryInvestorField *arg1 = (CThostFtdcQryInvestorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInvestorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInvestorField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryInvestorField *arg1 = (CThostFtdcQryInvestorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInvestorField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInvestorField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryInvestorField *arg1 = (CThostFtdcQryInvestorField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInvestorField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInvestorField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryInvestorField *arg1 = (CThostFtdcQryInvestorField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInvestorField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryInvestorField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryInvestorField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryInvestorField *)new CThostFtdcQryInvestorField();
  *(CThostFtdcQryInvestorField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryInvestorField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryInvestorField *arg1 = (CThostFtdcQryInvestorField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryInvestorField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTradingCodeField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryTradingCodeField *arg1 = (CThostFtdcQryTradingCodeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTradingCodeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTradingCodeField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryTradingCodeField *arg1 = (CThostFtdcQryTradingCodeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTradingCodeField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTradingCodeField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryTradingCodeField *arg1 = (CThostFtdcQryTradingCodeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTradingCodeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTradingCodeField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryTradingCodeField *arg1 = (CThostFtdcQryTradingCodeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTradingCodeField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTradingCodeField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryTradingCodeField *arg1 = (CThostFtdcQryTradingCodeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTradingCodeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTradingCodeField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryTradingCodeField *arg1 = (CThostFtdcQryTradingCodeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTradingCodeField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTradingCodeField_1ClientID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryTradingCodeField *arg1 = (CThostFtdcQryTradingCodeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTradingCodeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ClientID, (const char *)arg2, 11-1);
      arg1->ClientID[11-1] = 0;
    } else {
      arg1->ClientID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTradingCodeField_1ClientID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryTradingCodeField *arg1 = (CThostFtdcQryTradingCodeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTradingCodeField **)&jarg1; 
  result = (char *) ((arg1)->ClientID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTradingCodeField_1ClientIDType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcQryTradingCodeField *arg1 = (CThostFtdcQryTradingCodeField *) 0 ;
  TThostFtdcClientIDTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTradingCodeField **)&jarg1; 
  arg2 = (TThostFtdcClientIDTypeType)jarg2; 
  if (arg1) (arg1)->ClientIDType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTradingCodeField_1ClientIDType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcQryTradingCodeField *arg1 = (CThostFtdcQryTradingCodeField *) 0 ;
  TThostFtdcClientIDTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTradingCodeField **)&jarg1; 
  result = (TThostFtdcClientIDTypeType) ((arg1)->ClientIDType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryTradingCodeField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryTradingCodeField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryTradingCodeField *)new CThostFtdcQryTradingCodeField();
  *(CThostFtdcQryTradingCodeField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryTradingCodeField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryTradingCodeField *arg1 = (CThostFtdcQryTradingCodeField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryTradingCodeField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInvestorGroupField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryInvestorGroupField *arg1 = (CThostFtdcQryInvestorGroupField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInvestorGroupField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInvestorGroupField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryInvestorGroupField *arg1 = (CThostFtdcQryInvestorGroupField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInvestorGroupField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryInvestorGroupField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryInvestorGroupField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryInvestorGroupField *)new CThostFtdcQryInvestorGroupField();
  *(CThostFtdcQryInvestorGroupField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryInvestorGroupField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryInvestorGroupField *arg1 = (CThostFtdcQryInvestorGroupField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryInvestorGroupField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInstrumentMarginRateField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryInstrumentMarginRateField *arg1 = (CThostFtdcQryInstrumentMarginRateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInstrumentMarginRateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInstrumentMarginRateField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryInstrumentMarginRateField *arg1 = (CThostFtdcQryInstrumentMarginRateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInstrumentMarginRateField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInstrumentMarginRateField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryInstrumentMarginRateField *arg1 = (CThostFtdcQryInstrumentMarginRateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInstrumentMarginRateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInstrumentMarginRateField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryInstrumentMarginRateField *arg1 = (CThostFtdcQryInstrumentMarginRateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInstrumentMarginRateField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInstrumentMarginRateField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryInstrumentMarginRateField *arg1 = (CThostFtdcQryInstrumentMarginRateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInstrumentMarginRateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInstrumentMarginRateField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryInstrumentMarginRateField *arg1 = (CThostFtdcQryInstrumentMarginRateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInstrumentMarginRateField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInstrumentMarginRateField_1HedgeFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcQryInstrumentMarginRateField *arg1 = (CThostFtdcQryInstrumentMarginRateField *) 0 ;
  TThostFtdcHedgeFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInstrumentMarginRateField **)&jarg1; 
  arg2 = (TThostFtdcHedgeFlagType)jarg2; 
  if (arg1) (arg1)->HedgeFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInstrumentMarginRateField_1HedgeFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcQryInstrumentMarginRateField *arg1 = (CThostFtdcQryInstrumentMarginRateField *) 0 ;
  TThostFtdcHedgeFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInstrumentMarginRateField **)&jarg1; 
  result = (TThostFtdcHedgeFlagType) ((arg1)->HedgeFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryInstrumentMarginRateField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryInstrumentMarginRateField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryInstrumentMarginRateField *)new CThostFtdcQryInstrumentMarginRateField();
  *(CThostFtdcQryInstrumentMarginRateField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryInstrumentMarginRateField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryInstrumentMarginRateField *arg1 = (CThostFtdcQryInstrumentMarginRateField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryInstrumentMarginRateField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInstrumentCommissionRateField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryInstrumentCommissionRateField *arg1 = (CThostFtdcQryInstrumentCommissionRateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInstrumentCommissionRateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInstrumentCommissionRateField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryInstrumentCommissionRateField *arg1 = (CThostFtdcQryInstrumentCommissionRateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInstrumentCommissionRateField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInstrumentCommissionRateField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryInstrumentCommissionRateField *arg1 = (CThostFtdcQryInstrumentCommissionRateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInstrumentCommissionRateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInstrumentCommissionRateField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryInstrumentCommissionRateField *arg1 = (CThostFtdcQryInstrumentCommissionRateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInstrumentCommissionRateField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInstrumentCommissionRateField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryInstrumentCommissionRateField *arg1 = (CThostFtdcQryInstrumentCommissionRateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInstrumentCommissionRateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInstrumentCommissionRateField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryInstrumentCommissionRateField *arg1 = (CThostFtdcQryInstrumentCommissionRateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInstrumentCommissionRateField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryInstrumentCommissionRateField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryInstrumentCommissionRateField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryInstrumentCommissionRateField *)new CThostFtdcQryInstrumentCommissionRateField();
  *(CThostFtdcQryInstrumentCommissionRateField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryInstrumentCommissionRateField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryInstrumentCommissionRateField *arg1 = (CThostFtdcQryInstrumentCommissionRateField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryInstrumentCommissionRateField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInstrumentTradingRightField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryInstrumentTradingRightField *arg1 = (CThostFtdcQryInstrumentTradingRightField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInstrumentTradingRightField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInstrumentTradingRightField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryInstrumentTradingRightField *arg1 = (CThostFtdcQryInstrumentTradingRightField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInstrumentTradingRightField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInstrumentTradingRightField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryInstrumentTradingRightField *arg1 = (CThostFtdcQryInstrumentTradingRightField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInstrumentTradingRightField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInstrumentTradingRightField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryInstrumentTradingRightField *arg1 = (CThostFtdcQryInstrumentTradingRightField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInstrumentTradingRightField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInstrumentTradingRightField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryInstrumentTradingRightField *arg1 = (CThostFtdcQryInstrumentTradingRightField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInstrumentTradingRightField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInstrumentTradingRightField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryInstrumentTradingRightField *arg1 = (CThostFtdcQryInstrumentTradingRightField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInstrumentTradingRightField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryInstrumentTradingRightField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryInstrumentTradingRightField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryInstrumentTradingRightField *)new CThostFtdcQryInstrumentTradingRightField();
  *(CThostFtdcQryInstrumentTradingRightField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryInstrumentTradingRightField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryInstrumentTradingRightField *arg1 = (CThostFtdcQryInstrumentTradingRightField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryInstrumentTradingRightField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryBrokerField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryBrokerField *arg1 = (CThostFtdcQryBrokerField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryBrokerField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryBrokerField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryBrokerField *arg1 = (CThostFtdcQryBrokerField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryBrokerField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryBrokerField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryBrokerField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryBrokerField *)new CThostFtdcQryBrokerField();
  *(CThostFtdcQryBrokerField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryBrokerField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryBrokerField *arg1 = (CThostFtdcQryBrokerField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryBrokerField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTraderField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryTraderField *arg1 = (CThostFtdcQryTraderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTraderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTraderField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryTraderField *arg1 = (CThostFtdcQryTraderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTraderField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTraderField_1ParticipantID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryTraderField *arg1 = (CThostFtdcQryTraderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTraderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ParticipantID, (const char *)arg2, 11-1);
      arg1->ParticipantID[11-1] = 0;
    } else {
      arg1->ParticipantID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTraderField_1ParticipantID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryTraderField *arg1 = (CThostFtdcQryTraderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTraderField **)&jarg1; 
  result = (char *) ((arg1)->ParticipantID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTraderField_1TraderID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryTraderField *arg1 = (CThostFtdcQryTraderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTraderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TraderID, (const char *)arg2, 21-1);
      arg1->TraderID[21-1] = 0;
    } else {
      arg1->TraderID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTraderField_1TraderID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryTraderField *arg1 = (CThostFtdcQryTraderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTraderField **)&jarg1; 
  result = (char *) ((arg1)->TraderID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryTraderField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryTraderField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryTraderField *)new CThostFtdcQryTraderField();
  *(CThostFtdcQryTraderField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryTraderField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryTraderField *arg1 = (CThostFtdcQryTraderField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryTraderField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQrySuperUserFunctionField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQrySuperUserFunctionField *arg1 = (CThostFtdcQrySuperUserFunctionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQrySuperUserFunctionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQrySuperUserFunctionField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQrySuperUserFunctionField *arg1 = (CThostFtdcQrySuperUserFunctionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQrySuperUserFunctionField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQrySuperUserFunctionField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQrySuperUserFunctionField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQrySuperUserFunctionField *)new CThostFtdcQrySuperUserFunctionField();
  *(CThostFtdcQrySuperUserFunctionField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQrySuperUserFunctionField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQrySuperUserFunctionField *arg1 = (CThostFtdcQrySuperUserFunctionField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQrySuperUserFunctionField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryUserSessionField_1FrontID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcQryUserSessionField *arg1 = (CThostFtdcQryUserSessionField *) 0 ;
  TThostFtdcFrontIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryUserSessionField **)&jarg1; 
  arg2 = (TThostFtdcFrontIDType)jarg2; 
  if (arg1) (arg1)->FrontID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryUserSessionField_1FrontID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcQryUserSessionField *arg1 = (CThostFtdcQryUserSessionField *) 0 ;
  TThostFtdcFrontIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryUserSessionField **)&jarg1; 
  result = (TThostFtdcFrontIDType) ((arg1)->FrontID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryUserSessionField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcQryUserSessionField *arg1 = (CThostFtdcQryUserSessionField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryUserSessionField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryUserSessionField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcQryUserSessionField *arg1 = (CThostFtdcQryUserSessionField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryUserSessionField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryUserSessionField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryUserSessionField *arg1 = (CThostFtdcQryUserSessionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryUserSessionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryUserSessionField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryUserSessionField *arg1 = (CThostFtdcQryUserSessionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryUserSessionField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryUserSessionField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryUserSessionField *arg1 = (CThostFtdcQryUserSessionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryUserSessionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryUserSessionField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryUserSessionField *arg1 = (CThostFtdcQryUserSessionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryUserSessionField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryUserSessionField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryUserSessionField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryUserSessionField *)new CThostFtdcQryUserSessionField();
  *(CThostFtdcQryUserSessionField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryUserSessionField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryUserSessionField *arg1 = (CThostFtdcQryUserSessionField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryUserSessionField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryPartBrokerField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryPartBrokerField *arg1 = (CThostFtdcQryPartBrokerField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryPartBrokerField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryPartBrokerField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryPartBrokerField *arg1 = (CThostFtdcQryPartBrokerField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryPartBrokerField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryPartBrokerField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryPartBrokerField *arg1 = (CThostFtdcQryPartBrokerField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryPartBrokerField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryPartBrokerField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryPartBrokerField *arg1 = (CThostFtdcQryPartBrokerField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryPartBrokerField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryPartBrokerField_1ParticipantID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryPartBrokerField *arg1 = (CThostFtdcQryPartBrokerField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryPartBrokerField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ParticipantID, (const char *)arg2, 11-1);
      arg1->ParticipantID[11-1] = 0;
    } else {
      arg1->ParticipantID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryPartBrokerField_1ParticipantID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryPartBrokerField *arg1 = (CThostFtdcQryPartBrokerField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryPartBrokerField **)&jarg1; 
  result = (char *) ((arg1)->ParticipantID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryPartBrokerField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryPartBrokerField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryPartBrokerField *)new CThostFtdcQryPartBrokerField();
  *(CThostFtdcQryPartBrokerField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryPartBrokerField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryPartBrokerField *arg1 = (CThostFtdcQryPartBrokerField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryPartBrokerField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryFrontStatusField_1FrontID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcQryFrontStatusField *arg1 = (CThostFtdcQryFrontStatusField *) 0 ;
  TThostFtdcFrontIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryFrontStatusField **)&jarg1; 
  arg2 = (TThostFtdcFrontIDType)jarg2; 
  if (arg1) (arg1)->FrontID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryFrontStatusField_1FrontID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcQryFrontStatusField *arg1 = (CThostFtdcQryFrontStatusField *) 0 ;
  TThostFtdcFrontIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryFrontStatusField **)&jarg1; 
  result = (TThostFtdcFrontIDType) ((arg1)->FrontID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryFrontStatusField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryFrontStatusField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryFrontStatusField *)new CThostFtdcQryFrontStatusField();
  *(CThostFtdcQryFrontStatusField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryFrontStatusField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryFrontStatusField *arg1 = (CThostFtdcQryFrontStatusField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryFrontStatusField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeOrderField_1ParticipantID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryExchangeOrderField *arg1 = (CThostFtdcQryExchangeOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ParticipantID, (const char *)arg2, 11-1);
      arg1->ParticipantID[11-1] = 0;
    } else {
      arg1->ParticipantID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeOrderField_1ParticipantID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryExchangeOrderField *arg1 = (CThostFtdcQryExchangeOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeOrderField **)&jarg1; 
  result = (char *) ((arg1)->ParticipantID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeOrderField_1ClientID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryExchangeOrderField *arg1 = (CThostFtdcQryExchangeOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ClientID, (const char *)arg2, 11-1);
      arg1->ClientID[11-1] = 0;
    } else {
      arg1->ClientID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeOrderField_1ClientID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryExchangeOrderField *arg1 = (CThostFtdcQryExchangeOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeOrderField **)&jarg1; 
  result = (char *) ((arg1)->ClientID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeOrderField_1ExchangeInstID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryExchangeOrderField *arg1 = (CThostFtdcQryExchangeOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeInstID, (const char *)arg2, 31-1);
      arg1->ExchangeInstID[31-1] = 0;
    } else {
      arg1->ExchangeInstID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeOrderField_1ExchangeInstID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryExchangeOrderField *arg1 = (CThostFtdcQryExchangeOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeOrderField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeInstID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeOrderField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryExchangeOrderField *arg1 = (CThostFtdcQryExchangeOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeOrderField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryExchangeOrderField *arg1 = (CThostFtdcQryExchangeOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeOrderField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeOrderField_1TraderID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryExchangeOrderField *arg1 = (CThostFtdcQryExchangeOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TraderID, (const char *)arg2, 21-1);
      arg1->TraderID[21-1] = 0;
    } else {
      arg1->TraderID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeOrderField_1TraderID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryExchangeOrderField *arg1 = (CThostFtdcQryExchangeOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeOrderField **)&jarg1; 
  result = (char *) ((arg1)->TraderID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryExchangeOrderField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryExchangeOrderField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryExchangeOrderField *)new CThostFtdcQryExchangeOrderField();
  *(CThostFtdcQryExchangeOrderField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryExchangeOrderField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryExchangeOrderField *arg1 = (CThostFtdcQryExchangeOrderField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryExchangeOrderField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryOrderActionField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryOrderActionField *arg1 = (CThostFtdcQryOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryOrderActionField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryOrderActionField *arg1 = (CThostFtdcQryOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryOrderActionField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryOrderActionField *arg1 = (CThostFtdcQryOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryOrderActionField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryOrderActionField *arg1 = (CThostFtdcQryOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryOrderActionField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryOrderActionField *arg1 = (CThostFtdcQryOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryOrderActionField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryOrderActionField *arg1 = (CThostFtdcQryOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryOrderActionField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryOrderActionField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryOrderActionField *)new CThostFtdcQryOrderActionField();
  *(CThostFtdcQryOrderActionField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryOrderActionField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryOrderActionField *arg1 = (CThostFtdcQryOrderActionField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryOrderActionField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeOrderActionField_1ParticipantID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryExchangeOrderActionField *arg1 = (CThostFtdcQryExchangeOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ParticipantID, (const char *)arg2, 11-1);
      arg1->ParticipantID[11-1] = 0;
    } else {
      arg1->ParticipantID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeOrderActionField_1ParticipantID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryExchangeOrderActionField *arg1 = (CThostFtdcQryExchangeOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->ParticipantID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeOrderActionField_1ClientID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryExchangeOrderActionField *arg1 = (CThostFtdcQryExchangeOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ClientID, (const char *)arg2, 11-1);
      arg1->ClientID[11-1] = 0;
    } else {
      arg1->ClientID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeOrderActionField_1ClientID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryExchangeOrderActionField *arg1 = (CThostFtdcQryExchangeOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->ClientID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeOrderActionField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryExchangeOrderActionField *arg1 = (CThostFtdcQryExchangeOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeOrderActionField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryExchangeOrderActionField *arg1 = (CThostFtdcQryExchangeOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeOrderActionField_1TraderID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryExchangeOrderActionField *arg1 = (CThostFtdcQryExchangeOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TraderID, (const char *)arg2, 21-1);
      arg1->TraderID[21-1] = 0;
    } else {
      arg1->TraderID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeOrderActionField_1TraderID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryExchangeOrderActionField *arg1 = (CThostFtdcQryExchangeOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->TraderID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryExchangeOrderActionField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryExchangeOrderActionField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryExchangeOrderActionField *)new CThostFtdcQryExchangeOrderActionField();
  *(CThostFtdcQryExchangeOrderActionField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryExchangeOrderActionField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryExchangeOrderActionField *arg1 = (CThostFtdcQryExchangeOrderActionField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryExchangeOrderActionField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQrySuperUserField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQrySuperUserField *arg1 = (CThostFtdcQrySuperUserField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQrySuperUserField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQrySuperUserField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQrySuperUserField *arg1 = (CThostFtdcQrySuperUserField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQrySuperUserField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQrySuperUserField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQrySuperUserField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQrySuperUserField *)new CThostFtdcQrySuperUserField();
  *(CThostFtdcQrySuperUserField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQrySuperUserField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQrySuperUserField *arg1 = (CThostFtdcQrySuperUserField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQrySuperUserField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryExchangeField *arg1 = (CThostFtdcQryExchangeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryExchangeField *arg1 = (CThostFtdcQryExchangeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryExchangeField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryExchangeField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryExchangeField *)new CThostFtdcQryExchangeField();
  *(CThostFtdcQryExchangeField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryExchangeField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryExchangeField *arg1 = (CThostFtdcQryExchangeField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryExchangeField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryProductField_1ProductID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryProductField *arg1 = (CThostFtdcQryProductField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryProductField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ProductID, (const char *)arg2, 31-1);
      arg1->ProductID[31-1] = 0;
    } else {
      arg1->ProductID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryProductField_1ProductID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryProductField *arg1 = (CThostFtdcQryProductField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryProductField **)&jarg1; 
  result = (char *) ((arg1)->ProductID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryProductField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryProductField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryProductField *)new CThostFtdcQryProductField();
  *(CThostFtdcQryProductField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryProductField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryProductField *arg1 = (CThostFtdcQryProductField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryProductField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInstrumentField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryInstrumentField *arg1 = (CThostFtdcQryInstrumentField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInstrumentField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInstrumentField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryInstrumentField *arg1 = (CThostFtdcQryInstrumentField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInstrumentField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInstrumentField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryInstrumentField *arg1 = (CThostFtdcQryInstrumentField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInstrumentField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInstrumentField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryInstrumentField *arg1 = (CThostFtdcQryInstrumentField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInstrumentField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInstrumentField_1ExchangeInstID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryInstrumentField *arg1 = (CThostFtdcQryInstrumentField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInstrumentField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeInstID, (const char *)arg2, 31-1);
      arg1->ExchangeInstID[31-1] = 0;
    } else {
      arg1->ExchangeInstID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInstrumentField_1ExchangeInstID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryInstrumentField *arg1 = (CThostFtdcQryInstrumentField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInstrumentField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeInstID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInstrumentField_1ProductID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryInstrumentField *arg1 = (CThostFtdcQryInstrumentField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInstrumentField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ProductID, (const char *)arg2, 31-1);
      arg1->ProductID[31-1] = 0;
    } else {
      arg1->ProductID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInstrumentField_1ProductID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryInstrumentField *arg1 = (CThostFtdcQryInstrumentField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInstrumentField **)&jarg1; 
  result = (char *) ((arg1)->ProductID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryInstrumentField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryInstrumentField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryInstrumentField *)new CThostFtdcQryInstrumentField();
  *(CThostFtdcQryInstrumentField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryInstrumentField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryInstrumentField *arg1 = (CThostFtdcQryInstrumentField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryInstrumentField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryDepthMarketDataField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryDepthMarketDataField *arg1 = (CThostFtdcQryDepthMarketDataField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryDepthMarketDataField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryDepthMarketDataField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryDepthMarketDataField *arg1 = (CThostFtdcQryDepthMarketDataField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryDepthMarketDataField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryDepthMarketDataField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryDepthMarketDataField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryDepthMarketDataField *)new CThostFtdcQryDepthMarketDataField();
  *(CThostFtdcQryDepthMarketDataField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryDepthMarketDataField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryDepthMarketDataField *arg1 = (CThostFtdcQryDepthMarketDataField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryDepthMarketDataField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryBrokerUserField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryBrokerUserField *arg1 = (CThostFtdcQryBrokerUserField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryBrokerUserField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryBrokerUserField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryBrokerUserField *arg1 = (CThostFtdcQryBrokerUserField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryBrokerUserField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryBrokerUserField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryBrokerUserField *arg1 = (CThostFtdcQryBrokerUserField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryBrokerUserField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryBrokerUserField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryBrokerUserField *arg1 = (CThostFtdcQryBrokerUserField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryBrokerUserField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryBrokerUserField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryBrokerUserField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryBrokerUserField *)new CThostFtdcQryBrokerUserField();
  *(CThostFtdcQryBrokerUserField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryBrokerUserField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryBrokerUserField *arg1 = (CThostFtdcQryBrokerUserField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryBrokerUserField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryBrokerUserFunctionField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryBrokerUserFunctionField *arg1 = (CThostFtdcQryBrokerUserFunctionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryBrokerUserFunctionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryBrokerUserFunctionField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryBrokerUserFunctionField *arg1 = (CThostFtdcQryBrokerUserFunctionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryBrokerUserFunctionField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryBrokerUserFunctionField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryBrokerUserFunctionField *arg1 = (CThostFtdcQryBrokerUserFunctionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryBrokerUserFunctionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryBrokerUserFunctionField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryBrokerUserFunctionField *arg1 = (CThostFtdcQryBrokerUserFunctionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryBrokerUserFunctionField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryBrokerUserFunctionField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryBrokerUserFunctionField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryBrokerUserFunctionField *)new CThostFtdcQryBrokerUserFunctionField();
  *(CThostFtdcQryBrokerUserFunctionField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryBrokerUserFunctionField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryBrokerUserFunctionField *arg1 = (CThostFtdcQryBrokerUserFunctionField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryBrokerUserFunctionField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTraderOfferField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryTraderOfferField *arg1 = (CThostFtdcQryTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTraderOfferField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryTraderOfferField *arg1 = (CThostFtdcQryTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTraderOfferField_1ParticipantID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryTraderOfferField *arg1 = (CThostFtdcQryTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ParticipantID, (const char *)arg2, 11-1);
      arg1->ParticipantID[11-1] = 0;
    } else {
      arg1->ParticipantID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTraderOfferField_1ParticipantID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryTraderOfferField *arg1 = (CThostFtdcQryTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->ParticipantID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTraderOfferField_1TraderID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryTraderOfferField *arg1 = (CThostFtdcQryTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TraderID, (const char *)arg2, 21-1);
      arg1->TraderID[21-1] = 0;
    } else {
      arg1->TraderID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTraderOfferField_1TraderID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryTraderOfferField *arg1 = (CThostFtdcQryTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->TraderID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryTraderOfferField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryTraderOfferField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryTraderOfferField *)new CThostFtdcQryTraderOfferField();
  *(CThostFtdcQryTraderOfferField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryTraderOfferField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryTraderOfferField *arg1 = (CThostFtdcQryTraderOfferField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryTraderOfferField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQrySyncDepositField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQrySyncDepositField *arg1 = (CThostFtdcQrySyncDepositField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQrySyncDepositField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQrySyncDepositField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQrySyncDepositField *arg1 = (CThostFtdcQrySyncDepositField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQrySyncDepositField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQrySyncDepositField_1DepositSeqNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQrySyncDepositField *arg1 = (CThostFtdcQrySyncDepositField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQrySyncDepositField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->DepositSeqNo, (const char *)arg2, 15-1);
      arg1->DepositSeqNo[15-1] = 0;
    } else {
      arg1->DepositSeqNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQrySyncDepositField_1DepositSeqNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQrySyncDepositField *arg1 = (CThostFtdcQrySyncDepositField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQrySyncDepositField **)&jarg1; 
  result = (char *) ((arg1)->DepositSeqNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQrySyncDepositField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQrySyncDepositField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQrySyncDepositField *)new CThostFtdcQrySyncDepositField();
  *(CThostFtdcQrySyncDepositField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQrySyncDepositField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQrySyncDepositField *arg1 = (CThostFtdcQrySyncDepositField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQrySyncDepositField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQrySettlementInfoField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQrySettlementInfoField *arg1 = (CThostFtdcQrySettlementInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQrySettlementInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQrySettlementInfoField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQrySettlementInfoField *arg1 = (CThostFtdcQrySettlementInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQrySettlementInfoField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQrySettlementInfoField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQrySettlementInfoField *arg1 = (CThostFtdcQrySettlementInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQrySettlementInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQrySettlementInfoField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQrySettlementInfoField *arg1 = (CThostFtdcQrySettlementInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQrySettlementInfoField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQrySettlementInfoField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQrySettlementInfoField *arg1 = (CThostFtdcQrySettlementInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQrySettlementInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQrySettlementInfoField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQrySettlementInfoField *arg1 = (CThostFtdcQrySettlementInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQrySettlementInfoField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQrySettlementInfoField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQrySettlementInfoField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQrySettlementInfoField *)new CThostFtdcQrySettlementInfoField();
  *(CThostFtdcQrySettlementInfoField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQrySettlementInfoField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQrySettlementInfoField *arg1 = (CThostFtdcQrySettlementInfoField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQrySettlementInfoField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeMarginRateField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryExchangeMarginRateField *arg1 = (CThostFtdcQryExchangeMarginRateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeMarginRateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeMarginRateField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryExchangeMarginRateField *arg1 = (CThostFtdcQryExchangeMarginRateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeMarginRateField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeMarginRateField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryExchangeMarginRateField *arg1 = (CThostFtdcQryExchangeMarginRateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeMarginRateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeMarginRateField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryExchangeMarginRateField *arg1 = (CThostFtdcQryExchangeMarginRateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeMarginRateField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeMarginRateField_1HedgeFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcQryExchangeMarginRateField *arg1 = (CThostFtdcQryExchangeMarginRateField *) 0 ;
  TThostFtdcHedgeFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeMarginRateField **)&jarg1; 
  arg2 = (TThostFtdcHedgeFlagType)jarg2; 
  if (arg1) (arg1)->HedgeFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeMarginRateField_1HedgeFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcQryExchangeMarginRateField *arg1 = (CThostFtdcQryExchangeMarginRateField *) 0 ;
  TThostFtdcHedgeFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeMarginRateField **)&jarg1; 
  result = (TThostFtdcHedgeFlagType) ((arg1)->HedgeFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryExchangeMarginRateField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryExchangeMarginRateField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryExchangeMarginRateField *)new CThostFtdcQryExchangeMarginRateField();
  *(CThostFtdcQryExchangeMarginRateField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryExchangeMarginRateField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryExchangeMarginRateField *arg1 = (CThostFtdcQryExchangeMarginRateField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryExchangeMarginRateField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeMarginRateAdjustField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryExchangeMarginRateAdjustField *arg1 = (CThostFtdcQryExchangeMarginRateAdjustField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeMarginRateAdjustField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeMarginRateAdjustField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryExchangeMarginRateAdjustField *arg1 = (CThostFtdcQryExchangeMarginRateAdjustField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeMarginRateAdjustField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeMarginRateAdjustField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryExchangeMarginRateAdjustField *arg1 = (CThostFtdcQryExchangeMarginRateAdjustField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeMarginRateAdjustField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeMarginRateAdjustField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryExchangeMarginRateAdjustField *arg1 = (CThostFtdcQryExchangeMarginRateAdjustField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeMarginRateAdjustField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeMarginRateAdjustField_1HedgeFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcQryExchangeMarginRateAdjustField *arg1 = (CThostFtdcQryExchangeMarginRateAdjustField *) 0 ;
  TThostFtdcHedgeFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeMarginRateAdjustField **)&jarg1; 
  arg2 = (TThostFtdcHedgeFlagType)jarg2; 
  if (arg1) (arg1)->HedgeFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeMarginRateAdjustField_1HedgeFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcQryExchangeMarginRateAdjustField *arg1 = (CThostFtdcQryExchangeMarginRateAdjustField *) 0 ;
  TThostFtdcHedgeFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeMarginRateAdjustField **)&jarg1; 
  result = (TThostFtdcHedgeFlagType) ((arg1)->HedgeFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryExchangeMarginRateAdjustField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryExchangeMarginRateAdjustField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryExchangeMarginRateAdjustField *)new CThostFtdcQryExchangeMarginRateAdjustField();
  *(CThostFtdcQryExchangeMarginRateAdjustField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryExchangeMarginRateAdjustField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryExchangeMarginRateAdjustField *arg1 = (CThostFtdcQryExchangeMarginRateAdjustField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryExchangeMarginRateAdjustField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryHisOrderField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryHisOrderField *arg1 = (CThostFtdcQryHisOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryHisOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryHisOrderField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryHisOrderField *arg1 = (CThostFtdcQryHisOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryHisOrderField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryHisOrderField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryHisOrderField *arg1 = (CThostFtdcQryHisOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryHisOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryHisOrderField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryHisOrderField *arg1 = (CThostFtdcQryHisOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryHisOrderField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryHisOrderField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryHisOrderField *arg1 = (CThostFtdcQryHisOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryHisOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryHisOrderField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryHisOrderField *arg1 = (CThostFtdcQryHisOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryHisOrderField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryHisOrderField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryHisOrderField *arg1 = (CThostFtdcQryHisOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryHisOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryHisOrderField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryHisOrderField *arg1 = (CThostFtdcQryHisOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryHisOrderField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryHisOrderField_1OrderSysID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryHisOrderField *arg1 = (CThostFtdcQryHisOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryHisOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderSysID, (const char *)arg2, 21-1);
      arg1->OrderSysID[21-1] = 0;
    } else {
      arg1->OrderSysID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryHisOrderField_1OrderSysID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryHisOrderField *arg1 = (CThostFtdcQryHisOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryHisOrderField **)&jarg1; 
  result = (char *) ((arg1)->OrderSysID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryHisOrderField_1InsertTimeStart_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryHisOrderField *arg1 = (CThostFtdcQryHisOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryHisOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InsertTimeStart, (const char *)arg2, 9-1);
      arg1->InsertTimeStart[9-1] = 0;
    } else {
      arg1->InsertTimeStart[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryHisOrderField_1InsertTimeStart_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryHisOrderField *arg1 = (CThostFtdcQryHisOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryHisOrderField **)&jarg1; 
  result = (char *) ((arg1)->InsertTimeStart);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryHisOrderField_1InsertTimeEnd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryHisOrderField *arg1 = (CThostFtdcQryHisOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryHisOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InsertTimeEnd, (const char *)arg2, 9-1);
      arg1->InsertTimeEnd[9-1] = 0;
    } else {
      arg1->InsertTimeEnd[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryHisOrderField_1InsertTimeEnd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryHisOrderField *arg1 = (CThostFtdcQryHisOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryHisOrderField **)&jarg1; 
  result = (char *) ((arg1)->InsertTimeEnd);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryHisOrderField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryHisOrderField *arg1 = (CThostFtdcQryHisOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryHisOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryHisOrderField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryHisOrderField *arg1 = (CThostFtdcQryHisOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryHisOrderField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryHisOrderField_1SettlementID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcQryHisOrderField *arg1 = (CThostFtdcQryHisOrderField *) 0 ;
  TThostFtdcSettlementIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryHisOrderField **)&jarg1; 
  arg2 = (TThostFtdcSettlementIDType)jarg2; 
  if (arg1) (arg1)->SettlementID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryHisOrderField_1SettlementID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcQryHisOrderField *arg1 = (CThostFtdcQryHisOrderField *) 0 ;
  TThostFtdcSettlementIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryHisOrderField **)&jarg1; 
  result = (TThostFtdcSettlementIDType) ((arg1)->SettlementID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryHisOrderField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryHisOrderField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryHisOrderField *)new CThostFtdcQryHisOrderField();
  *(CThostFtdcQryHisOrderField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryHisOrderField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryHisOrderField *arg1 = (CThostFtdcQryHisOrderField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryHisOrderField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1ExchangeInstID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeInstID, (const char *)arg2, 31-1);
      arg1->ExchangeInstID[31-1] = 0;
    } else {
      arg1->ExchangeInstID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1ExchangeInstID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeInstID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1LastPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->LastPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1LastPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->LastPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1PreSettlementPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->PreSettlementPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1PreSettlementPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->PreSettlementPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1PreClosePrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->PreClosePrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1PreClosePrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->PreClosePrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1PreOpenInterest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcLargeVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcLargeVolumeType)jarg2; 
  if (arg1) (arg1)->PreOpenInterest = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1PreOpenInterest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcLargeVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  result = (TThostFtdcLargeVolumeType) ((arg1)->PreOpenInterest);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1OpenPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->OpenPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1OpenPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->OpenPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1HighestPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->HighestPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1HighestPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->HighestPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1LowestPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->LowestPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1LowestPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->LowestPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1Volume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->Volume = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1Volume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->Volume);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1Turnover_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Turnover = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1Turnover_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Turnover);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1OpenInterest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcLargeVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcLargeVolumeType)jarg2; 
  if (arg1) (arg1)->OpenInterest = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1OpenInterest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcLargeVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  result = (TThostFtdcLargeVolumeType) ((arg1)->OpenInterest);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1ClosePrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->ClosePrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1ClosePrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->ClosePrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1SettlementPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->SettlementPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1SettlementPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->SettlementPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1UpperLimitPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->UpperLimitPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1UpperLimitPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->UpperLimitPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1LowerLimitPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->LowerLimitPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1LowerLimitPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->LowerLimitPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1PreDelta_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->PreDelta = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1PreDelta_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->PreDelta);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1CurrDelta_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->CurrDelta = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1CurrDelta_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->CurrDelta);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1UpdateTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UpdateTime, (const char *)arg2, 9-1);
      arg1->UpdateTime[9-1] = 0;
    } else {
      arg1->UpdateTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1UpdateTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  result = (char *) ((arg1)->UpdateTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1UpdateMillisec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcMillisecType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  arg2 = (TThostFtdcMillisecType)jarg2; 
  if (arg1) (arg1)->UpdateMillisec = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1UpdateMillisec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  TThostFtdcMillisecType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  result = (TThostFtdcMillisecType) ((arg1)->UpdateMillisec);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1ActionDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ActionDay, (const char *)arg2, 9-1);
      arg1->ActionDay[9-1] = 0;
    } else {
      arg1->ActionDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataField_1ActionDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  result = (char *) ((arg1)->ActionDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcMarketDataField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcMarketDataField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcMarketDataField *)new CThostFtdcMarketDataField();
  *(CThostFtdcMarketDataField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcMarketDataField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcMarketDataField *arg1 = (CThostFtdcMarketDataField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcMarketDataField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBaseField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMarketDataBaseField *arg1 = (CThostFtdcMarketDataBaseField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBaseField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBaseField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMarketDataBaseField *arg1 = (CThostFtdcMarketDataBaseField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBaseField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBaseField_1PreSettlementPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataBaseField *arg1 = (CThostFtdcMarketDataBaseField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBaseField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->PreSettlementPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBaseField_1PreSettlementPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataBaseField *arg1 = (CThostFtdcMarketDataBaseField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBaseField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->PreSettlementPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBaseField_1PreClosePrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataBaseField *arg1 = (CThostFtdcMarketDataBaseField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBaseField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->PreClosePrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBaseField_1PreClosePrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataBaseField *arg1 = (CThostFtdcMarketDataBaseField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBaseField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->PreClosePrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBaseField_1PreOpenInterest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataBaseField *arg1 = (CThostFtdcMarketDataBaseField *) 0 ;
  TThostFtdcLargeVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBaseField **)&jarg1; 
  arg2 = (TThostFtdcLargeVolumeType)jarg2; 
  if (arg1) (arg1)->PreOpenInterest = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBaseField_1PreOpenInterest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataBaseField *arg1 = (CThostFtdcMarketDataBaseField *) 0 ;
  TThostFtdcLargeVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBaseField **)&jarg1; 
  result = (TThostFtdcLargeVolumeType) ((arg1)->PreOpenInterest);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBaseField_1PreDelta_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataBaseField *arg1 = (CThostFtdcMarketDataBaseField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBaseField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->PreDelta = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBaseField_1PreDelta_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataBaseField *arg1 = (CThostFtdcMarketDataBaseField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBaseField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->PreDelta);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcMarketDataBaseField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcMarketDataBaseField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcMarketDataBaseField *)new CThostFtdcMarketDataBaseField();
  *(CThostFtdcMarketDataBaseField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcMarketDataBaseField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcMarketDataBaseField *arg1 = (CThostFtdcMarketDataBaseField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcMarketDataBaseField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataStaticField_1OpenPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataStaticField *arg1 = (CThostFtdcMarketDataStaticField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataStaticField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->OpenPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataStaticField_1OpenPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataStaticField *arg1 = (CThostFtdcMarketDataStaticField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataStaticField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->OpenPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataStaticField_1HighestPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataStaticField *arg1 = (CThostFtdcMarketDataStaticField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataStaticField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->HighestPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataStaticField_1HighestPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataStaticField *arg1 = (CThostFtdcMarketDataStaticField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataStaticField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->HighestPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataStaticField_1LowestPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataStaticField *arg1 = (CThostFtdcMarketDataStaticField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataStaticField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->LowestPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataStaticField_1LowestPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataStaticField *arg1 = (CThostFtdcMarketDataStaticField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataStaticField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->LowestPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataStaticField_1ClosePrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataStaticField *arg1 = (CThostFtdcMarketDataStaticField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataStaticField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->ClosePrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataStaticField_1ClosePrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataStaticField *arg1 = (CThostFtdcMarketDataStaticField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataStaticField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->ClosePrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataStaticField_1UpperLimitPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataStaticField *arg1 = (CThostFtdcMarketDataStaticField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataStaticField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->UpperLimitPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataStaticField_1UpperLimitPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataStaticField *arg1 = (CThostFtdcMarketDataStaticField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataStaticField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->UpperLimitPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataStaticField_1LowerLimitPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataStaticField *arg1 = (CThostFtdcMarketDataStaticField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataStaticField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->LowerLimitPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataStaticField_1LowerLimitPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataStaticField *arg1 = (CThostFtdcMarketDataStaticField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataStaticField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->LowerLimitPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataStaticField_1SettlementPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataStaticField *arg1 = (CThostFtdcMarketDataStaticField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataStaticField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->SettlementPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataStaticField_1SettlementPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataStaticField *arg1 = (CThostFtdcMarketDataStaticField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataStaticField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->SettlementPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataStaticField_1CurrDelta_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataStaticField *arg1 = (CThostFtdcMarketDataStaticField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataStaticField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->CurrDelta = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataStaticField_1CurrDelta_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataStaticField *arg1 = (CThostFtdcMarketDataStaticField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataStaticField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->CurrDelta);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcMarketDataStaticField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcMarketDataStaticField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcMarketDataStaticField *)new CThostFtdcMarketDataStaticField();
  *(CThostFtdcMarketDataStaticField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcMarketDataStaticField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcMarketDataStaticField *arg1 = (CThostFtdcMarketDataStaticField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcMarketDataStaticField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataLastMatchField_1LastPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataLastMatchField *arg1 = (CThostFtdcMarketDataLastMatchField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataLastMatchField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->LastPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataLastMatchField_1LastPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataLastMatchField *arg1 = (CThostFtdcMarketDataLastMatchField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataLastMatchField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->LastPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataLastMatchField_1Volume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcMarketDataLastMatchField *arg1 = (CThostFtdcMarketDataLastMatchField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataLastMatchField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->Volume = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataLastMatchField_1Volume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcMarketDataLastMatchField *arg1 = (CThostFtdcMarketDataLastMatchField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataLastMatchField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->Volume);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataLastMatchField_1Turnover_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataLastMatchField *arg1 = (CThostFtdcMarketDataLastMatchField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataLastMatchField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Turnover = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataLastMatchField_1Turnover_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataLastMatchField *arg1 = (CThostFtdcMarketDataLastMatchField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataLastMatchField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Turnover);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataLastMatchField_1OpenInterest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataLastMatchField *arg1 = (CThostFtdcMarketDataLastMatchField *) 0 ;
  TThostFtdcLargeVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataLastMatchField **)&jarg1; 
  arg2 = (TThostFtdcLargeVolumeType)jarg2; 
  if (arg1) (arg1)->OpenInterest = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataLastMatchField_1OpenInterest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataLastMatchField *arg1 = (CThostFtdcMarketDataLastMatchField *) 0 ;
  TThostFtdcLargeVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataLastMatchField **)&jarg1; 
  result = (TThostFtdcLargeVolumeType) ((arg1)->OpenInterest);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcMarketDataLastMatchField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcMarketDataLastMatchField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcMarketDataLastMatchField *)new CThostFtdcMarketDataLastMatchField();
  *(CThostFtdcMarketDataLastMatchField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcMarketDataLastMatchField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcMarketDataLastMatchField *arg1 = (CThostFtdcMarketDataLastMatchField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcMarketDataLastMatchField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBestPriceField_1BidPrice1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataBestPriceField *arg1 = (CThostFtdcMarketDataBestPriceField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBestPriceField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->BidPrice1 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBestPriceField_1BidPrice1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataBestPriceField *arg1 = (CThostFtdcMarketDataBestPriceField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBestPriceField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->BidPrice1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBestPriceField_1BidVolume1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcMarketDataBestPriceField *arg1 = (CThostFtdcMarketDataBestPriceField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBestPriceField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->BidVolume1 = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBestPriceField_1BidVolume1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcMarketDataBestPriceField *arg1 = (CThostFtdcMarketDataBestPriceField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBestPriceField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->BidVolume1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBestPriceField_1AskPrice1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataBestPriceField *arg1 = (CThostFtdcMarketDataBestPriceField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBestPriceField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->AskPrice1 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBestPriceField_1AskPrice1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataBestPriceField *arg1 = (CThostFtdcMarketDataBestPriceField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBestPriceField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->AskPrice1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBestPriceField_1AskVolume1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcMarketDataBestPriceField *arg1 = (CThostFtdcMarketDataBestPriceField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBestPriceField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->AskVolume1 = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBestPriceField_1AskVolume1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcMarketDataBestPriceField *arg1 = (CThostFtdcMarketDataBestPriceField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBestPriceField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->AskVolume1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcMarketDataBestPriceField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcMarketDataBestPriceField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcMarketDataBestPriceField *)new CThostFtdcMarketDataBestPriceField();
  *(CThostFtdcMarketDataBestPriceField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcMarketDataBestPriceField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcMarketDataBestPriceField *arg1 = (CThostFtdcMarketDataBestPriceField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcMarketDataBestPriceField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBid23Field_1BidPrice2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataBid23Field *arg1 = (CThostFtdcMarketDataBid23Field *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBid23Field **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->BidPrice2 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBid23Field_1BidPrice2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataBid23Field *arg1 = (CThostFtdcMarketDataBid23Field *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBid23Field **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->BidPrice2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBid23Field_1BidVolume2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcMarketDataBid23Field *arg1 = (CThostFtdcMarketDataBid23Field *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBid23Field **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->BidVolume2 = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBid23Field_1BidVolume2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcMarketDataBid23Field *arg1 = (CThostFtdcMarketDataBid23Field *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBid23Field **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->BidVolume2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBid23Field_1BidPrice3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataBid23Field *arg1 = (CThostFtdcMarketDataBid23Field *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBid23Field **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->BidPrice3 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBid23Field_1BidPrice3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataBid23Field *arg1 = (CThostFtdcMarketDataBid23Field *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBid23Field **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->BidPrice3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBid23Field_1BidVolume3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcMarketDataBid23Field *arg1 = (CThostFtdcMarketDataBid23Field *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBid23Field **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->BidVolume3 = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBid23Field_1BidVolume3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcMarketDataBid23Field *arg1 = (CThostFtdcMarketDataBid23Field *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBid23Field **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->BidVolume3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcMarketDataBid23Field(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcMarketDataBid23Field *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcMarketDataBid23Field *)new CThostFtdcMarketDataBid23Field();
  *(CThostFtdcMarketDataBid23Field **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcMarketDataBid23Field(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcMarketDataBid23Field *arg1 = (CThostFtdcMarketDataBid23Field *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcMarketDataBid23Field **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataAsk23Field_1AskPrice2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataAsk23Field *arg1 = (CThostFtdcMarketDataAsk23Field *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataAsk23Field **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->AskPrice2 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataAsk23Field_1AskPrice2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataAsk23Field *arg1 = (CThostFtdcMarketDataAsk23Field *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataAsk23Field **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->AskPrice2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataAsk23Field_1AskVolume2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcMarketDataAsk23Field *arg1 = (CThostFtdcMarketDataAsk23Field *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataAsk23Field **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->AskVolume2 = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataAsk23Field_1AskVolume2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcMarketDataAsk23Field *arg1 = (CThostFtdcMarketDataAsk23Field *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataAsk23Field **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->AskVolume2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataAsk23Field_1AskPrice3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataAsk23Field *arg1 = (CThostFtdcMarketDataAsk23Field *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataAsk23Field **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->AskPrice3 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataAsk23Field_1AskPrice3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataAsk23Field *arg1 = (CThostFtdcMarketDataAsk23Field *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataAsk23Field **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->AskPrice3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataAsk23Field_1AskVolume3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcMarketDataAsk23Field *arg1 = (CThostFtdcMarketDataAsk23Field *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataAsk23Field **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->AskVolume3 = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataAsk23Field_1AskVolume3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcMarketDataAsk23Field *arg1 = (CThostFtdcMarketDataAsk23Field *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataAsk23Field **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->AskVolume3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcMarketDataAsk23Field(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcMarketDataAsk23Field *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcMarketDataAsk23Field *)new CThostFtdcMarketDataAsk23Field();
  *(CThostFtdcMarketDataAsk23Field **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcMarketDataAsk23Field(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcMarketDataAsk23Field *arg1 = (CThostFtdcMarketDataAsk23Field *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcMarketDataAsk23Field **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBid45Field_1BidPrice4_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataBid45Field *arg1 = (CThostFtdcMarketDataBid45Field *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBid45Field **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->BidPrice4 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBid45Field_1BidPrice4_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataBid45Field *arg1 = (CThostFtdcMarketDataBid45Field *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBid45Field **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->BidPrice4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBid45Field_1BidVolume4_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcMarketDataBid45Field *arg1 = (CThostFtdcMarketDataBid45Field *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBid45Field **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->BidVolume4 = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBid45Field_1BidVolume4_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcMarketDataBid45Field *arg1 = (CThostFtdcMarketDataBid45Field *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBid45Field **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->BidVolume4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBid45Field_1BidPrice5_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataBid45Field *arg1 = (CThostFtdcMarketDataBid45Field *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBid45Field **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->BidPrice5 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBid45Field_1BidPrice5_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataBid45Field *arg1 = (CThostFtdcMarketDataBid45Field *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBid45Field **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->BidPrice5);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBid45Field_1BidVolume5_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcMarketDataBid45Field *arg1 = (CThostFtdcMarketDataBid45Field *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBid45Field **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->BidVolume5 = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataBid45Field_1BidVolume5_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcMarketDataBid45Field *arg1 = (CThostFtdcMarketDataBid45Field *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataBid45Field **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->BidVolume5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcMarketDataBid45Field(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcMarketDataBid45Field *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcMarketDataBid45Field *)new CThostFtdcMarketDataBid45Field();
  *(CThostFtdcMarketDataBid45Field **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcMarketDataBid45Field(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcMarketDataBid45Field *arg1 = (CThostFtdcMarketDataBid45Field *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcMarketDataBid45Field **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataAsk45Field_1AskPrice4_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataAsk45Field *arg1 = (CThostFtdcMarketDataAsk45Field *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataAsk45Field **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->AskPrice4 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataAsk45Field_1AskPrice4_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataAsk45Field *arg1 = (CThostFtdcMarketDataAsk45Field *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataAsk45Field **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->AskPrice4);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataAsk45Field_1AskVolume4_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcMarketDataAsk45Field *arg1 = (CThostFtdcMarketDataAsk45Field *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataAsk45Field **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->AskVolume4 = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataAsk45Field_1AskVolume4_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcMarketDataAsk45Field *arg1 = (CThostFtdcMarketDataAsk45Field *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataAsk45Field **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->AskVolume4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataAsk45Field_1AskPrice5_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataAsk45Field *arg1 = (CThostFtdcMarketDataAsk45Field *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataAsk45Field **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->AskPrice5 = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataAsk45Field_1AskPrice5_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataAsk45Field *arg1 = (CThostFtdcMarketDataAsk45Field *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataAsk45Field **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->AskPrice5);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataAsk45Field_1AskVolume5_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcMarketDataAsk45Field *arg1 = (CThostFtdcMarketDataAsk45Field *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataAsk45Field **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->AskVolume5 = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataAsk45Field_1AskVolume5_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcMarketDataAsk45Field *arg1 = (CThostFtdcMarketDataAsk45Field *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataAsk45Field **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->AskVolume5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcMarketDataAsk45Field(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcMarketDataAsk45Field *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcMarketDataAsk45Field *)new CThostFtdcMarketDataAsk45Field();
  *(CThostFtdcMarketDataAsk45Field **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcMarketDataAsk45Field(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcMarketDataAsk45Field *arg1 = (CThostFtdcMarketDataAsk45Field *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcMarketDataAsk45Field **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataUpdateTimeField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMarketDataUpdateTimeField *arg1 = (CThostFtdcMarketDataUpdateTimeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataUpdateTimeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataUpdateTimeField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMarketDataUpdateTimeField *arg1 = (CThostFtdcMarketDataUpdateTimeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataUpdateTimeField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataUpdateTimeField_1UpdateTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMarketDataUpdateTimeField *arg1 = (CThostFtdcMarketDataUpdateTimeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataUpdateTimeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UpdateTime, (const char *)arg2, 9-1);
      arg1->UpdateTime[9-1] = 0;
    } else {
      arg1->UpdateTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataUpdateTimeField_1UpdateTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMarketDataUpdateTimeField *arg1 = (CThostFtdcMarketDataUpdateTimeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataUpdateTimeField **)&jarg1; 
  result = (char *) ((arg1)->UpdateTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataUpdateTimeField_1UpdateMillisec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcMarketDataUpdateTimeField *arg1 = (CThostFtdcMarketDataUpdateTimeField *) 0 ;
  TThostFtdcMillisecType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataUpdateTimeField **)&jarg1; 
  arg2 = (TThostFtdcMillisecType)jarg2; 
  if (arg1) (arg1)->UpdateMillisec = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataUpdateTimeField_1UpdateMillisec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcMarketDataUpdateTimeField *arg1 = (CThostFtdcMarketDataUpdateTimeField *) 0 ;
  TThostFtdcMillisecType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataUpdateTimeField **)&jarg1; 
  result = (TThostFtdcMillisecType) ((arg1)->UpdateMillisec);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataUpdateTimeField_1ActionDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMarketDataUpdateTimeField *arg1 = (CThostFtdcMarketDataUpdateTimeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataUpdateTimeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ActionDay, (const char *)arg2, 9-1);
      arg1->ActionDay[9-1] = 0;
    } else {
      arg1->ActionDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataUpdateTimeField_1ActionDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMarketDataUpdateTimeField *arg1 = (CThostFtdcMarketDataUpdateTimeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataUpdateTimeField **)&jarg1; 
  result = (char *) ((arg1)->ActionDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcMarketDataUpdateTimeField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcMarketDataUpdateTimeField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcMarketDataUpdateTimeField *)new CThostFtdcMarketDataUpdateTimeField();
  *(CThostFtdcMarketDataUpdateTimeField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcMarketDataUpdateTimeField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcMarketDataUpdateTimeField *arg1 = (CThostFtdcMarketDataUpdateTimeField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcMarketDataUpdateTimeField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataExchangeField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMarketDataExchangeField *arg1 = (CThostFtdcMarketDataExchangeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataExchangeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataExchangeField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMarketDataExchangeField *arg1 = (CThostFtdcMarketDataExchangeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataExchangeField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcMarketDataExchangeField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcMarketDataExchangeField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcMarketDataExchangeField *)new CThostFtdcMarketDataExchangeField();
  *(CThostFtdcMarketDataExchangeField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcMarketDataExchangeField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcMarketDataExchangeField *arg1 = (CThostFtdcMarketDataExchangeField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcMarketDataExchangeField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSpecificInstrumentField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSpecificInstrumentField *arg1 = (CThostFtdcSpecificInstrumentField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSpecificInstrumentField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSpecificInstrumentField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSpecificInstrumentField *arg1 = (CThostFtdcSpecificInstrumentField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSpecificInstrumentField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcSpecificInstrumentField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcSpecificInstrumentField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcSpecificInstrumentField *)new CThostFtdcSpecificInstrumentField();
  *(CThostFtdcSpecificInstrumentField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcSpecificInstrumentField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcSpecificInstrumentField *arg1 = (CThostFtdcSpecificInstrumentField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcSpecificInstrumentField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentStatusField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInstrumentStatusField *arg1 = (CThostFtdcInstrumentStatusField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentStatusField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentStatusField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInstrumentStatusField *arg1 = (CThostFtdcInstrumentStatusField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentStatusField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentStatusField_1ExchangeInstID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInstrumentStatusField *arg1 = (CThostFtdcInstrumentStatusField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentStatusField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeInstID, (const char *)arg2, 31-1);
      arg1->ExchangeInstID[31-1] = 0;
    } else {
      arg1->ExchangeInstID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentStatusField_1ExchangeInstID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInstrumentStatusField *arg1 = (CThostFtdcInstrumentStatusField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentStatusField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeInstID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentStatusField_1SettlementGroupID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInstrumentStatusField *arg1 = (CThostFtdcInstrumentStatusField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentStatusField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->SettlementGroupID, (const char *)arg2, 9-1);
      arg1->SettlementGroupID[9-1] = 0;
    } else {
      arg1->SettlementGroupID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentStatusField_1SettlementGroupID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInstrumentStatusField *arg1 = (CThostFtdcInstrumentStatusField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentStatusField **)&jarg1; 
  result = (char *) ((arg1)->SettlementGroupID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentStatusField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInstrumentStatusField *arg1 = (CThostFtdcInstrumentStatusField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentStatusField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentStatusField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInstrumentStatusField *arg1 = (CThostFtdcInstrumentStatusField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentStatusField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentStatusField_1InstrumentStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcInstrumentStatusField *arg1 = (CThostFtdcInstrumentStatusField *) 0 ;
  TThostFtdcInstrumentStatusType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentStatusField **)&jarg1; 
  arg2 = (TThostFtdcInstrumentStatusType)jarg2; 
  if (arg1) (arg1)->InstrumentStatus = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentStatusField_1InstrumentStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcInstrumentStatusField *arg1 = (CThostFtdcInstrumentStatusField *) 0 ;
  TThostFtdcInstrumentStatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentStatusField **)&jarg1; 
  result = (TThostFtdcInstrumentStatusType) ((arg1)->InstrumentStatus);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentStatusField_1TradingSegmentSN_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInstrumentStatusField *arg1 = (CThostFtdcInstrumentStatusField *) 0 ;
  TThostFtdcTradingSegmentSNType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentStatusField **)&jarg1; 
  arg2 = (TThostFtdcTradingSegmentSNType)jarg2; 
  if (arg1) (arg1)->TradingSegmentSN = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentStatusField_1TradingSegmentSN_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInstrumentStatusField *arg1 = (CThostFtdcInstrumentStatusField *) 0 ;
  TThostFtdcTradingSegmentSNType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentStatusField **)&jarg1; 
  result = (TThostFtdcTradingSegmentSNType) ((arg1)->TradingSegmentSN);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentStatusField_1EnterTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInstrumentStatusField *arg1 = (CThostFtdcInstrumentStatusField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentStatusField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->EnterTime, (const char *)arg2, 9-1);
      arg1->EnterTime[9-1] = 0;
    } else {
      arg1->EnterTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentStatusField_1EnterTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInstrumentStatusField *arg1 = (CThostFtdcInstrumentStatusField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentStatusField **)&jarg1; 
  result = (char *) ((arg1)->EnterTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentStatusField_1EnterReason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcInstrumentStatusField *arg1 = (CThostFtdcInstrumentStatusField *) 0 ;
  TThostFtdcInstStatusEnterReasonType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentStatusField **)&jarg1; 
  arg2 = (TThostFtdcInstStatusEnterReasonType)jarg2; 
  if (arg1) (arg1)->EnterReason = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcInstrumentStatusField_1EnterReason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcInstrumentStatusField *arg1 = (CThostFtdcInstrumentStatusField *) 0 ;
  TThostFtdcInstStatusEnterReasonType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInstrumentStatusField **)&jarg1; 
  result = (TThostFtdcInstStatusEnterReasonType) ((arg1)->EnterReason);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcInstrumentStatusField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcInstrumentStatusField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcInstrumentStatusField *)new CThostFtdcInstrumentStatusField();
  *(CThostFtdcInstrumentStatusField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcInstrumentStatusField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcInstrumentStatusField *arg1 = (CThostFtdcInstrumentStatusField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcInstrumentStatusField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInstrumentStatusField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryInstrumentStatusField *arg1 = (CThostFtdcQryInstrumentStatusField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInstrumentStatusField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInstrumentStatusField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryInstrumentStatusField *arg1 = (CThostFtdcQryInstrumentStatusField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInstrumentStatusField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInstrumentStatusField_1ExchangeInstID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryInstrumentStatusField *arg1 = (CThostFtdcQryInstrumentStatusField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInstrumentStatusField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeInstID, (const char *)arg2, 31-1);
      arg1->ExchangeInstID[31-1] = 0;
    } else {
      arg1->ExchangeInstID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInstrumentStatusField_1ExchangeInstID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryInstrumentStatusField *arg1 = (CThostFtdcQryInstrumentStatusField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInstrumentStatusField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeInstID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryInstrumentStatusField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryInstrumentStatusField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryInstrumentStatusField *)new CThostFtdcQryInstrumentStatusField();
  *(CThostFtdcQryInstrumentStatusField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryInstrumentStatusField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryInstrumentStatusField *arg1 = (CThostFtdcQryInstrumentStatusField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryInstrumentStatusField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorAccountField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorAccountField *arg1 = (CThostFtdcInvestorAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorAccountField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorAccountField *arg1 = (CThostFtdcInvestorAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorAccountField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorAccountField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorAccountField *arg1 = (CThostFtdcInvestorAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorAccountField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorAccountField *arg1 = (CThostFtdcInvestorAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorAccountField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorAccountField_1AccountID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorAccountField *arg1 = (CThostFtdcInvestorAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 13-1);
      arg1->AccountID[13-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorAccountField_1AccountID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorAccountField *arg1 = (CThostFtdcInvestorAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorAccountField **)&jarg1; 
  result = (char *) ((arg1)->AccountID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcInvestorAccountField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcInvestorAccountField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcInvestorAccountField *)new CThostFtdcInvestorAccountField();
  *(CThostFtdcInvestorAccountField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcInvestorAccountField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcInvestorAccountField *arg1 = (CThostFtdcInvestorAccountField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcInvestorAccountField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcPositionProfitAlgorithmField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcPositionProfitAlgorithmField *arg1 = (CThostFtdcPositionProfitAlgorithmField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcPositionProfitAlgorithmField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcPositionProfitAlgorithmField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcPositionProfitAlgorithmField *arg1 = (CThostFtdcPositionProfitAlgorithmField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcPositionProfitAlgorithmField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcPositionProfitAlgorithmField_1AccountID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcPositionProfitAlgorithmField *arg1 = (CThostFtdcPositionProfitAlgorithmField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcPositionProfitAlgorithmField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 13-1);
      arg1->AccountID[13-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcPositionProfitAlgorithmField_1AccountID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcPositionProfitAlgorithmField *arg1 = (CThostFtdcPositionProfitAlgorithmField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcPositionProfitAlgorithmField **)&jarg1; 
  result = (char *) ((arg1)->AccountID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcPositionProfitAlgorithmField_1Algorithm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcPositionProfitAlgorithmField *arg1 = (CThostFtdcPositionProfitAlgorithmField *) 0 ;
  TThostFtdcAlgorithmType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcPositionProfitAlgorithmField **)&jarg1; 
  arg2 = (TThostFtdcAlgorithmType)jarg2; 
  if (arg1) (arg1)->Algorithm = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcPositionProfitAlgorithmField_1Algorithm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcPositionProfitAlgorithmField *arg1 = (CThostFtdcPositionProfitAlgorithmField *) 0 ;
  TThostFtdcAlgorithmType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcPositionProfitAlgorithmField **)&jarg1; 
  result = (TThostFtdcAlgorithmType) ((arg1)->Algorithm);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcPositionProfitAlgorithmField_1Memo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcPositionProfitAlgorithmField *arg1 = (CThostFtdcPositionProfitAlgorithmField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcPositionProfitAlgorithmField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Memo, (const char *)arg2, 161-1);
      arg1->Memo[161-1] = 0;
    } else {
      arg1->Memo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcPositionProfitAlgorithmField_1Memo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcPositionProfitAlgorithmField *arg1 = (CThostFtdcPositionProfitAlgorithmField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcPositionProfitAlgorithmField **)&jarg1; 
  result = (char *) ((arg1)->Memo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcPositionProfitAlgorithmField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcPositionProfitAlgorithmField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcPositionProfitAlgorithmField *)new CThostFtdcPositionProfitAlgorithmField();
  *(CThostFtdcPositionProfitAlgorithmField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcPositionProfitAlgorithmField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcPositionProfitAlgorithmField *arg1 = (CThostFtdcPositionProfitAlgorithmField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcPositionProfitAlgorithmField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDiscountField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcDiscountField *arg1 = (CThostFtdcDiscountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDiscountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcDiscountField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcDiscountField *arg1 = (CThostFtdcDiscountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDiscountField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDiscountField_1InvestorRange_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcDiscountField *arg1 = (CThostFtdcDiscountField *) 0 ;
  TThostFtdcInvestorRangeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDiscountField **)&jarg1; 
  arg2 = (TThostFtdcInvestorRangeType)jarg2; 
  if (arg1) (arg1)->InvestorRange = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcDiscountField_1InvestorRange_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcDiscountField *arg1 = (CThostFtdcDiscountField *) 0 ;
  TThostFtdcInvestorRangeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDiscountField **)&jarg1; 
  result = (TThostFtdcInvestorRangeType) ((arg1)->InvestorRange);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDiscountField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcDiscountField *arg1 = (CThostFtdcDiscountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDiscountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcDiscountField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcDiscountField *arg1 = (CThostFtdcDiscountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDiscountField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDiscountField_1Discount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcDiscountField *arg1 = (CThostFtdcDiscountField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDiscountField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->Discount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcDiscountField_1Discount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcDiscountField *arg1 = (CThostFtdcDiscountField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDiscountField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->Discount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcDiscountField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcDiscountField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcDiscountField *)new CThostFtdcDiscountField();
  *(CThostFtdcDiscountField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcDiscountField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcDiscountField *arg1 = (CThostFtdcDiscountField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcDiscountField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTransferBankField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryTransferBankField *arg1 = (CThostFtdcQryTransferBankField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTransferBankField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTransferBankField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryTransferBankField *arg1 = (CThostFtdcQryTransferBankField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTransferBankField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTransferBankField_1BankBrchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryTransferBankField *arg1 = (CThostFtdcQryTransferBankField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTransferBankField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBrchID, (const char *)arg2, 5-1);
      arg1->BankBrchID[5-1] = 0;
    } else {
      arg1->BankBrchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTransferBankField_1BankBrchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryTransferBankField *arg1 = (CThostFtdcQryTransferBankField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTransferBankField **)&jarg1; 
  result = (char *) ((arg1)->BankBrchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryTransferBankField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryTransferBankField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryTransferBankField *)new CThostFtdcQryTransferBankField();
  *(CThostFtdcQryTransferBankField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryTransferBankField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryTransferBankField *arg1 = (CThostFtdcQryTransferBankField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryTransferBankField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferBankField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferBankField *arg1 = (CThostFtdcTransferBankField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferBankField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferBankField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferBankField *arg1 = (CThostFtdcTransferBankField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferBankField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferBankField_1BankBrchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferBankField *arg1 = (CThostFtdcTransferBankField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferBankField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBrchID, (const char *)arg2, 5-1);
      arg1->BankBrchID[5-1] = 0;
    } else {
      arg1->BankBrchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferBankField_1BankBrchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferBankField *arg1 = (CThostFtdcTransferBankField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferBankField **)&jarg1; 
  result = (char *) ((arg1)->BankBrchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferBankField_1BankName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferBankField *arg1 = (CThostFtdcTransferBankField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferBankField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankName, (const char *)arg2, 101-1);
      arg1->BankName[101-1] = 0;
    } else {
      arg1->BankName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferBankField_1BankName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferBankField *arg1 = (CThostFtdcTransferBankField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferBankField **)&jarg1; 
  result = (char *) ((arg1)->BankName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferBankField_1IsActive_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcTransferBankField *arg1 = (CThostFtdcTransferBankField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferBankField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->IsActive = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferBankField_1IsActive_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcTransferBankField *arg1 = (CThostFtdcTransferBankField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferBankField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->IsActive);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcTransferBankField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcTransferBankField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcTransferBankField *)new CThostFtdcTransferBankField();
  *(CThostFtdcTransferBankField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcTransferBankField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcTransferBankField *arg1 = (CThostFtdcTransferBankField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcTransferBankField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInvestorPositionDetailField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryInvestorPositionDetailField *arg1 = (CThostFtdcQryInvestorPositionDetailField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInvestorPositionDetailField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInvestorPositionDetailField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryInvestorPositionDetailField *arg1 = (CThostFtdcQryInvestorPositionDetailField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInvestorPositionDetailField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInvestorPositionDetailField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryInvestorPositionDetailField *arg1 = (CThostFtdcQryInvestorPositionDetailField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInvestorPositionDetailField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInvestorPositionDetailField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryInvestorPositionDetailField *arg1 = (CThostFtdcQryInvestorPositionDetailField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInvestorPositionDetailField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInvestorPositionDetailField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryInvestorPositionDetailField *arg1 = (CThostFtdcQryInvestorPositionDetailField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInvestorPositionDetailField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInvestorPositionDetailField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryInvestorPositionDetailField *arg1 = (CThostFtdcQryInvestorPositionDetailField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInvestorPositionDetailField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryInvestorPositionDetailField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryInvestorPositionDetailField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryInvestorPositionDetailField *)new CThostFtdcQryInvestorPositionDetailField();
  *(CThostFtdcQryInvestorPositionDetailField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryInvestorPositionDetailField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryInvestorPositionDetailField *arg1 = (CThostFtdcQryInvestorPositionDetailField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryInvestorPositionDetailField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1HedgeFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcHedgeFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  arg2 = (TThostFtdcHedgeFlagType)jarg2; 
  if (arg1) (arg1)->HedgeFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1HedgeFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcHedgeFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  result = (TThostFtdcHedgeFlagType) ((arg1)->HedgeFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1Direction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcDirectionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  arg2 = (TThostFtdcDirectionType)jarg2; 
  if (arg1) (arg1)->Direction = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1Direction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcDirectionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  result = (TThostFtdcDirectionType) ((arg1)->Direction);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1OpenDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OpenDate, (const char *)arg2, 9-1);
      arg1->OpenDate[9-1] = 0;
    } else {
      arg1->OpenDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1OpenDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  result = (char *) ((arg1)->OpenDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1TradeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeID, (const char *)arg2, 21-1);
      arg1->TradeID[21-1] = 0;
    } else {
      arg1->TradeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1TradeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  result = (char *) ((arg1)->TradeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1Volume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->Volume = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1Volume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->Volume);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1OpenPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->OpenPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1OpenPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->OpenPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1SettlementID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcSettlementIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  arg2 = (TThostFtdcSettlementIDType)jarg2; 
  if (arg1) (arg1)->SettlementID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1SettlementID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcSettlementIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  result = (TThostFtdcSettlementIDType) ((arg1)->SettlementID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1TradeType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcTradeTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  arg2 = (TThostFtdcTradeTypeType)jarg2; 
  if (arg1) (arg1)->TradeType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1TradeType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcTradeTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  result = (TThostFtdcTradeTypeType) ((arg1)->TradeType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1CombInstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CombInstrumentID, (const char *)arg2, 31-1);
      arg1->CombInstrumentID[31-1] = 0;
    } else {
      arg1->CombInstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1CombInstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  result = (char *) ((arg1)->CombInstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1CloseProfitByDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->CloseProfitByDate = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1CloseProfitByDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->CloseProfitByDate);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1CloseProfitByTrade_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->CloseProfitByTrade = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1CloseProfitByTrade_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->CloseProfitByTrade);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1PositionProfitByDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->PositionProfitByDate = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1PositionProfitByDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->PositionProfitByDate);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1PositionProfitByTrade_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->PositionProfitByTrade = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1PositionProfitByTrade_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->PositionProfitByTrade);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1Margin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Margin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1Margin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Margin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1ExchMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->ExchMargin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1ExchMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->ExchMargin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1MarginRateByMoney_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->MarginRateByMoney = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1MarginRateByMoney_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->MarginRateByMoney);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1MarginRateByVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->MarginRateByVolume = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1MarginRateByVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->MarginRateByVolume);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1LastSettlementPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->LastSettlementPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1LastSettlementPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->LastSettlementPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1SettlementPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->SettlementPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1SettlementPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->SettlementPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1CloseVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->CloseVolume = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1CloseVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->CloseVolume);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1CloseAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->CloseAmount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionDetailField_1CloseAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->CloseAmount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcInvestorPositionDetailField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcInvestorPositionDetailField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcInvestorPositionDetailField *)new CThostFtdcInvestorPositionDetailField();
  *(CThostFtdcInvestorPositionDetailField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcInvestorPositionDetailField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcInvestorPositionDetailField *arg1 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcInvestorPositionDetailField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountPasswordField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradingAccountPasswordField *arg1 = (CThostFtdcTradingAccountPasswordField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountPasswordField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountPasswordField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradingAccountPasswordField *arg1 = (CThostFtdcTradingAccountPasswordField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountPasswordField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountPasswordField_1AccountID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradingAccountPasswordField *arg1 = (CThostFtdcTradingAccountPasswordField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountPasswordField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 13-1);
      arg1->AccountID[13-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountPasswordField_1AccountID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradingAccountPasswordField *arg1 = (CThostFtdcTradingAccountPasswordField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountPasswordField **)&jarg1; 
  result = (char *) ((arg1)->AccountID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountPasswordField_1Password_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradingAccountPasswordField *arg1 = (CThostFtdcTradingAccountPasswordField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountPasswordField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Password, (const char *)arg2, 41-1);
      arg1->Password[41-1] = 0;
    } else {
      arg1->Password[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountPasswordField_1Password_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradingAccountPasswordField *arg1 = (CThostFtdcTradingAccountPasswordField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountPasswordField **)&jarg1; 
  result = (char *) ((arg1)->Password);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcTradingAccountPasswordField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcTradingAccountPasswordField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcTradingAccountPasswordField *)new CThostFtdcTradingAccountPasswordField();
  *(CThostFtdcTradingAccountPasswordField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcTradingAccountPasswordField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcTradingAccountPasswordField *arg1 = (CThostFtdcTradingAccountPasswordField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcTradingAccountPasswordField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1TraderID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TraderID, (const char *)arg2, 21-1);
      arg1->TraderID[21-1] = 0;
    } else {
      arg1->TraderID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1TraderID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->TraderID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1ParticipantID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ParticipantID, (const char *)arg2, 11-1);
      arg1->ParticipantID[11-1] = 0;
    } else {
      arg1->ParticipantID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1ParticipantID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->ParticipantID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1Password_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Password, (const char *)arg2, 41-1);
      arg1->Password[41-1] = 0;
    } else {
      arg1->Password[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1Password_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->Password);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1InstallID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  TThostFtdcInstallIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  arg2 = (TThostFtdcInstallIDType)jarg2; 
  if (arg1) (arg1)->InstallID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1InstallID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  TThostFtdcInstallIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  result = (TThostFtdcInstallIDType) ((arg1)->InstallID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1OrderLocalID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderLocalID, (const char *)arg2, 13-1);
      arg1->OrderLocalID[13-1] = 0;
    } else {
      arg1->OrderLocalID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1OrderLocalID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->OrderLocalID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1TraderConnectStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  TThostFtdcTraderConnectStatusType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  arg2 = (TThostFtdcTraderConnectStatusType)jarg2; 
  if (arg1) (arg1)->TraderConnectStatus = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1TraderConnectStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  TThostFtdcTraderConnectStatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  result = (TThostFtdcTraderConnectStatusType) ((arg1)->TraderConnectStatus);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1ConnectRequestDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ConnectRequestDate, (const char *)arg2, 9-1);
      arg1->ConnectRequestDate[9-1] = 0;
    } else {
      arg1->ConnectRequestDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1ConnectRequestDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->ConnectRequestDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1ConnectRequestTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ConnectRequestTime, (const char *)arg2, 9-1);
      arg1->ConnectRequestTime[9-1] = 0;
    } else {
      arg1->ConnectRequestTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1ConnectRequestTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->ConnectRequestTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1LastReportDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->LastReportDate, (const char *)arg2, 9-1);
      arg1->LastReportDate[9-1] = 0;
    } else {
      arg1->LastReportDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1LastReportDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->LastReportDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1LastReportTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->LastReportTime, (const char *)arg2, 9-1);
      arg1->LastReportTime[9-1] = 0;
    } else {
      arg1->LastReportTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1LastReportTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->LastReportTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1ConnectDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ConnectDate, (const char *)arg2, 9-1);
      arg1->ConnectDate[9-1] = 0;
    } else {
      arg1->ConnectDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1ConnectDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->ConnectDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1ConnectTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ConnectTime, (const char *)arg2, 9-1);
      arg1->ConnectTime[9-1] = 0;
    } else {
      arg1->ConnectTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1ConnectTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->ConnectTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1StartDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->StartDate, (const char *)arg2, 9-1);
      arg1->StartDate[9-1] = 0;
    } else {
      arg1->StartDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1StartDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->StartDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1StartTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->StartTime, (const char *)arg2, 9-1);
      arg1->StartTime[9-1] = 0;
    } else {
      arg1->StartTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1StartTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->StartTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1MaxTradeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->MaxTradeID, (const char *)arg2, 21-1);
      arg1->MaxTradeID[21-1] = 0;
    } else {
      arg1->MaxTradeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1MaxTradeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->MaxTradeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1MaxOrderMessageReference_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->MaxOrderMessageReference, (const char *)arg2, 7-1);
      arg1->MaxOrderMessageReference[7-1] = 0;
    } else {
      arg1->MaxOrderMessageReference[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMDTraderOfferField_1MaxOrderMessageReference_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->MaxOrderMessageReference);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcMDTraderOfferField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcMDTraderOfferField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcMDTraderOfferField *)new CThostFtdcMDTraderOfferField();
  *(CThostFtdcMDTraderOfferField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcMDTraderOfferField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcMDTraderOfferField *arg1 = (CThostFtdcMDTraderOfferField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcMDTraderOfferField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryMDTraderOfferField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryMDTraderOfferField *arg1 = (CThostFtdcQryMDTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryMDTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryMDTraderOfferField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryMDTraderOfferField *arg1 = (CThostFtdcQryMDTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryMDTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryMDTraderOfferField_1ParticipantID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryMDTraderOfferField *arg1 = (CThostFtdcQryMDTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryMDTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ParticipantID, (const char *)arg2, 11-1);
      arg1->ParticipantID[11-1] = 0;
    } else {
      arg1->ParticipantID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryMDTraderOfferField_1ParticipantID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryMDTraderOfferField *arg1 = (CThostFtdcQryMDTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryMDTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->ParticipantID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryMDTraderOfferField_1TraderID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryMDTraderOfferField *arg1 = (CThostFtdcQryMDTraderOfferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryMDTraderOfferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TraderID, (const char *)arg2, 21-1);
      arg1->TraderID[21-1] = 0;
    } else {
      arg1->TraderID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryMDTraderOfferField_1TraderID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryMDTraderOfferField *arg1 = (CThostFtdcQryMDTraderOfferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryMDTraderOfferField **)&jarg1; 
  result = (char *) ((arg1)->TraderID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryMDTraderOfferField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryMDTraderOfferField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryMDTraderOfferField *)new CThostFtdcQryMDTraderOfferField();
  *(CThostFtdcQryMDTraderOfferField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryMDTraderOfferField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryMDTraderOfferField *arg1 = (CThostFtdcQryMDTraderOfferField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryMDTraderOfferField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryNoticeField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryNoticeField *arg1 = (CThostFtdcQryNoticeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryNoticeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryNoticeField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryNoticeField *arg1 = (CThostFtdcQryNoticeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryNoticeField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryNoticeField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryNoticeField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryNoticeField *)new CThostFtdcQryNoticeField();
  *(CThostFtdcQryNoticeField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryNoticeField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryNoticeField *arg1 = (CThostFtdcQryNoticeField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryNoticeField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNoticeField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNoticeField *arg1 = (CThostFtdcNoticeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNoticeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNoticeField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNoticeField *arg1 = (CThostFtdcNoticeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNoticeField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNoticeField_1Content_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNoticeField *arg1 = (CThostFtdcNoticeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNoticeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Content, (const char *)arg2, 501-1);
      arg1->Content[501-1] = 0;
    } else {
      arg1->Content[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNoticeField_1Content_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNoticeField *arg1 = (CThostFtdcNoticeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNoticeField **)&jarg1; 
  result = (char *) ((arg1)->Content);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNoticeField_1SequenceLabel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNoticeField *arg1 = (CThostFtdcNoticeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNoticeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->SequenceLabel, (const char *)arg2, 2-1);
      arg1->SequenceLabel[2-1] = 0;
    } else {
      arg1->SequenceLabel[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNoticeField_1SequenceLabel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNoticeField *arg1 = (CThostFtdcNoticeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNoticeField **)&jarg1; 
  result = (char *) ((arg1)->SequenceLabel);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcNoticeField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcNoticeField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcNoticeField *)new CThostFtdcNoticeField();
  *(CThostFtdcNoticeField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcNoticeField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcNoticeField *arg1 = (CThostFtdcNoticeField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcNoticeField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserRightField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcUserRightField *arg1 = (CThostFtdcUserRightField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserRightField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserRightField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcUserRightField *arg1 = (CThostFtdcUserRightField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserRightField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserRightField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcUserRightField *arg1 = (CThostFtdcUserRightField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserRightField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserRightField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcUserRightField *arg1 = (CThostFtdcUserRightField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserRightField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserRightField_1UserRightType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcUserRightField *arg1 = (CThostFtdcUserRightField *) 0 ;
  TThostFtdcUserRightTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserRightField **)&jarg1; 
  arg2 = (TThostFtdcUserRightTypeType)jarg2; 
  if (arg1) (arg1)->UserRightType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserRightField_1UserRightType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcUserRightField *arg1 = (CThostFtdcUserRightField *) 0 ;
  TThostFtdcUserRightTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserRightField **)&jarg1; 
  result = (TThostFtdcUserRightTypeType) ((arg1)->UserRightType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserRightField_1IsForbidden_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcUserRightField *arg1 = (CThostFtdcUserRightField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserRightField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->IsForbidden = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserRightField_1IsForbidden_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcUserRightField *arg1 = (CThostFtdcUserRightField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserRightField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->IsForbidden);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcUserRightField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcUserRightField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcUserRightField *)new CThostFtdcUserRightField();
  *(CThostFtdcUserRightField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcUserRightField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcUserRightField *arg1 = (CThostFtdcUserRightField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcUserRightField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQrySettlementInfoConfirmField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQrySettlementInfoConfirmField *arg1 = (CThostFtdcQrySettlementInfoConfirmField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQrySettlementInfoConfirmField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQrySettlementInfoConfirmField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQrySettlementInfoConfirmField *arg1 = (CThostFtdcQrySettlementInfoConfirmField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQrySettlementInfoConfirmField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQrySettlementInfoConfirmField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQrySettlementInfoConfirmField *arg1 = (CThostFtdcQrySettlementInfoConfirmField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQrySettlementInfoConfirmField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQrySettlementInfoConfirmField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQrySettlementInfoConfirmField *arg1 = (CThostFtdcQrySettlementInfoConfirmField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQrySettlementInfoConfirmField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQrySettlementInfoConfirmField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQrySettlementInfoConfirmField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQrySettlementInfoConfirmField *)new CThostFtdcQrySettlementInfoConfirmField();
  *(CThostFtdcQrySettlementInfoConfirmField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQrySettlementInfoConfirmField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQrySettlementInfoConfirmField *arg1 = (CThostFtdcQrySettlementInfoConfirmField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQrySettlementInfoConfirmField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoadSettlementInfoField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcLoadSettlementInfoField *arg1 = (CThostFtdcLoadSettlementInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoadSettlementInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoadSettlementInfoField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcLoadSettlementInfoField *arg1 = (CThostFtdcLoadSettlementInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoadSettlementInfoField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcLoadSettlementInfoField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcLoadSettlementInfoField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcLoadSettlementInfoField *)new CThostFtdcLoadSettlementInfoField();
  *(CThostFtdcLoadSettlementInfoField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcLoadSettlementInfoField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcLoadSettlementInfoField *arg1 = (CThostFtdcLoadSettlementInfoField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcLoadSettlementInfoField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerWithdrawAlgorithmField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerWithdrawAlgorithmField *arg1 = (CThostFtdcBrokerWithdrawAlgorithmField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerWithdrawAlgorithmField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerWithdrawAlgorithmField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerWithdrawAlgorithmField *arg1 = (CThostFtdcBrokerWithdrawAlgorithmField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerWithdrawAlgorithmField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerWithdrawAlgorithmField_1WithdrawAlgorithm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcBrokerWithdrawAlgorithmField *arg1 = (CThostFtdcBrokerWithdrawAlgorithmField *) 0 ;
  TThostFtdcAlgorithmType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerWithdrawAlgorithmField **)&jarg1; 
  arg2 = (TThostFtdcAlgorithmType)jarg2; 
  if (arg1) (arg1)->WithdrawAlgorithm = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerWithdrawAlgorithmField_1WithdrawAlgorithm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcBrokerWithdrawAlgorithmField *arg1 = (CThostFtdcBrokerWithdrawAlgorithmField *) 0 ;
  TThostFtdcAlgorithmType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerWithdrawAlgorithmField **)&jarg1; 
  result = (TThostFtdcAlgorithmType) ((arg1)->WithdrawAlgorithm);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerWithdrawAlgorithmField_1UsingRatio_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcBrokerWithdrawAlgorithmField *arg1 = (CThostFtdcBrokerWithdrawAlgorithmField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerWithdrawAlgorithmField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->UsingRatio = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerWithdrawAlgorithmField_1UsingRatio_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcBrokerWithdrawAlgorithmField *arg1 = (CThostFtdcBrokerWithdrawAlgorithmField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerWithdrawAlgorithmField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->UsingRatio);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerWithdrawAlgorithmField_1IncludeCloseProfit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcBrokerWithdrawAlgorithmField *arg1 = (CThostFtdcBrokerWithdrawAlgorithmField *) 0 ;
  TThostFtdcIncludeCloseProfitType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerWithdrawAlgorithmField **)&jarg1; 
  arg2 = (TThostFtdcIncludeCloseProfitType)jarg2; 
  if (arg1) (arg1)->IncludeCloseProfit = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerWithdrawAlgorithmField_1IncludeCloseProfit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcBrokerWithdrawAlgorithmField *arg1 = (CThostFtdcBrokerWithdrawAlgorithmField *) 0 ;
  TThostFtdcIncludeCloseProfitType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerWithdrawAlgorithmField **)&jarg1; 
  result = (TThostFtdcIncludeCloseProfitType) ((arg1)->IncludeCloseProfit);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerWithdrawAlgorithmField_1AllWithoutTrade_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcBrokerWithdrawAlgorithmField *arg1 = (CThostFtdcBrokerWithdrawAlgorithmField *) 0 ;
  TThostFtdcAllWithoutTradeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerWithdrawAlgorithmField **)&jarg1; 
  arg2 = (TThostFtdcAllWithoutTradeType)jarg2; 
  if (arg1) (arg1)->AllWithoutTrade = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerWithdrawAlgorithmField_1AllWithoutTrade_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcBrokerWithdrawAlgorithmField *arg1 = (CThostFtdcBrokerWithdrawAlgorithmField *) 0 ;
  TThostFtdcAllWithoutTradeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerWithdrawAlgorithmField **)&jarg1; 
  result = (TThostFtdcAllWithoutTradeType) ((arg1)->AllWithoutTrade);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerWithdrawAlgorithmField_1AvailIncludeCloseProfit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcBrokerWithdrawAlgorithmField *arg1 = (CThostFtdcBrokerWithdrawAlgorithmField *) 0 ;
  TThostFtdcIncludeCloseProfitType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerWithdrawAlgorithmField **)&jarg1; 
  arg2 = (TThostFtdcIncludeCloseProfitType)jarg2; 
  if (arg1) (arg1)->AvailIncludeCloseProfit = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerWithdrawAlgorithmField_1AvailIncludeCloseProfit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcBrokerWithdrawAlgorithmField *arg1 = (CThostFtdcBrokerWithdrawAlgorithmField *) 0 ;
  TThostFtdcIncludeCloseProfitType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerWithdrawAlgorithmField **)&jarg1; 
  result = (TThostFtdcIncludeCloseProfitType) ((arg1)->AvailIncludeCloseProfit);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerWithdrawAlgorithmField_1IsBrokerUserEvent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcBrokerWithdrawAlgorithmField *arg1 = (CThostFtdcBrokerWithdrawAlgorithmField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerWithdrawAlgorithmField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->IsBrokerUserEvent = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerWithdrawAlgorithmField_1IsBrokerUserEvent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcBrokerWithdrawAlgorithmField *arg1 = (CThostFtdcBrokerWithdrawAlgorithmField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerWithdrawAlgorithmField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->IsBrokerUserEvent);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcBrokerWithdrawAlgorithmField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcBrokerWithdrawAlgorithmField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcBrokerWithdrawAlgorithmField *)new CThostFtdcBrokerWithdrawAlgorithmField();
  *(CThostFtdcBrokerWithdrawAlgorithmField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcBrokerWithdrawAlgorithmField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcBrokerWithdrawAlgorithmField *arg1 = (CThostFtdcBrokerWithdrawAlgorithmField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcBrokerWithdrawAlgorithmField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountPasswordUpdateV1Field_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradingAccountPasswordUpdateV1Field *arg1 = (CThostFtdcTradingAccountPasswordUpdateV1Field *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountPasswordUpdateV1Field **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountPasswordUpdateV1Field_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradingAccountPasswordUpdateV1Field *arg1 = (CThostFtdcTradingAccountPasswordUpdateV1Field *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountPasswordUpdateV1Field **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountPasswordUpdateV1Field_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradingAccountPasswordUpdateV1Field *arg1 = (CThostFtdcTradingAccountPasswordUpdateV1Field *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountPasswordUpdateV1Field **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountPasswordUpdateV1Field_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradingAccountPasswordUpdateV1Field *arg1 = (CThostFtdcTradingAccountPasswordUpdateV1Field *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountPasswordUpdateV1Field **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountPasswordUpdateV1Field_1OldPassword_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradingAccountPasswordUpdateV1Field *arg1 = (CThostFtdcTradingAccountPasswordUpdateV1Field *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountPasswordUpdateV1Field **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OldPassword, (const char *)arg2, 41-1);
      arg1->OldPassword[41-1] = 0;
    } else {
      arg1->OldPassword[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountPasswordUpdateV1Field_1OldPassword_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradingAccountPasswordUpdateV1Field *arg1 = (CThostFtdcTradingAccountPasswordUpdateV1Field *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountPasswordUpdateV1Field **)&jarg1; 
  result = (char *) ((arg1)->OldPassword);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountPasswordUpdateV1Field_1NewPassword_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradingAccountPasswordUpdateV1Field *arg1 = (CThostFtdcTradingAccountPasswordUpdateV1Field *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountPasswordUpdateV1Field **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->NewPassword, (const char *)arg2, 41-1);
      arg1->NewPassword[41-1] = 0;
    } else {
      arg1->NewPassword[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountPasswordUpdateV1Field_1NewPassword_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradingAccountPasswordUpdateV1Field *arg1 = (CThostFtdcTradingAccountPasswordUpdateV1Field *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountPasswordUpdateV1Field **)&jarg1; 
  result = (char *) ((arg1)->NewPassword);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcTradingAccountPasswordUpdateV1Field(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcTradingAccountPasswordUpdateV1Field *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcTradingAccountPasswordUpdateV1Field *)new CThostFtdcTradingAccountPasswordUpdateV1Field();
  *(CThostFtdcTradingAccountPasswordUpdateV1Field **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcTradingAccountPasswordUpdateV1Field(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcTradingAccountPasswordUpdateV1Field *arg1 = (CThostFtdcTradingAccountPasswordUpdateV1Field *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcTradingAccountPasswordUpdateV1Field **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountPasswordUpdateField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradingAccountPasswordUpdateField *arg1 = (CThostFtdcTradingAccountPasswordUpdateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountPasswordUpdateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountPasswordUpdateField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradingAccountPasswordUpdateField *arg1 = (CThostFtdcTradingAccountPasswordUpdateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountPasswordUpdateField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountPasswordUpdateField_1AccountID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradingAccountPasswordUpdateField *arg1 = (CThostFtdcTradingAccountPasswordUpdateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountPasswordUpdateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 13-1);
      arg1->AccountID[13-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountPasswordUpdateField_1AccountID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradingAccountPasswordUpdateField *arg1 = (CThostFtdcTradingAccountPasswordUpdateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountPasswordUpdateField **)&jarg1; 
  result = (char *) ((arg1)->AccountID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountPasswordUpdateField_1OldPassword_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradingAccountPasswordUpdateField *arg1 = (CThostFtdcTradingAccountPasswordUpdateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountPasswordUpdateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OldPassword, (const char *)arg2, 41-1);
      arg1->OldPassword[41-1] = 0;
    } else {
      arg1->OldPassword[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountPasswordUpdateField_1OldPassword_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradingAccountPasswordUpdateField *arg1 = (CThostFtdcTradingAccountPasswordUpdateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountPasswordUpdateField **)&jarg1; 
  result = (char *) ((arg1)->OldPassword);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountPasswordUpdateField_1NewPassword_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradingAccountPasswordUpdateField *arg1 = (CThostFtdcTradingAccountPasswordUpdateField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountPasswordUpdateField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->NewPassword, (const char *)arg2, 41-1);
      arg1->NewPassword[41-1] = 0;
    } else {
      arg1->NewPassword[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountPasswordUpdateField_1NewPassword_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradingAccountPasswordUpdateField *arg1 = (CThostFtdcTradingAccountPasswordUpdateField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountPasswordUpdateField **)&jarg1; 
  result = (char *) ((arg1)->NewPassword);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcTradingAccountPasswordUpdateField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcTradingAccountPasswordUpdateField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcTradingAccountPasswordUpdateField *)new CThostFtdcTradingAccountPasswordUpdateField();
  *(CThostFtdcTradingAccountPasswordUpdateField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcTradingAccountPasswordUpdateField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcTradingAccountPasswordUpdateField *arg1 = (CThostFtdcTradingAccountPasswordUpdateField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcTradingAccountPasswordUpdateField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryCombinationLegField_1CombInstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryCombinationLegField *arg1 = (CThostFtdcQryCombinationLegField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryCombinationLegField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CombInstrumentID, (const char *)arg2, 31-1);
      arg1->CombInstrumentID[31-1] = 0;
    } else {
      arg1->CombInstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryCombinationLegField_1CombInstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryCombinationLegField *arg1 = (CThostFtdcQryCombinationLegField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryCombinationLegField **)&jarg1; 
  result = (char *) ((arg1)->CombInstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryCombinationLegField_1LegID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcQryCombinationLegField *arg1 = (CThostFtdcQryCombinationLegField *) 0 ;
  TThostFtdcLegIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryCombinationLegField **)&jarg1; 
  arg2 = (TThostFtdcLegIDType)jarg2; 
  if (arg1) (arg1)->LegID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryCombinationLegField_1LegID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcQryCombinationLegField *arg1 = (CThostFtdcQryCombinationLegField *) 0 ;
  TThostFtdcLegIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryCombinationLegField **)&jarg1; 
  result = (TThostFtdcLegIDType) ((arg1)->LegID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryCombinationLegField_1LegInstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryCombinationLegField *arg1 = (CThostFtdcQryCombinationLegField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryCombinationLegField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->LegInstrumentID, (const char *)arg2, 31-1);
      arg1->LegInstrumentID[31-1] = 0;
    } else {
      arg1->LegInstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryCombinationLegField_1LegInstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryCombinationLegField *arg1 = (CThostFtdcQryCombinationLegField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryCombinationLegField **)&jarg1; 
  result = (char *) ((arg1)->LegInstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryCombinationLegField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryCombinationLegField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryCombinationLegField *)new CThostFtdcQryCombinationLegField();
  *(CThostFtdcQryCombinationLegField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryCombinationLegField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryCombinationLegField *arg1 = (CThostFtdcQryCombinationLegField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryCombinationLegField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQrySyncStatusField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQrySyncStatusField *arg1 = (CThostFtdcQrySyncStatusField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQrySyncStatusField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQrySyncStatusField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQrySyncStatusField *arg1 = (CThostFtdcQrySyncStatusField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQrySyncStatusField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQrySyncStatusField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQrySyncStatusField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQrySyncStatusField *)new CThostFtdcQrySyncStatusField();
  *(CThostFtdcQrySyncStatusField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQrySyncStatusField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQrySyncStatusField *arg1 = (CThostFtdcQrySyncStatusField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQrySyncStatusField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCombinationLegField_1CombInstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCombinationLegField *arg1 = (CThostFtdcCombinationLegField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCombinationLegField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CombInstrumentID, (const char *)arg2, 31-1);
      arg1->CombInstrumentID[31-1] = 0;
    } else {
      arg1->CombInstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCombinationLegField_1CombInstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCombinationLegField *arg1 = (CThostFtdcCombinationLegField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCombinationLegField **)&jarg1; 
  result = (char *) ((arg1)->CombInstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCombinationLegField_1LegID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcCombinationLegField *arg1 = (CThostFtdcCombinationLegField *) 0 ;
  TThostFtdcLegIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCombinationLegField **)&jarg1; 
  arg2 = (TThostFtdcLegIDType)jarg2; 
  if (arg1) (arg1)->LegID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcCombinationLegField_1LegID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcCombinationLegField *arg1 = (CThostFtdcCombinationLegField *) 0 ;
  TThostFtdcLegIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCombinationLegField **)&jarg1; 
  result = (TThostFtdcLegIDType) ((arg1)->LegID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCombinationLegField_1LegInstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCombinationLegField *arg1 = (CThostFtdcCombinationLegField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCombinationLegField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->LegInstrumentID, (const char *)arg2, 31-1);
      arg1->LegInstrumentID[31-1] = 0;
    } else {
      arg1->LegInstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCombinationLegField_1LegInstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCombinationLegField *arg1 = (CThostFtdcCombinationLegField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCombinationLegField **)&jarg1; 
  result = (char *) ((arg1)->LegInstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCombinationLegField_1Direction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcCombinationLegField *arg1 = (CThostFtdcCombinationLegField *) 0 ;
  TThostFtdcDirectionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCombinationLegField **)&jarg1; 
  arg2 = (TThostFtdcDirectionType)jarg2; 
  if (arg1) (arg1)->Direction = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcCombinationLegField_1Direction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcCombinationLegField *arg1 = (CThostFtdcCombinationLegField *) 0 ;
  TThostFtdcDirectionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCombinationLegField **)&jarg1; 
  result = (TThostFtdcDirectionType) ((arg1)->Direction);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCombinationLegField_1LegMultiple_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcCombinationLegField *arg1 = (CThostFtdcCombinationLegField *) 0 ;
  TThostFtdcLegMultipleType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCombinationLegField **)&jarg1; 
  arg2 = (TThostFtdcLegMultipleType)jarg2; 
  if (arg1) (arg1)->LegMultiple = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcCombinationLegField_1LegMultiple_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcCombinationLegField *arg1 = (CThostFtdcCombinationLegField *) 0 ;
  TThostFtdcLegMultipleType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCombinationLegField **)&jarg1; 
  result = (TThostFtdcLegMultipleType) ((arg1)->LegMultiple);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCombinationLegField_1ImplyLevel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcCombinationLegField *arg1 = (CThostFtdcCombinationLegField *) 0 ;
  TThostFtdcImplyLevelType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCombinationLegField **)&jarg1; 
  arg2 = (TThostFtdcImplyLevelType)jarg2; 
  if (arg1) (arg1)->ImplyLevel = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcCombinationLegField_1ImplyLevel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcCombinationLegField *arg1 = (CThostFtdcCombinationLegField *) 0 ;
  TThostFtdcImplyLevelType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCombinationLegField **)&jarg1; 
  result = (TThostFtdcImplyLevelType) ((arg1)->ImplyLevel);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcCombinationLegField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcCombinationLegField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcCombinationLegField *)new CThostFtdcCombinationLegField();
  *(CThostFtdcCombinationLegField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcCombinationLegField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcCombinationLegField *arg1 = (CThostFtdcCombinationLegField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcCombinationLegField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncStatusField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcSyncStatusField *arg1 = (CThostFtdcSyncStatusField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncStatusField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncStatusField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcSyncStatusField *arg1 = (CThostFtdcSyncStatusField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncStatusField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncStatusField_1DataSyncStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcSyncStatusField *arg1 = (CThostFtdcSyncStatusField *) 0 ;
  TThostFtdcDataSyncStatusType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncStatusField **)&jarg1; 
  arg2 = (TThostFtdcDataSyncStatusType)jarg2; 
  if (arg1) (arg1)->DataSyncStatus = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcSyncStatusField_1DataSyncStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcSyncStatusField *arg1 = (CThostFtdcSyncStatusField *) 0 ;
  TThostFtdcDataSyncStatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcSyncStatusField **)&jarg1; 
  result = (TThostFtdcDataSyncStatusType) ((arg1)->DataSyncStatus);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcSyncStatusField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcSyncStatusField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcSyncStatusField *)new CThostFtdcSyncStatusField();
  *(CThostFtdcSyncStatusField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcSyncStatusField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcSyncStatusField *arg1 = (CThostFtdcSyncStatusField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcSyncStatusField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryLinkManField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryLinkManField *arg1 = (CThostFtdcQryLinkManField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryLinkManField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryLinkManField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryLinkManField *arg1 = (CThostFtdcQryLinkManField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryLinkManField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryLinkManField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryLinkManField *arg1 = (CThostFtdcQryLinkManField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryLinkManField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryLinkManField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryLinkManField *arg1 = (CThostFtdcQryLinkManField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryLinkManField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryLinkManField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryLinkManField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryLinkManField *)new CThostFtdcQryLinkManField();
  *(CThostFtdcQryLinkManField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryLinkManField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryLinkManField *arg1 = (CThostFtdcQryLinkManField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryLinkManField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLinkManField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcLinkManField *arg1 = (CThostFtdcLinkManField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLinkManField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcLinkManField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcLinkManField *arg1 = (CThostFtdcLinkManField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLinkManField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLinkManField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcLinkManField *arg1 = (CThostFtdcLinkManField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLinkManField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcLinkManField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcLinkManField *arg1 = (CThostFtdcLinkManField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLinkManField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLinkManField_1PersonType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcLinkManField *arg1 = (CThostFtdcLinkManField *) 0 ;
  TThostFtdcPersonTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLinkManField **)&jarg1; 
  arg2 = (TThostFtdcPersonTypeType)jarg2; 
  if (arg1) (arg1)->PersonType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcLinkManField_1PersonType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcLinkManField *arg1 = (CThostFtdcLinkManField *) 0 ;
  TThostFtdcPersonTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLinkManField **)&jarg1; 
  result = (TThostFtdcPersonTypeType) ((arg1)->PersonType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLinkManField_1IdentifiedCardType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcLinkManField *arg1 = (CThostFtdcLinkManField *) 0 ;
  TThostFtdcIdCardTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLinkManField **)&jarg1; 
  arg2 = (TThostFtdcIdCardTypeType)jarg2; 
  if (arg1) (arg1)->IdentifiedCardType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcLinkManField_1IdentifiedCardType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcLinkManField *arg1 = (CThostFtdcLinkManField *) 0 ;
  TThostFtdcIdCardTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLinkManField **)&jarg1; 
  result = (TThostFtdcIdCardTypeType) ((arg1)->IdentifiedCardType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLinkManField_1IdentifiedCardNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcLinkManField *arg1 = (CThostFtdcLinkManField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLinkManField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->IdentifiedCardNo, (const char *)arg2, 51-1);
      arg1->IdentifiedCardNo[51-1] = 0;
    } else {
      arg1->IdentifiedCardNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcLinkManField_1IdentifiedCardNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcLinkManField *arg1 = (CThostFtdcLinkManField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLinkManField **)&jarg1; 
  result = (char *) ((arg1)->IdentifiedCardNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLinkManField_1PersonName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcLinkManField *arg1 = (CThostFtdcLinkManField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLinkManField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->PersonName, (const char *)arg2, 81-1);
      arg1->PersonName[81-1] = 0;
    } else {
      arg1->PersonName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcLinkManField_1PersonName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcLinkManField *arg1 = (CThostFtdcLinkManField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLinkManField **)&jarg1; 
  result = (char *) ((arg1)->PersonName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLinkManField_1Telephone_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcLinkManField *arg1 = (CThostFtdcLinkManField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLinkManField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Telephone, (const char *)arg2, 41-1);
      arg1->Telephone[41-1] = 0;
    } else {
      arg1->Telephone[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcLinkManField_1Telephone_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcLinkManField *arg1 = (CThostFtdcLinkManField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLinkManField **)&jarg1; 
  result = (char *) ((arg1)->Telephone);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLinkManField_1Address_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcLinkManField *arg1 = (CThostFtdcLinkManField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLinkManField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Address, (const char *)arg2, 101-1);
      arg1->Address[101-1] = 0;
    } else {
      arg1->Address[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcLinkManField_1Address_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcLinkManField *arg1 = (CThostFtdcLinkManField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLinkManField **)&jarg1; 
  result = (char *) ((arg1)->Address);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLinkManField_1ZipCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcLinkManField *arg1 = (CThostFtdcLinkManField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLinkManField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ZipCode, (const char *)arg2, 7-1);
      arg1->ZipCode[7-1] = 0;
    } else {
      arg1->ZipCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcLinkManField_1ZipCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcLinkManField *arg1 = (CThostFtdcLinkManField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLinkManField **)&jarg1; 
  result = (char *) ((arg1)->ZipCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLinkManField_1Priority_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcLinkManField *arg1 = (CThostFtdcLinkManField *) 0 ;
  TThostFtdcPriorityType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLinkManField **)&jarg1; 
  arg2 = (TThostFtdcPriorityType)jarg2; 
  if (arg1) (arg1)->Priority = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcLinkManField_1Priority_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcLinkManField *arg1 = (CThostFtdcLinkManField *) 0 ;
  TThostFtdcPriorityType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLinkManField **)&jarg1; 
  result = (TThostFtdcPriorityType) ((arg1)->Priority);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcLinkManField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcLinkManField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcLinkManField *)new CThostFtdcLinkManField();
  *(CThostFtdcLinkManField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcLinkManField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcLinkManField *arg1 = (CThostFtdcLinkManField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcLinkManField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryBrokerUserEventField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryBrokerUserEventField *arg1 = (CThostFtdcQryBrokerUserEventField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryBrokerUserEventField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryBrokerUserEventField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryBrokerUserEventField *arg1 = (CThostFtdcQryBrokerUserEventField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryBrokerUserEventField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryBrokerUserEventField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryBrokerUserEventField *arg1 = (CThostFtdcQryBrokerUserEventField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryBrokerUserEventField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryBrokerUserEventField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryBrokerUserEventField *arg1 = (CThostFtdcQryBrokerUserEventField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryBrokerUserEventField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryBrokerUserEventField_1UserEventType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcQryBrokerUserEventField *arg1 = (CThostFtdcQryBrokerUserEventField *) 0 ;
  TThostFtdcUserEventTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryBrokerUserEventField **)&jarg1; 
  arg2 = (TThostFtdcUserEventTypeType)jarg2; 
  if (arg1) (arg1)->UserEventType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryBrokerUserEventField_1UserEventType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcQryBrokerUserEventField *arg1 = (CThostFtdcQryBrokerUserEventField *) 0 ;
  TThostFtdcUserEventTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryBrokerUserEventField **)&jarg1; 
  result = (TThostFtdcUserEventTypeType) ((arg1)->UserEventType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryBrokerUserEventField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryBrokerUserEventField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryBrokerUserEventField *)new CThostFtdcQryBrokerUserEventField();
  *(CThostFtdcQryBrokerUserEventField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryBrokerUserEventField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryBrokerUserEventField *arg1 = (CThostFtdcQryBrokerUserEventField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryBrokerUserEventField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserEventField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerUserEventField *arg1 = (CThostFtdcBrokerUserEventField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserEventField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserEventField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerUserEventField *arg1 = (CThostFtdcBrokerUserEventField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserEventField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserEventField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerUserEventField *arg1 = (CThostFtdcBrokerUserEventField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserEventField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserEventField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerUserEventField *arg1 = (CThostFtdcBrokerUserEventField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserEventField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserEventField_1UserEventType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcBrokerUserEventField *arg1 = (CThostFtdcBrokerUserEventField *) 0 ;
  TThostFtdcUserEventTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserEventField **)&jarg1; 
  arg2 = (TThostFtdcUserEventTypeType)jarg2; 
  if (arg1) (arg1)->UserEventType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserEventField_1UserEventType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcBrokerUserEventField *arg1 = (CThostFtdcBrokerUserEventField *) 0 ;
  TThostFtdcUserEventTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserEventField **)&jarg1; 
  result = (TThostFtdcUserEventTypeType) ((arg1)->UserEventType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserEventField_1EventSequenceNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcBrokerUserEventField *arg1 = (CThostFtdcBrokerUserEventField *) 0 ;
  TThostFtdcSequenceNoType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserEventField **)&jarg1; 
  arg2 = (TThostFtdcSequenceNoType)jarg2; 
  if (arg1) (arg1)->EventSequenceNo = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserEventField_1EventSequenceNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcBrokerUserEventField *arg1 = (CThostFtdcBrokerUserEventField *) 0 ;
  TThostFtdcSequenceNoType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserEventField **)&jarg1; 
  result = (TThostFtdcSequenceNoType) ((arg1)->EventSequenceNo);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserEventField_1EventDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerUserEventField *arg1 = (CThostFtdcBrokerUserEventField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserEventField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->EventDate, (const char *)arg2, 9-1);
      arg1->EventDate[9-1] = 0;
    } else {
      arg1->EventDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserEventField_1EventDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerUserEventField *arg1 = (CThostFtdcBrokerUserEventField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserEventField **)&jarg1; 
  result = (char *) ((arg1)->EventDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserEventField_1EventTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerUserEventField *arg1 = (CThostFtdcBrokerUserEventField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserEventField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->EventTime, (const char *)arg2, 9-1);
      arg1->EventTime[9-1] = 0;
    } else {
      arg1->EventTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserEventField_1EventTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerUserEventField *arg1 = (CThostFtdcBrokerUserEventField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserEventField **)&jarg1; 
  result = (char *) ((arg1)->EventTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserEventField_1UserEventInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerUserEventField *arg1 = (CThostFtdcBrokerUserEventField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserEventField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserEventInfo, (const char *)arg2, 1025-1);
      arg1->UserEventInfo[1025-1] = 0;
    } else {
      arg1->UserEventInfo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserEventField_1UserEventInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerUserEventField *arg1 = (CThostFtdcBrokerUserEventField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserEventField **)&jarg1; 
  result = (char *) ((arg1)->UserEventInfo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserEventField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerUserEventField *arg1 = (CThostFtdcBrokerUserEventField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserEventField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserEventField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerUserEventField *arg1 = (CThostFtdcBrokerUserEventField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserEventField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserEventField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerUserEventField *arg1 = (CThostFtdcBrokerUserEventField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserEventField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserEventField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerUserEventField *arg1 = (CThostFtdcBrokerUserEventField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserEventField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcBrokerUserEventField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcBrokerUserEventField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcBrokerUserEventField *)new CThostFtdcBrokerUserEventField();
  *(CThostFtdcBrokerUserEventField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcBrokerUserEventField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcBrokerUserEventField *arg1 = (CThostFtdcBrokerUserEventField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcBrokerUserEventField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryContractBankField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryContractBankField *arg1 = (CThostFtdcQryContractBankField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryContractBankField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryContractBankField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryContractBankField *arg1 = (CThostFtdcQryContractBankField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryContractBankField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryContractBankField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryContractBankField *arg1 = (CThostFtdcQryContractBankField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryContractBankField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryContractBankField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryContractBankField *arg1 = (CThostFtdcQryContractBankField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryContractBankField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryContractBankField_1BankBrchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryContractBankField *arg1 = (CThostFtdcQryContractBankField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryContractBankField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBrchID, (const char *)arg2, 5-1);
      arg1->BankBrchID[5-1] = 0;
    } else {
      arg1->BankBrchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryContractBankField_1BankBrchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryContractBankField *arg1 = (CThostFtdcQryContractBankField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryContractBankField **)&jarg1; 
  result = (char *) ((arg1)->BankBrchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryContractBankField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryContractBankField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryContractBankField *)new CThostFtdcQryContractBankField();
  *(CThostFtdcQryContractBankField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryContractBankField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryContractBankField *arg1 = (CThostFtdcQryContractBankField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryContractBankField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcContractBankField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcContractBankField *arg1 = (CThostFtdcContractBankField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcContractBankField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcContractBankField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcContractBankField *arg1 = (CThostFtdcContractBankField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcContractBankField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcContractBankField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcContractBankField *arg1 = (CThostFtdcContractBankField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcContractBankField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcContractBankField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcContractBankField *arg1 = (CThostFtdcContractBankField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcContractBankField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcContractBankField_1BankBrchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcContractBankField *arg1 = (CThostFtdcContractBankField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcContractBankField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBrchID, (const char *)arg2, 5-1);
      arg1->BankBrchID[5-1] = 0;
    } else {
      arg1->BankBrchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcContractBankField_1BankBrchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcContractBankField *arg1 = (CThostFtdcContractBankField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcContractBankField **)&jarg1; 
  result = (char *) ((arg1)->BankBrchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcContractBankField_1BankName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcContractBankField *arg1 = (CThostFtdcContractBankField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcContractBankField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankName, (const char *)arg2, 101-1);
      arg1->BankName[101-1] = 0;
    } else {
      arg1->BankName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcContractBankField_1BankName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcContractBankField *arg1 = (CThostFtdcContractBankField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcContractBankField **)&jarg1; 
  result = (char *) ((arg1)->BankName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcContractBankField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcContractBankField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcContractBankField *)new CThostFtdcContractBankField();
  *(CThostFtdcContractBankField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcContractBankField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcContractBankField *arg1 = (CThostFtdcContractBankField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcContractBankField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1OpenDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OpenDate, (const char *)arg2, 9-1);
      arg1->OpenDate[9-1] = 0;
    } else {
      arg1->OpenDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1OpenDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  result = (char *) ((arg1)->OpenDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1SettlementID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  TThostFtdcSettlementIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  arg2 = (TThostFtdcSettlementIDType)jarg2; 
  if (arg1) (arg1)->SettlementID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1SettlementID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  TThostFtdcSettlementIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  result = (TThostFtdcSettlementIDType) ((arg1)->SettlementID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1ComTradeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ComTradeID, (const char *)arg2, 21-1);
      arg1->ComTradeID[21-1] = 0;
    } else {
      arg1->ComTradeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1ComTradeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  result = (char *) ((arg1)->ComTradeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1TradeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeID, (const char *)arg2, 21-1);
      arg1->TradeID[21-1] = 0;
    } else {
      arg1->TradeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1TradeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  result = (char *) ((arg1)->TradeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1HedgeFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  TThostFtdcHedgeFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  arg2 = (TThostFtdcHedgeFlagType)jarg2; 
  if (arg1) (arg1)->HedgeFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1HedgeFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  TThostFtdcHedgeFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  result = (TThostFtdcHedgeFlagType) ((arg1)->HedgeFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1Direction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  TThostFtdcDirectionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  arg2 = (TThostFtdcDirectionType)jarg2; 
  if (arg1) (arg1)->Direction = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1Direction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  TThostFtdcDirectionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  result = (TThostFtdcDirectionType) ((arg1)->Direction);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1TotalAmt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->TotalAmt = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1TotalAmt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->TotalAmt);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1Margin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Margin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1Margin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Margin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1ExchMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->ExchMargin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1ExchMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->ExchMargin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1MarginRateByMoney_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->MarginRateByMoney = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1MarginRateByMoney_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->MarginRateByMoney);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1MarginRateByVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->MarginRateByVolume = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1MarginRateByVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->MarginRateByVolume);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1LegID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  TThostFtdcLegIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  arg2 = (TThostFtdcLegIDType)jarg2; 
  if (arg1) (arg1)->LegID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1LegID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  TThostFtdcLegIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  result = (TThostFtdcLegIDType) ((arg1)->LegID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1LegMultiple_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  TThostFtdcLegMultipleType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  arg2 = (TThostFtdcLegMultipleType)jarg2; 
  if (arg1) (arg1)->LegMultiple = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1LegMultiple_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  TThostFtdcLegMultipleType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  result = (TThostFtdcLegMultipleType) ((arg1)->LegMultiple);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1CombInstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CombInstrumentID, (const char *)arg2, 31-1);
      arg1->CombInstrumentID[31-1] = 0;
    } else {
      arg1->CombInstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1CombInstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  result = (char *) ((arg1)->CombInstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1TradeGroupID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  TThostFtdcTradeGroupIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  arg2 = (TThostFtdcTradeGroupIDType)jarg2; 
  if (arg1) (arg1)->TradeGroupID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorPositionCombineDetailField_1TradeGroupID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  TThostFtdcTradeGroupIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  result = (TThostFtdcTradeGroupIDType) ((arg1)->TradeGroupID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcInvestorPositionCombineDetailField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcInvestorPositionCombineDetailField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcInvestorPositionCombineDetailField *)new CThostFtdcInvestorPositionCombineDetailField();
  *(CThostFtdcInvestorPositionCombineDetailField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcInvestorPositionCombineDetailField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcInvestorPositionCombineDetailField *arg1 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1OrderRef_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderRef, (const char *)arg2, 13-1);
      arg1->OrderRef[13-1] = 0;
    } else {
      arg1->OrderRef[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1OrderRef_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  result = (char *) ((arg1)->OrderRef);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1OrderPriceType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcOrderPriceTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  arg2 = (TThostFtdcOrderPriceTypeType)jarg2; 
  if (arg1) (arg1)->OrderPriceType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1OrderPriceType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcOrderPriceTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  result = (TThostFtdcOrderPriceTypeType) ((arg1)->OrderPriceType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1Direction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcDirectionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  arg2 = (TThostFtdcDirectionType)jarg2; 
  if (arg1) (arg1)->Direction = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1Direction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcDirectionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  result = (TThostFtdcDirectionType) ((arg1)->Direction);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1CombOffsetFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CombOffsetFlag, (const char *)arg2, 5-1);
      arg1->CombOffsetFlag[5-1] = 0;
    } else {
      arg1->CombOffsetFlag[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1CombOffsetFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  result = (char *) ((arg1)->CombOffsetFlag);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1CombHedgeFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CombHedgeFlag, (const char *)arg2, 5-1);
      arg1->CombHedgeFlag[5-1] = 0;
    } else {
      arg1->CombHedgeFlag[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1CombHedgeFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  result = (char *) ((arg1)->CombHedgeFlag);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1LimitPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->LimitPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1LimitPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->LimitPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1VolumeTotalOriginal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->VolumeTotalOriginal = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1VolumeTotalOriginal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->VolumeTotalOriginal);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1TimeCondition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcTimeConditionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  arg2 = (TThostFtdcTimeConditionType)jarg2; 
  if (arg1) (arg1)->TimeCondition = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1TimeCondition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcTimeConditionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  result = (TThostFtdcTimeConditionType) ((arg1)->TimeCondition);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1GTDDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->GTDDate, (const char *)arg2, 9-1);
      arg1->GTDDate[9-1] = 0;
    } else {
      arg1->GTDDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1GTDDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  result = (char *) ((arg1)->GTDDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1VolumeCondition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcVolumeConditionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  arg2 = (TThostFtdcVolumeConditionType)jarg2; 
  if (arg1) (arg1)->VolumeCondition = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1VolumeCondition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcVolumeConditionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  result = (TThostFtdcVolumeConditionType) ((arg1)->VolumeCondition);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1MinVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->MinVolume = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1MinVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->MinVolume);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1ContingentCondition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcContingentConditionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  arg2 = (TThostFtdcContingentConditionType)jarg2; 
  if (arg1) (arg1)->ContingentCondition = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1ContingentCondition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcContingentConditionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  result = (TThostFtdcContingentConditionType) ((arg1)->ContingentCondition);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1StopPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->StopPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1StopPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->StopPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1ForceCloseReason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcForceCloseReasonType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  arg2 = (TThostFtdcForceCloseReasonType)jarg2; 
  if (arg1) (arg1)->ForceCloseReason = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1ForceCloseReason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcForceCloseReasonType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  result = (TThostFtdcForceCloseReasonType) ((arg1)->ForceCloseReason);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1IsAutoSuspend_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->IsAutoSuspend = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1IsAutoSuspend_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->IsAutoSuspend);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1BusinessUnit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BusinessUnit, (const char *)arg2, 21-1);
      arg1->BusinessUnit[21-1] = 0;
    } else {
      arg1->BusinessUnit[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1BusinessUnit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  result = (char *) ((arg1)->BusinessUnit);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1RequestID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcRequestIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  arg2 = (TThostFtdcRequestIDType)jarg2; 
  if (arg1) (arg1)->RequestID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1RequestID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcRequestIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  result = (TThostFtdcRequestIDType) ((arg1)->RequestID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1UserForceClose_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->UserForceClose = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1UserForceClose_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->UserForceClose);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1ParkedOrderID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ParkedOrderID, (const char *)arg2, 13-1);
      arg1->ParkedOrderID[13-1] = 0;
    } else {
      arg1->ParkedOrderID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1ParkedOrderID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  result = (char *) ((arg1)->ParkedOrderID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1UserType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcUserTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  arg2 = (TThostFtdcUserTypeType)jarg2; 
  if (arg1) (arg1)->UserType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1UserType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcUserTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  result = (TThostFtdcUserTypeType) ((arg1)->UserType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1Status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcParkedOrderStatusType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  arg2 = (TThostFtdcParkedOrderStatusType)jarg2; 
  if (arg1) (arg1)->Status = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1Status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcParkedOrderStatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  result = (TThostFtdcParkedOrderStatusType) ((arg1)->Status);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1ErrorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcErrorIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  arg2 = (TThostFtdcErrorIDType)jarg2; 
  if (arg1) (arg1)->ErrorID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1ErrorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcErrorIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  result = (TThostFtdcErrorIDType) ((arg1)->ErrorID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1ErrorMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ErrorMsg, (const char *)arg2, 81-1);
      arg1->ErrorMsg[81-1] = 0;
    } else {
      arg1->ErrorMsg[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1ErrorMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  result = (char *) ((arg1)->ErrorMsg);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1IsSwapOrder_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->IsSwapOrder = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderField_1IsSwapOrder_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->IsSwapOrder);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcParkedOrderField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcParkedOrderField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcParkedOrderField *)new CThostFtdcParkedOrderField();
  *(CThostFtdcParkedOrderField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcParkedOrderField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcParkedOrderField *arg1 = (CThostFtdcParkedOrderField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcParkedOrderField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1OrderActionRef_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  TThostFtdcOrderActionRefType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcOrderActionRefType)jarg2; 
  if (arg1) (arg1)->OrderActionRef = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1OrderActionRef_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  TThostFtdcOrderActionRefType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  result = (TThostFtdcOrderActionRefType) ((arg1)->OrderActionRef);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1OrderRef_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderRef, (const char *)arg2, 13-1);
      arg1->OrderRef[13-1] = 0;
    } else {
      arg1->OrderRef[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1OrderRef_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->OrderRef);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1RequestID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  TThostFtdcRequestIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcRequestIDType)jarg2; 
  if (arg1) (arg1)->RequestID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1RequestID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  TThostFtdcRequestIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  result = (TThostFtdcRequestIDType) ((arg1)->RequestID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1FrontID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  TThostFtdcFrontIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcFrontIDType)jarg2; 
  if (arg1) (arg1)->FrontID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1FrontID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  TThostFtdcFrontIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  result = (TThostFtdcFrontIDType) ((arg1)->FrontID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1OrderSysID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderSysID, (const char *)arg2, 21-1);
      arg1->OrderSysID[21-1] = 0;
    } else {
      arg1->OrderSysID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1OrderSysID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->OrderSysID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1ActionFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  TThostFtdcActionFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcActionFlagType)jarg2; 
  if (arg1) (arg1)->ActionFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1ActionFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  TThostFtdcActionFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  result = (TThostFtdcActionFlagType) ((arg1)->ActionFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1LimitPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->LimitPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1LimitPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->LimitPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1VolumeChange_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->VolumeChange = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1VolumeChange_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->VolumeChange);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1ParkedOrderActionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ParkedOrderActionID, (const char *)arg2, 13-1);
      arg1->ParkedOrderActionID[13-1] = 0;
    } else {
      arg1->ParkedOrderActionID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1ParkedOrderActionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->ParkedOrderActionID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1UserType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  TThostFtdcUserTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcUserTypeType)jarg2; 
  if (arg1) (arg1)->UserType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1UserType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  TThostFtdcUserTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  result = (TThostFtdcUserTypeType) ((arg1)->UserType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1Status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  TThostFtdcParkedOrderStatusType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcParkedOrderStatusType)jarg2; 
  if (arg1) (arg1)->Status = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1Status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  TThostFtdcParkedOrderStatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  result = (TThostFtdcParkedOrderStatusType) ((arg1)->Status);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1ErrorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  TThostFtdcErrorIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcErrorIDType)jarg2; 
  if (arg1) (arg1)->ErrorID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1ErrorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  TThostFtdcErrorIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  result = (TThostFtdcErrorIDType) ((arg1)->ErrorID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1ErrorMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ErrorMsg, (const char *)arg2, 81-1);
      arg1->ErrorMsg[81-1] = 0;
    } else {
      arg1->ErrorMsg[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcParkedOrderActionField_1ErrorMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->ErrorMsg);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcParkedOrderActionField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcParkedOrderActionField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcParkedOrderActionField *)new CThostFtdcParkedOrderActionField();
  *(CThostFtdcParkedOrderActionField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcParkedOrderActionField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcParkedOrderActionField *arg1 = (CThostFtdcParkedOrderActionField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcParkedOrderActionField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryParkedOrderField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryParkedOrderField *arg1 = (CThostFtdcQryParkedOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryParkedOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryParkedOrderField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryParkedOrderField *arg1 = (CThostFtdcQryParkedOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryParkedOrderField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryParkedOrderField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryParkedOrderField *arg1 = (CThostFtdcQryParkedOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryParkedOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryParkedOrderField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryParkedOrderField *arg1 = (CThostFtdcQryParkedOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryParkedOrderField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryParkedOrderField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryParkedOrderField *arg1 = (CThostFtdcQryParkedOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryParkedOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryParkedOrderField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryParkedOrderField *arg1 = (CThostFtdcQryParkedOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryParkedOrderField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryParkedOrderField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryParkedOrderField *arg1 = (CThostFtdcQryParkedOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryParkedOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryParkedOrderField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryParkedOrderField *arg1 = (CThostFtdcQryParkedOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryParkedOrderField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryParkedOrderField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryParkedOrderField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryParkedOrderField *)new CThostFtdcQryParkedOrderField();
  *(CThostFtdcQryParkedOrderField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryParkedOrderField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryParkedOrderField *arg1 = (CThostFtdcQryParkedOrderField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryParkedOrderField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryParkedOrderActionField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryParkedOrderActionField *arg1 = (CThostFtdcQryParkedOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryParkedOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryParkedOrderActionField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryParkedOrderActionField *arg1 = (CThostFtdcQryParkedOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryParkedOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryParkedOrderActionField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryParkedOrderActionField *arg1 = (CThostFtdcQryParkedOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryParkedOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryParkedOrderActionField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryParkedOrderActionField *arg1 = (CThostFtdcQryParkedOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryParkedOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryParkedOrderActionField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryParkedOrderActionField *arg1 = (CThostFtdcQryParkedOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryParkedOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryParkedOrderActionField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryParkedOrderActionField *arg1 = (CThostFtdcQryParkedOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryParkedOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryParkedOrderActionField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryParkedOrderActionField *arg1 = (CThostFtdcQryParkedOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryParkedOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryParkedOrderActionField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryParkedOrderActionField *arg1 = (CThostFtdcQryParkedOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryParkedOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryParkedOrderActionField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryParkedOrderActionField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryParkedOrderActionField *)new CThostFtdcQryParkedOrderActionField();
  *(CThostFtdcQryParkedOrderActionField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryParkedOrderActionField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryParkedOrderActionField *arg1 = (CThostFtdcQryParkedOrderActionField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryParkedOrderActionField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRemoveParkedOrderField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRemoveParkedOrderField *arg1 = (CThostFtdcRemoveParkedOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRemoveParkedOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRemoveParkedOrderField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRemoveParkedOrderField *arg1 = (CThostFtdcRemoveParkedOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRemoveParkedOrderField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRemoveParkedOrderField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRemoveParkedOrderField *arg1 = (CThostFtdcRemoveParkedOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRemoveParkedOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRemoveParkedOrderField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRemoveParkedOrderField *arg1 = (CThostFtdcRemoveParkedOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRemoveParkedOrderField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRemoveParkedOrderField_1ParkedOrderID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRemoveParkedOrderField *arg1 = (CThostFtdcRemoveParkedOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRemoveParkedOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ParkedOrderID, (const char *)arg2, 13-1);
      arg1->ParkedOrderID[13-1] = 0;
    } else {
      arg1->ParkedOrderID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRemoveParkedOrderField_1ParkedOrderID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRemoveParkedOrderField *arg1 = (CThostFtdcRemoveParkedOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRemoveParkedOrderField **)&jarg1; 
  result = (char *) ((arg1)->ParkedOrderID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcRemoveParkedOrderField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcRemoveParkedOrderField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcRemoveParkedOrderField *)new CThostFtdcRemoveParkedOrderField();
  *(CThostFtdcRemoveParkedOrderField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcRemoveParkedOrderField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcRemoveParkedOrderField *arg1 = (CThostFtdcRemoveParkedOrderField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcRemoveParkedOrderField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRemoveParkedOrderActionField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRemoveParkedOrderActionField *arg1 = (CThostFtdcRemoveParkedOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRemoveParkedOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRemoveParkedOrderActionField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRemoveParkedOrderActionField *arg1 = (CThostFtdcRemoveParkedOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRemoveParkedOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRemoveParkedOrderActionField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRemoveParkedOrderActionField *arg1 = (CThostFtdcRemoveParkedOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRemoveParkedOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRemoveParkedOrderActionField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRemoveParkedOrderActionField *arg1 = (CThostFtdcRemoveParkedOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRemoveParkedOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRemoveParkedOrderActionField_1ParkedOrderActionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRemoveParkedOrderActionField *arg1 = (CThostFtdcRemoveParkedOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRemoveParkedOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ParkedOrderActionID, (const char *)arg2, 13-1);
      arg1->ParkedOrderActionID[13-1] = 0;
    } else {
      arg1->ParkedOrderActionID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRemoveParkedOrderActionField_1ParkedOrderActionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRemoveParkedOrderActionField *arg1 = (CThostFtdcRemoveParkedOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRemoveParkedOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->ParkedOrderActionID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcRemoveParkedOrderActionField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcRemoveParkedOrderActionField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcRemoveParkedOrderActionField *)new CThostFtdcRemoveParkedOrderActionField();
  *(CThostFtdcRemoveParkedOrderActionField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcRemoveParkedOrderActionField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcRemoveParkedOrderActionField *arg1 = (CThostFtdcRemoveParkedOrderActionField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcRemoveParkedOrderActionField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorWithdrawAlgorithmField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorWithdrawAlgorithmField *arg1 = (CThostFtdcInvestorWithdrawAlgorithmField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorWithdrawAlgorithmField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorWithdrawAlgorithmField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorWithdrawAlgorithmField *arg1 = (CThostFtdcInvestorWithdrawAlgorithmField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorWithdrawAlgorithmField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorWithdrawAlgorithmField_1InvestorRange_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcInvestorWithdrawAlgorithmField *arg1 = (CThostFtdcInvestorWithdrawAlgorithmField *) 0 ;
  TThostFtdcInvestorRangeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorWithdrawAlgorithmField **)&jarg1; 
  arg2 = (TThostFtdcInvestorRangeType)jarg2; 
  if (arg1) (arg1)->InvestorRange = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorWithdrawAlgorithmField_1InvestorRange_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcInvestorWithdrawAlgorithmField *arg1 = (CThostFtdcInvestorWithdrawAlgorithmField *) 0 ;
  TThostFtdcInvestorRangeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorWithdrawAlgorithmField **)&jarg1; 
  result = (TThostFtdcInvestorRangeType) ((arg1)->InvestorRange);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorWithdrawAlgorithmField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorWithdrawAlgorithmField *arg1 = (CThostFtdcInvestorWithdrawAlgorithmField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorWithdrawAlgorithmField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorWithdrawAlgorithmField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorWithdrawAlgorithmField *arg1 = (CThostFtdcInvestorWithdrawAlgorithmField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorWithdrawAlgorithmField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorWithdrawAlgorithmField_1UsingRatio_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorWithdrawAlgorithmField *arg1 = (CThostFtdcInvestorWithdrawAlgorithmField *) 0 ;
  TThostFtdcRatioType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorWithdrawAlgorithmField **)&jarg1; 
  arg2 = (TThostFtdcRatioType)jarg2; 
  if (arg1) (arg1)->UsingRatio = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorWithdrawAlgorithmField_1UsingRatio_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorWithdrawAlgorithmField *arg1 = (CThostFtdcInvestorWithdrawAlgorithmField *) 0 ;
  TThostFtdcRatioType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorWithdrawAlgorithmField **)&jarg1; 
  result = (TThostFtdcRatioType) ((arg1)->UsingRatio);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcInvestorWithdrawAlgorithmField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcInvestorWithdrawAlgorithmField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcInvestorWithdrawAlgorithmField *)new CThostFtdcInvestorWithdrawAlgorithmField();
  *(CThostFtdcInvestorWithdrawAlgorithmField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcInvestorWithdrawAlgorithmField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcInvestorWithdrawAlgorithmField *arg1 = (CThostFtdcInvestorWithdrawAlgorithmField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcInvestorWithdrawAlgorithmField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInvestorPositionCombineDetailField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryInvestorPositionCombineDetailField *arg1 = (CThostFtdcQryInvestorPositionCombineDetailField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInvestorPositionCombineDetailField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInvestorPositionCombineDetailField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryInvestorPositionCombineDetailField *arg1 = (CThostFtdcQryInvestorPositionCombineDetailField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInvestorPositionCombineDetailField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInvestorPositionCombineDetailField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryInvestorPositionCombineDetailField *arg1 = (CThostFtdcQryInvestorPositionCombineDetailField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInvestorPositionCombineDetailField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInvestorPositionCombineDetailField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryInvestorPositionCombineDetailField *arg1 = (CThostFtdcQryInvestorPositionCombineDetailField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInvestorPositionCombineDetailField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInvestorPositionCombineDetailField_1CombInstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryInvestorPositionCombineDetailField *arg1 = (CThostFtdcQryInvestorPositionCombineDetailField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInvestorPositionCombineDetailField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CombInstrumentID, (const char *)arg2, 31-1);
      arg1->CombInstrumentID[31-1] = 0;
    } else {
      arg1->CombInstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInvestorPositionCombineDetailField_1CombInstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryInvestorPositionCombineDetailField *arg1 = (CThostFtdcQryInvestorPositionCombineDetailField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInvestorPositionCombineDetailField **)&jarg1; 
  result = (char *) ((arg1)->CombInstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryInvestorPositionCombineDetailField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryInvestorPositionCombineDetailField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryInvestorPositionCombineDetailField *)new CThostFtdcQryInvestorPositionCombineDetailField();
  *(CThostFtdcQryInvestorPositionCombineDetailField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryInvestorPositionCombineDetailField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryInvestorPositionCombineDetailField *arg1 = (CThostFtdcQryInvestorPositionCombineDetailField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryInvestorPositionCombineDetailField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataAveragePriceField_1AveragePrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcMarketDataAveragePriceField *arg1 = (CThostFtdcMarketDataAveragePriceField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataAveragePriceField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->AveragePrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarketDataAveragePriceField_1AveragePrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcMarketDataAveragePriceField *arg1 = (CThostFtdcMarketDataAveragePriceField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarketDataAveragePriceField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->AveragePrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcMarketDataAveragePriceField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcMarketDataAveragePriceField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcMarketDataAveragePriceField *)new CThostFtdcMarketDataAveragePriceField();
  *(CThostFtdcMarketDataAveragePriceField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcMarketDataAveragePriceField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcMarketDataAveragePriceField *arg1 = (CThostFtdcMarketDataAveragePriceField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcMarketDataAveragePriceField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyInvestorPasswordField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcVerifyInvestorPasswordField *arg1 = (CThostFtdcVerifyInvestorPasswordField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyInvestorPasswordField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyInvestorPasswordField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcVerifyInvestorPasswordField *arg1 = (CThostFtdcVerifyInvestorPasswordField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyInvestorPasswordField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyInvestorPasswordField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcVerifyInvestorPasswordField *arg1 = (CThostFtdcVerifyInvestorPasswordField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyInvestorPasswordField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyInvestorPasswordField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcVerifyInvestorPasswordField *arg1 = (CThostFtdcVerifyInvestorPasswordField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyInvestorPasswordField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyInvestorPasswordField_1Password_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcVerifyInvestorPasswordField *arg1 = (CThostFtdcVerifyInvestorPasswordField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyInvestorPasswordField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Password, (const char *)arg2, 41-1);
      arg1->Password[41-1] = 0;
    } else {
      arg1->Password[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyInvestorPasswordField_1Password_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcVerifyInvestorPasswordField *arg1 = (CThostFtdcVerifyInvestorPasswordField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyInvestorPasswordField **)&jarg1; 
  result = (char *) ((arg1)->Password);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcVerifyInvestorPasswordField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcVerifyInvestorPasswordField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcVerifyInvestorPasswordField *)new CThostFtdcVerifyInvestorPasswordField();
  *(CThostFtdcVerifyInvestorPasswordField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcVerifyInvestorPasswordField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcVerifyInvestorPasswordField *arg1 = (CThostFtdcVerifyInvestorPasswordField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcVerifyInvestorPasswordField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserIPField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcUserIPField *arg1 = (CThostFtdcUserIPField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserIPField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserIPField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcUserIPField *arg1 = (CThostFtdcUserIPField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserIPField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserIPField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcUserIPField *arg1 = (CThostFtdcUserIPField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserIPField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserIPField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcUserIPField *arg1 = (CThostFtdcUserIPField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserIPField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserIPField_1IPAddress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcUserIPField *arg1 = (CThostFtdcUserIPField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserIPField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->IPAddress, (const char *)arg2, 16-1);
      arg1->IPAddress[16-1] = 0;
    } else {
      arg1->IPAddress[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserIPField_1IPAddress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcUserIPField *arg1 = (CThostFtdcUserIPField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserIPField **)&jarg1; 
  result = (char *) ((arg1)->IPAddress);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserIPField_1IPMask_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcUserIPField *arg1 = (CThostFtdcUserIPField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserIPField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->IPMask, (const char *)arg2, 16-1);
      arg1->IPMask[16-1] = 0;
    } else {
      arg1->IPMask[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserIPField_1IPMask_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcUserIPField *arg1 = (CThostFtdcUserIPField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserIPField **)&jarg1; 
  result = (char *) ((arg1)->IPMask);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserIPField_1MacAddress_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcUserIPField *arg1 = (CThostFtdcUserIPField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserIPField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->MacAddress, (const char *)arg2, 21-1);
      arg1->MacAddress[21-1] = 0;
    } else {
      arg1->MacAddress[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserIPField_1MacAddress_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcUserIPField *arg1 = (CThostFtdcUserIPField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserIPField **)&jarg1; 
  result = (char *) ((arg1)->MacAddress);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcUserIPField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcUserIPField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcUserIPField *)new CThostFtdcUserIPField();
  *(CThostFtdcUserIPField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcUserIPField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcUserIPField *arg1 = (CThostFtdcUserIPField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcUserIPField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingNoticeInfoField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradingNoticeInfoField *arg1 = (CThostFtdcTradingNoticeInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingNoticeInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingNoticeInfoField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradingNoticeInfoField *arg1 = (CThostFtdcTradingNoticeInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingNoticeInfoField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingNoticeInfoField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradingNoticeInfoField *arg1 = (CThostFtdcTradingNoticeInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingNoticeInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingNoticeInfoField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradingNoticeInfoField *arg1 = (CThostFtdcTradingNoticeInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingNoticeInfoField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingNoticeInfoField_1SendTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradingNoticeInfoField *arg1 = (CThostFtdcTradingNoticeInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingNoticeInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->SendTime, (const char *)arg2, 9-1);
      arg1->SendTime[9-1] = 0;
    } else {
      arg1->SendTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingNoticeInfoField_1SendTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradingNoticeInfoField *arg1 = (CThostFtdcTradingNoticeInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingNoticeInfoField **)&jarg1; 
  result = (char *) ((arg1)->SendTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingNoticeInfoField_1FieldContent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradingNoticeInfoField *arg1 = (CThostFtdcTradingNoticeInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingNoticeInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->FieldContent, (const char *)arg2, 501-1);
      arg1->FieldContent[501-1] = 0;
    } else {
      arg1->FieldContent[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingNoticeInfoField_1FieldContent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradingNoticeInfoField *arg1 = (CThostFtdcTradingNoticeInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingNoticeInfoField **)&jarg1; 
  result = (char *) ((arg1)->FieldContent);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingNoticeInfoField_1SequenceSeries_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  CThostFtdcTradingNoticeInfoField *arg1 = (CThostFtdcTradingNoticeInfoField *) 0 ;
  TThostFtdcSequenceSeriesType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingNoticeInfoField **)&jarg1; 
  arg2 = (TThostFtdcSequenceSeriesType)jarg2; 
  if (arg1) (arg1)->SequenceSeries = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingNoticeInfoField_1SequenceSeries_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  CThostFtdcTradingNoticeInfoField *arg1 = (CThostFtdcTradingNoticeInfoField *) 0 ;
  TThostFtdcSequenceSeriesType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingNoticeInfoField **)&jarg1; 
  result = (TThostFtdcSequenceSeriesType) ((arg1)->SequenceSeries);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingNoticeInfoField_1SequenceNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcTradingNoticeInfoField *arg1 = (CThostFtdcTradingNoticeInfoField *) 0 ;
  TThostFtdcSequenceNoType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingNoticeInfoField **)&jarg1; 
  arg2 = (TThostFtdcSequenceNoType)jarg2; 
  if (arg1) (arg1)->SequenceNo = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingNoticeInfoField_1SequenceNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcTradingNoticeInfoField *arg1 = (CThostFtdcTradingNoticeInfoField *) 0 ;
  TThostFtdcSequenceNoType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingNoticeInfoField **)&jarg1; 
  result = (TThostFtdcSequenceNoType) ((arg1)->SequenceNo);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcTradingNoticeInfoField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcTradingNoticeInfoField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcTradingNoticeInfoField *)new CThostFtdcTradingNoticeInfoField();
  *(CThostFtdcTradingNoticeInfoField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcTradingNoticeInfoField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcTradingNoticeInfoField *arg1 = (CThostFtdcTradingNoticeInfoField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcTradingNoticeInfoField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingNoticeField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradingNoticeField *arg1 = (CThostFtdcTradingNoticeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingNoticeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingNoticeField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradingNoticeField *arg1 = (CThostFtdcTradingNoticeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingNoticeField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingNoticeField_1InvestorRange_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcTradingNoticeField *arg1 = (CThostFtdcTradingNoticeField *) 0 ;
  TThostFtdcInvestorRangeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingNoticeField **)&jarg1; 
  arg2 = (TThostFtdcInvestorRangeType)jarg2; 
  if (arg1) (arg1)->InvestorRange = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingNoticeField_1InvestorRange_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcTradingNoticeField *arg1 = (CThostFtdcTradingNoticeField *) 0 ;
  TThostFtdcInvestorRangeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingNoticeField **)&jarg1; 
  result = (TThostFtdcInvestorRangeType) ((arg1)->InvestorRange);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingNoticeField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradingNoticeField *arg1 = (CThostFtdcTradingNoticeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingNoticeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingNoticeField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradingNoticeField *arg1 = (CThostFtdcTradingNoticeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingNoticeField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingNoticeField_1SequenceSeries_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  CThostFtdcTradingNoticeField *arg1 = (CThostFtdcTradingNoticeField *) 0 ;
  TThostFtdcSequenceSeriesType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingNoticeField **)&jarg1; 
  arg2 = (TThostFtdcSequenceSeriesType)jarg2; 
  if (arg1) (arg1)->SequenceSeries = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingNoticeField_1SequenceSeries_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  CThostFtdcTradingNoticeField *arg1 = (CThostFtdcTradingNoticeField *) 0 ;
  TThostFtdcSequenceSeriesType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingNoticeField **)&jarg1; 
  result = (TThostFtdcSequenceSeriesType) ((arg1)->SequenceSeries);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingNoticeField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradingNoticeField *arg1 = (CThostFtdcTradingNoticeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingNoticeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingNoticeField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradingNoticeField *arg1 = (CThostFtdcTradingNoticeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingNoticeField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingNoticeField_1SendTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradingNoticeField *arg1 = (CThostFtdcTradingNoticeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingNoticeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->SendTime, (const char *)arg2, 9-1);
      arg1->SendTime[9-1] = 0;
    } else {
      arg1->SendTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingNoticeField_1SendTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradingNoticeField *arg1 = (CThostFtdcTradingNoticeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingNoticeField **)&jarg1; 
  result = (char *) ((arg1)->SendTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingNoticeField_1SequenceNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcTradingNoticeField *arg1 = (CThostFtdcTradingNoticeField *) 0 ;
  TThostFtdcSequenceNoType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingNoticeField **)&jarg1; 
  arg2 = (TThostFtdcSequenceNoType)jarg2; 
  if (arg1) (arg1)->SequenceNo = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingNoticeField_1SequenceNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcTradingNoticeField *arg1 = (CThostFtdcTradingNoticeField *) 0 ;
  TThostFtdcSequenceNoType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingNoticeField **)&jarg1; 
  result = (TThostFtdcSequenceNoType) ((arg1)->SequenceNo);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingNoticeField_1FieldContent_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradingNoticeField *arg1 = (CThostFtdcTradingNoticeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingNoticeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->FieldContent, (const char *)arg2, 501-1);
      arg1->FieldContent[501-1] = 0;
    } else {
      arg1->FieldContent[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingNoticeField_1FieldContent_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradingNoticeField *arg1 = (CThostFtdcTradingNoticeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingNoticeField **)&jarg1; 
  result = (char *) ((arg1)->FieldContent);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcTradingNoticeField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcTradingNoticeField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcTradingNoticeField *)new CThostFtdcTradingNoticeField();
  *(CThostFtdcTradingNoticeField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcTradingNoticeField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcTradingNoticeField *arg1 = (CThostFtdcTradingNoticeField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcTradingNoticeField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTradingNoticeField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryTradingNoticeField *arg1 = (CThostFtdcQryTradingNoticeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTradingNoticeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTradingNoticeField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryTradingNoticeField *arg1 = (CThostFtdcQryTradingNoticeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTradingNoticeField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTradingNoticeField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryTradingNoticeField *arg1 = (CThostFtdcQryTradingNoticeField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTradingNoticeField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTradingNoticeField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryTradingNoticeField *arg1 = (CThostFtdcQryTradingNoticeField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTradingNoticeField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryTradingNoticeField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryTradingNoticeField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryTradingNoticeField *)new CThostFtdcQryTradingNoticeField();
  *(CThostFtdcQryTradingNoticeField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryTradingNoticeField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryTradingNoticeField *arg1 = (CThostFtdcQryTradingNoticeField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryTradingNoticeField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryErrOrderField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryErrOrderField *arg1 = (CThostFtdcQryErrOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryErrOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryErrOrderField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryErrOrderField *arg1 = (CThostFtdcQryErrOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryErrOrderField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryErrOrderField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryErrOrderField *arg1 = (CThostFtdcQryErrOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryErrOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryErrOrderField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryErrOrderField *arg1 = (CThostFtdcQryErrOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryErrOrderField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryErrOrderField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryErrOrderField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryErrOrderField *)new CThostFtdcQryErrOrderField();
  *(CThostFtdcQryErrOrderField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryErrOrderField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryErrOrderField *arg1 = (CThostFtdcQryErrOrderField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryErrOrderField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1OrderRef_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderRef, (const char *)arg2, 13-1);
      arg1->OrderRef[13-1] = 0;
    } else {
      arg1->OrderRef[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1OrderRef_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  result = (char *) ((arg1)->OrderRef);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1OrderPriceType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  TThostFtdcOrderPriceTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  arg2 = (TThostFtdcOrderPriceTypeType)jarg2; 
  if (arg1) (arg1)->OrderPriceType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1OrderPriceType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  TThostFtdcOrderPriceTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  result = (TThostFtdcOrderPriceTypeType) ((arg1)->OrderPriceType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1Direction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  TThostFtdcDirectionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  arg2 = (TThostFtdcDirectionType)jarg2; 
  if (arg1) (arg1)->Direction = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1Direction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  TThostFtdcDirectionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  result = (TThostFtdcDirectionType) ((arg1)->Direction);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1CombOffsetFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CombOffsetFlag, (const char *)arg2, 5-1);
      arg1->CombOffsetFlag[5-1] = 0;
    } else {
      arg1->CombOffsetFlag[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1CombOffsetFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  result = (char *) ((arg1)->CombOffsetFlag);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1CombHedgeFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CombHedgeFlag, (const char *)arg2, 5-1);
      arg1->CombHedgeFlag[5-1] = 0;
    } else {
      arg1->CombHedgeFlag[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1CombHedgeFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  result = (char *) ((arg1)->CombHedgeFlag);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1LimitPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->LimitPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1LimitPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->LimitPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1VolumeTotalOriginal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->VolumeTotalOriginal = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1VolumeTotalOriginal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->VolumeTotalOriginal);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1TimeCondition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  TThostFtdcTimeConditionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  arg2 = (TThostFtdcTimeConditionType)jarg2; 
  if (arg1) (arg1)->TimeCondition = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1TimeCondition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  TThostFtdcTimeConditionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  result = (TThostFtdcTimeConditionType) ((arg1)->TimeCondition);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1GTDDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->GTDDate, (const char *)arg2, 9-1);
      arg1->GTDDate[9-1] = 0;
    } else {
      arg1->GTDDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1GTDDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  result = (char *) ((arg1)->GTDDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1VolumeCondition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  TThostFtdcVolumeConditionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  arg2 = (TThostFtdcVolumeConditionType)jarg2; 
  if (arg1) (arg1)->VolumeCondition = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1VolumeCondition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  TThostFtdcVolumeConditionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  result = (TThostFtdcVolumeConditionType) ((arg1)->VolumeCondition);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1MinVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->MinVolume = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1MinVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->MinVolume);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1ContingentCondition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  TThostFtdcContingentConditionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  arg2 = (TThostFtdcContingentConditionType)jarg2; 
  if (arg1) (arg1)->ContingentCondition = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1ContingentCondition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  TThostFtdcContingentConditionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  result = (TThostFtdcContingentConditionType) ((arg1)->ContingentCondition);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1StopPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->StopPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1StopPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->StopPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1ForceCloseReason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  TThostFtdcForceCloseReasonType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  arg2 = (TThostFtdcForceCloseReasonType)jarg2; 
  if (arg1) (arg1)->ForceCloseReason = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1ForceCloseReason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  TThostFtdcForceCloseReasonType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  result = (TThostFtdcForceCloseReasonType) ((arg1)->ForceCloseReason);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1IsAutoSuspend_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->IsAutoSuspend = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1IsAutoSuspend_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->IsAutoSuspend);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1BusinessUnit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BusinessUnit, (const char *)arg2, 21-1);
      arg1->BusinessUnit[21-1] = 0;
    } else {
      arg1->BusinessUnit[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1BusinessUnit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  result = (char *) ((arg1)->BusinessUnit);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1RequestID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  TThostFtdcRequestIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  arg2 = (TThostFtdcRequestIDType)jarg2; 
  if (arg1) (arg1)->RequestID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1RequestID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  TThostFtdcRequestIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  result = (TThostFtdcRequestIDType) ((arg1)->RequestID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1UserForceClose_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->UserForceClose = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1UserForceClose_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->UserForceClose);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1ErrorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  TThostFtdcErrorIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  arg2 = (TThostFtdcErrorIDType)jarg2; 
  if (arg1) (arg1)->ErrorID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1ErrorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  TThostFtdcErrorIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  result = (TThostFtdcErrorIDType) ((arg1)->ErrorID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1ErrorMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ErrorMsg, (const char *)arg2, 81-1);
      arg1->ErrorMsg[81-1] = 0;
    } else {
      arg1->ErrorMsg[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1ErrorMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  result = (char *) ((arg1)->ErrorMsg);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1IsSwapOrder_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->IsSwapOrder = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderField_1IsSwapOrder_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->IsSwapOrder);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcErrOrderField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcErrOrderField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcErrOrderField *)new CThostFtdcErrOrderField();
  *(CThostFtdcErrOrderField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcErrOrderField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcErrOrderField *arg1 = (CThostFtdcErrOrderField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcErrOrderField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1OrderRef_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderRef, (const char *)arg2, 13-1);
      arg1->OrderRef[13-1] = 0;
    } else {
      arg1->OrderRef[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1OrderRef_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (char *) ((arg1)->OrderRef);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1OrderPriceType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcOrderPriceTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = (TThostFtdcOrderPriceTypeType)jarg2; 
  if (arg1) (arg1)->OrderPriceType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1OrderPriceType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcOrderPriceTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (TThostFtdcOrderPriceTypeType) ((arg1)->OrderPriceType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1Direction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcDirectionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = (TThostFtdcDirectionType)jarg2; 
  if (arg1) (arg1)->Direction = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1Direction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcDirectionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (TThostFtdcDirectionType) ((arg1)->Direction);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1CombOffsetFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CombOffsetFlag, (const char *)arg2, 5-1);
      arg1->CombOffsetFlag[5-1] = 0;
    } else {
      arg1->CombOffsetFlag[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1CombOffsetFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (char *) ((arg1)->CombOffsetFlag);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1CombHedgeFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CombHedgeFlag, (const char *)arg2, 5-1);
      arg1->CombHedgeFlag[5-1] = 0;
    } else {
      arg1->CombHedgeFlag[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1CombHedgeFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (char *) ((arg1)->CombHedgeFlag);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1LimitPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->LimitPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1LimitPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->LimitPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1VolumeTotalOriginal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->VolumeTotalOriginal = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1VolumeTotalOriginal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->VolumeTotalOriginal);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1TimeCondition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcTimeConditionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = (TThostFtdcTimeConditionType)jarg2; 
  if (arg1) (arg1)->TimeCondition = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1TimeCondition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcTimeConditionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (TThostFtdcTimeConditionType) ((arg1)->TimeCondition);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1GTDDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->GTDDate, (const char *)arg2, 9-1);
      arg1->GTDDate[9-1] = 0;
    } else {
      arg1->GTDDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1GTDDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (char *) ((arg1)->GTDDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1VolumeCondition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcVolumeConditionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = (TThostFtdcVolumeConditionType)jarg2; 
  if (arg1) (arg1)->VolumeCondition = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1VolumeCondition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcVolumeConditionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (TThostFtdcVolumeConditionType) ((arg1)->VolumeCondition);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1MinVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->MinVolume = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1MinVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->MinVolume);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1ContingentCondition_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcContingentConditionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = (TThostFtdcContingentConditionType)jarg2; 
  if (arg1) (arg1)->ContingentCondition = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1ContingentCondition_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcContingentConditionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (TThostFtdcContingentConditionType) ((arg1)->ContingentCondition);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1StopPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->StopPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1StopPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->StopPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1ForceCloseReason_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcForceCloseReasonType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = (TThostFtdcForceCloseReasonType)jarg2; 
  if (arg1) (arg1)->ForceCloseReason = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1ForceCloseReason_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcForceCloseReasonType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (TThostFtdcForceCloseReasonType) ((arg1)->ForceCloseReason);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1IsAutoSuspend_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->IsAutoSuspend = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1IsAutoSuspend_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->IsAutoSuspend);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1BusinessUnit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BusinessUnit, (const char *)arg2, 21-1);
      arg1->BusinessUnit[21-1] = 0;
    } else {
      arg1->BusinessUnit[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1BusinessUnit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (char *) ((arg1)->BusinessUnit);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1RequestID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcRequestIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = (TThostFtdcRequestIDType)jarg2; 
  if (arg1) (arg1)->RequestID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1RequestID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcRequestIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (TThostFtdcRequestIDType) ((arg1)->RequestID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1OrderLocalID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderLocalID, (const char *)arg2, 13-1);
      arg1->OrderLocalID[13-1] = 0;
    } else {
      arg1->OrderLocalID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1OrderLocalID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (char *) ((arg1)->OrderLocalID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1ParticipantID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ParticipantID, (const char *)arg2, 11-1);
      arg1->ParticipantID[11-1] = 0;
    } else {
      arg1->ParticipantID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1ParticipantID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (char *) ((arg1)->ParticipantID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1ClientID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ClientID, (const char *)arg2, 11-1);
      arg1->ClientID[11-1] = 0;
    } else {
      arg1->ClientID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1ClientID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (char *) ((arg1)->ClientID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1ExchangeInstID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeInstID, (const char *)arg2, 31-1);
      arg1->ExchangeInstID[31-1] = 0;
    } else {
      arg1->ExchangeInstID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1ExchangeInstID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeInstID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1TraderID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TraderID, (const char *)arg2, 21-1);
      arg1->TraderID[21-1] = 0;
    } else {
      arg1->TraderID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1TraderID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (char *) ((arg1)->TraderID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1InstallID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcInstallIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = (TThostFtdcInstallIDType)jarg2; 
  if (arg1) (arg1)->InstallID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1InstallID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcInstallIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (TThostFtdcInstallIDType) ((arg1)->InstallID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1OrderSubmitStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcOrderSubmitStatusType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = (TThostFtdcOrderSubmitStatusType)jarg2; 
  if (arg1) (arg1)->OrderSubmitStatus = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1OrderSubmitStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcOrderSubmitStatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (TThostFtdcOrderSubmitStatusType) ((arg1)->OrderSubmitStatus);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1NotifySequence_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcSequenceNoType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = (TThostFtdcSequenceNoType)jarg2; 
  if (arg1) (arg1)->NotifySequence = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1NotifySequence_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcSequenceNoType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (TThostFtdcSequenceNoType) ((arg1)->NotifySequence);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1SettlementID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcSettlementIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = (TThostFtdcSettlementIDType)jarg2; 
  if (arg1) (arg1)->SettlementID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1SettlementID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcSettlementIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (TThostFtdcSettlementIDType) ((arg1)->SettlementID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1OrderSysID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderSysID, (const char *)arg2, 21-1);
      arg1->OrderSysID[21-1] = 0;
    } else {
      arg1->OrderSysID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1OrderSysID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (char *) ((arg1)->OrderSysID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1OrderSource_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcOrderSourceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = (TThostFtdcOrderSourceType)jarg2; 
  if (arg1) (arg1)->OrderSource = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1OrderSource_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcOrderSourceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (TThostFtdcOrderSourceType) ((arg1)->OrderSource);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1OrderStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcOrderStatusType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = (TThostFtdcOrderStatusType)jarg2; 
  if (arg1) (arg1)->OrderStatus = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1OrderStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcOrderStatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (TThostFtdcOrderStatusType) ((arg1)->OrderStatus);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1OrderType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcOrderTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = (TThostFtdcOrderTypeType)jarg2; 
  if (arg1) (arg1)->OrderType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1OrderType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcOrderTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (TThostFtdcOrderTypeType) ((arg1)->OrderType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1VolumeTraded_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->VolumeTraded = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1VolumeTraded_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->VolumeTraded);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1VolumeTotal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->VolumeTotal = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1VolumeTotal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->VolumeTotal);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1InsertDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InsertDate, (const char *)arg2, 9-1);
      arg1->InsertDate[9-1] = 0;
    } else {
      arg1->InsertDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1InsertDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (char *) ((arg1)->InsertDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1InsertTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InsertTime, (const char *)arg2, 9-1);
      arg1->InsertTime[9-1] = 0;
    } else {
      arg1->InsertTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1InsertTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (char *) ((arg1)->InsertTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1ActiveTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ActiveTime, (const char *)arg2, 9-1);
      arg1->ActiveTime[9-1] = 0;
    } else {
      arg1->ActiveTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1ActiveTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (char *) ((arg1)->ActiveTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1SuspendTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->SuspendTime, (const char *)arg2, 9-1);
      arg1->SuspendTime[9-1] = 0;
    } else {
      arg1->SuspendTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1SuspendTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (char *) ((arg1)->SuspendTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1UpdateTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UpdateTime, (const char *)arg2, 9-1);
      arg1->UpdateTime[9-1] = 0;
    } else {
      arg1->UpdateTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1UpdateTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (char *) ((arg1)->UpdateTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1CancelTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CancelTime, (const char *)arg2, 9-1);
      arg1->CancelTime[9-1] = 0;
    } else {
      arg1->CancelTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1CancelTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (char *) ((arg1)->CancelTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1ActiveTraderID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ActiveTraderID, (const char *)arg2, 21-1);
      arg1->ActiveTraderID[21-1] = 0;
    } else {
      arg1->ActiveTraderID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1ActiveTraderID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (char *) ((arg1)->ActiveTraderID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1ClearingPartID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ClearingPartID, (const char *)arg2, 11-1);
      arg1->ClearingPartID[11-1] = 0;
    } else {
      arg1->ClearingPartID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1ClearingPartID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (char *) ((arg1)->ClearingPartID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1SequenceNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcSequenceNoType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = (TThostFtdcSequenceNoType)jarg2; 
  if (arg1) (arg1)->SequenceNo = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1SequenceNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcSequenceNoType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (TThostFtdcSequenceNoType) ((arg1)->SequenceNo);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1FrontID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcFrontIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = (TThostFtdcFrontIDType)jarg2; 
  if (arg1) (arg1)->FrontID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1FrontID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcFrontIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (TThostFtdcFrontIDType) ((arg1)->FrontID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1UserProductInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserProductInfo, (const char *)arg2, 11-1);
      arg1->UserProductInfo[11-1] = 0;
    } else {
      arg1->UserProductInfo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1UserProductInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (char *) ((arg1)->UserProductInfo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1StatusMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->StatusMsg, (const char *)arg2, 81-1);
      arg1->StatusMsg[81-1] = 0;
    } else {
      arg1->StatusMsg[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1StatusMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (char *) ((arg1)->StatusMsg);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1UserForceClose_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->UserForceClose = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1UserForceClose_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->UserForceClose);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1ActiveUserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ActiveUserID, (const char *)arg2, 16-1);
      arg1->ActiveUserID[16-1] = 0;
    } else {
      arg1->ActiveUserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1ActiveUserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (char *) ((arg1)->ActiveUserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1BrokerOrderSeq_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcSequenceNoType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = (TThostFtdcSequenceNoType)jarg2; 
  if (arg1) (arg1)->BrokerOrderSeq = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1BrokerOrderSeq_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcSequenceNoType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (TThostFtdcSequenceNoType) ((arg1)->BrokerOrderSeq);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1RelativeOrderSysID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->RelativeOrderSysID, (const char *)arg2, 21-1);
      arg1->RelativeOrderSysID[21-1] = 0;
    } else {
      arg1->RelativeOrderSysID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1RelativeOrderSysID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (char *) ((arg1)->RelativeOrderSysID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1ZCETotalTradedVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->ZCETotalTradedVolume = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1ZCETotalTradedVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->ZCETotalTradedVolume);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1ErrorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcErrorIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = (TThostFtdcErrorIDType)jarg2; 
  if (arg1) (arg1)->ErrorID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1ErrorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcErrorIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (TThostFtdcErrorIDType) ((arg1)->ErrorID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1ErrorMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ErrorMsg, (const char *)arg2, 81-1);
      arg1->ErrorMsg[81-1] = 0;
    } else {
      arg1->ErrorMsg[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1ErrorMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (char *) ((arg1)->ErrorMsg);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1IsSwapOrder_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->IsSwapOrder = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrorConditionalOrderField_1IsSwapOrder_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->IsSwapOrder);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcErrorConditionalOrderField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcErrorConditionalOrderField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcErrorConditionalOrderField *)new CThostFtdcErrorConditionalOrderField();
  *(CThostFtdcErrorConditionalOrderField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcErrorConditionalOrderField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcErrorConditionalOrderField *arg1 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcErrorConditionalOrderField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryErrOrderActionField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryErrOrderActionField *arg1 = (CThostFtdcQryErrOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryErrOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryErrOrderActionField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryErrOrderActionField *arg1 = (CThostFtdcQryErrOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryErrOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryErrOrderActionField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryErrOrderActionField *arg1 = (CThostFtdcQryErrOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryErrOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryErrOrderActionField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryErrOrderActionField *arg1 = (CThostFtdcQryErrOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryErrOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryErrOrderActionField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryErrOrderActionField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryErrOrderActionField *)new CThostFtdcQryErrOrderActionField();
  *(CThostFtdcQryErrOrderActionField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryErrOrderActionField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryErrOrderActionField *arg1 = (CThostFtdcQryErrOrderActionField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryErrOrderActionField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1OrderActionRef_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  TThostFtdcOrderActionRefType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcOrderActionRefType)jarg2; 
  if (arg1) (arg1)->OrderActionRef = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1OrderActionRef_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  TThostFtdcOrderActionRefType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  result = (TThostFtdcOrderActionRefType) ((arg1)->OrderActionRef);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1OrderRef_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderRef, (const char *)arg2, 13-1);
      arg1->OrderRef[13-1] = 0;
    } else {
      arg1->OrderRef[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1OrderRef_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->OrderRef);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1RequestID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  TThostFtdcRequestIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcRequestIDType)jarg2; 
  if (arg1) (arg1)->RequestID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1RequestID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  TThostFtdcRequestIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  result = (TThostFtdcRequestIDType) ((arg1)->RequestID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1FrontID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  TThostFtdcFrontIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcFrontIDType)jarg2; 
  if (arg1) (arg1)->FrontID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1FrontID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  TThostFtdcFrontIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  result = (TThostFtdcFrontIDType) ((arg1)->FrontID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1OrderSysID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderSysID, (const char *)arg2, 21-1);
      arg1->OrderSysID[21-1] = 0;
    } else {
      arg1->OrderSysID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1OrderSysID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->OrderSysID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1ActionFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  TThostFtdcActionFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcActionFlagType)jarg2; 
  if (arg1) (arg1)->ActionFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1ActionFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  TThostFtdcActionFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  result = (TThostFtdcActionFlagType) ((arg1)->ActionFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1LimitPrice_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->LimitPrice = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1LimitPrice_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->LimitPrice);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1VolumeChange_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->VolumeChange = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1VolumeChange_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->VolumeChange);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1ActionDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ActionDate, (const char *)arg2, 9-1);
      arg1->ActionDate[9-1] = 0;
    } else {
      arg1->ActionDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1ActionDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->ActionDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1ActionTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ActionTime, (const char *)arg2, 9-1);
      arg1->ActionTime[9-1] = 0;
    } else {
      arg1->ActionTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1ActionTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->ActionTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1TraderID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TraderID, (const char *)arg2, 21-1);
      arg1->TraderID[21-1] = 0;
    } else {
      arg1->TraderID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1TraderID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->TraderID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1InstallID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  TThostFtdcInstallIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcInstallIDType)jarg2; 
  if (arg1) (arg1)->InstallID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1InstallID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  TThostFtdcInstallIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  result = (TThostFtdcInstallIDType) ((arg1)->InstallID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1OrderLocalID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrderLocalID, (const char *)arg2, 13-1);
      arg1->OrderLocalID[13-1] = 0;
    } else {
      arg1->OrderLocalID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1OrderLocalID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->OrderLocalID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1ActionLocalID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ActionLocalID, (const char *)arg2, 13-1);
      arg1->ActionLocalID[13-1] = 0;
    } else {
      arg1->ActionLocalID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1ActionLocalID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->ActionLocalID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1ParticipantID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ParticipantID, (const char *)arg2, 11-1);
      arg1->ParticipantID[11-1] = 0;
    } else {
      arg1->ParticipantID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1ParticipantID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->ParticipantID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1ClientID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ClientID, (const char *)arg2, 11-1);
      arg1->ClientID[11-1] = 0;
    } else {
      arg1->ClientID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1ClientID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->ClientID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1BusinessUnit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BusinessUnit, (const char *)arg2, 21-1);
      arg1->BusinessUnit[21-1] = 0;
    } else {
      arg1->BusinessUnit[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1BusinessUnit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->BusinessUnit);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1OrderActionStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  TThostFtdcOrderActionStatusType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcOrderActionStatusType)jarg2; 
  if (arg1) (arg1)->OrderActionStatus = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1OrderActionStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  TThostFtdcOrderActionStatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  result = (TThostFtdcOrderActionStatusType) ((arg1)->OrderActionStatus);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1StatusMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->StatusMsg, (const char *)arg2, 81-1);
      arg1->StatusMsg[81-1] = 0;
    } else {
      arg1->StatusMsg[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1StatusMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->StatusMsg);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1ErrorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  TThostFtdcErrorIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  arg2 = (TThostFtdcErrorIDType)jarg2; 
  if (arg1) (arg1)->ErrorID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1ErrorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  TThostFtdcErrorIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  result = (TThostFtdcErrorIDType) ((arg1)->ErrorID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1ErrorMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ErrorMsg, (const char *)arg2, 81-1);
      arg1->ErrorMsg[81-1] = 0;
    } else {
      arg1->ErrorMsg[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcErrOrderActionField_1ErrorMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  result = (char *) ((arg1)->ErrorMsg);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcErrOrderActionField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcErrOrderActionField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcErrOrderActionField *)new CThostFtdcErrOrderActionField();
  *(CThostFtdcErrOrderActionField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcErrOrderActionField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcErrOrderActionField *arg1 = (CThostFtdcErrOrderActionField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcErrOrderActionField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeSequenceField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryExchangeSequenceField *arg1 = (CThostFtdcQryExchangeSequenceField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeSequenceField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryExchangeSequenceField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryExchangeSequenceField *arg1 = (CThostFtdcQryExchangeSequenceField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryExchangeSequenceField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryExchangeSequenceField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryExchangeSequenceField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryExchangeSequenceField *)new CThostFtdcQryExchangeSequenceField();
  *(CThostFtdcQryExchangeSequenceField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryExchangeSequenceField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryExchangeSequenceField *arg1 = (CThostFtdcQryExchangeSequenceField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryExchangeSequenceField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeSequenceField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcExchangeSequenceField *arg1 = (CThostFtdcExchangeSequenceField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeSequenceField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeSequenceField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcExchangeSequenceField *arg1 = (CThostFtdcExchangeSequenceField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeSequenceField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeSequenceField_1SequenceNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcExchangeSequenceField *arg1 = (CThostFtdcExchangeSequenceField *) 0 ;
  TThostFtdcSequenceNoType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeSequenceField **)&jarg1; 
  arg2 = (TThostFtdcSequenceNoType)jarg2; 
  if (arg1) (arg1)->SequenceNo = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeSequenceField_1SequenceNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcExchangeSequenceField *arg1 = (CThostFtdcExchangeSequenceField *) 0 ;
  TThostFtdcSequenceNoType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeSequenceField **)&jarg1; 
  result = (TThostFtdcSequenceNoType) ((arg1)->SequenceNo);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeSequenceField_1MarketStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcExchangeSequenceField *arg1 = (CThostFtdcExchangeSequenceField *) 0 ;
  TThostFtdcInstrumentStatusType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeSequenceField **)&jarg1; 
  arg2 = (TThostFtdcInstrumentStatusType)jarg2; 
  if (arg1) (arg1)->MarketStatus = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcExchangeSequenceField_1MarketStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcExchangeSequenceField *arg1 = (CThostFtdcExchangeSequenceField *) 0 ;
  TThostFtdcInstrumentStatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcExchangeSequenceField **)&jarg1; 
  result = (TThostFtdcInstrumentStatusType) ((arg1)->MarketStatus);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcExchangeSequenceField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcExchangeSequenceField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcExchangeSequenceField *)new CThostFtdcExchangeSequenceField();
  *(CThostFtdcExchangeSequenceField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcExchangeSequenceField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcExchangeSequenceField *arg1 = (CThostFtdcExchangeSequenceField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcExchangeSequenceField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryMaxOrderVolumeWithPriceField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQueryMaxOrderVolumeWithPriceField *arg1 = (CThostFtdcQueryMaxOrderVolumeWithPriceField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryMaxOrderVolumeWithPriceField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryMaxOrderVolumeWithPriceField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQueryMaxOrderVolumeWithPriceField *arg1 = (CThostFtdcQueryMaxOrderVolumeWithPriceField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryMaxOrderVolumeWithPriceField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryMaxOrderVolumeWithPriceField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQueryMaxOrderVolumeWithPriceField *arg1 = (CThostFtdcQueryMaxOrderVolumeWithPriceField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryMaxOrderVolumeWithPriceField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryMaxOrderVolumeWithPriceField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQueryMaxOrderVolumeWithPriceField *arg1 = (CThostFtdcQueryMaxOrderVolumeWithPriceField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryMaxOrderVolumeWithPriceField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryMaxOrderVolumeWithPriceField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQueryMaxOrderVolumeWithPriceField *arg1 = (CThostFtdcQueryMaxOrderVolumeWithPriceField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryMaxOrderVolumeWithPriceField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryMaxOrderVolumeWithPriceField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQueryMaxOrderVolumeWithPriceField *arg1 = (CThostFtdcQueryMaxOrderVolumeWithPriceField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryMaxOrderVolumeWithPriceField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryMaxOrderVolumeWithPriceField_1Direction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcQueryMaxOrderVolumeWithPriceField *arg1 = (CThostFtdcQueryMaxOrderVolumeWithPriceField *) 0 ;
  TThostFtdcDirectionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryMaxOrderVolumeWithPriceField **)&jarg1; 
  arg2 = (TThostFtdcDirectionType)jarg2; 
  if (arg1) (arg1)->Direction = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryMaxOrderVolumeWithPriceField_1Direction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcQueryMaxOrderVolumeWithPriceField *arg1 = (CThostFtdcQueryMaxOrderVolumeWithPriceField *) 0 ;
  TThostFtdcDirectionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryMaxOrderVolumeWithPriceField **)&jarg1; 
  result = (TThostFtdcDirectionType) ((arg1)->Direction);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryMaxOrderVolumeWithPriceField_1OffsetFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcQueryMaxOrderVolumeWithPriceField *arg1 = (CThostFtdcQueryMaxOrderVolumeWithPriceField *) 0 ;
  TThostFtdcOffsetFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryMaxOrderVolumeWithPriceField **)&jarg1; 
  arg2 = (TThostFtdcOffsetFlagType)jarg2; 
  if (arg1) (arg1)->OffsetFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryMaxOrderVolumeWithPriceField_1OffsetFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcQueryMaxOrderVolumeWithPriceField *arg1 = (CThostFtdcQueryMaxOrderVolumeWithPriceField *) 0 ;
  TThostFtdcOffsetFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryMaxOrderVolumeWithPriceField **)&jarg1; 
  result = (TThostFtdcOffsetFlagType) ((arg1)->OffsetFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryMaxOrderVolumeWithPriceField_1HedgeFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcQueryMaxOrderVolumeWithPriceField *arg1 = (CThostFtdcQueryMaxOrderVolumeWithPriceField *) 0 ;
  TThostFtdcHedgeFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryMaxOrderVolumeWithPriceField **)&jarg1; 
  arg2 = (TThostFtdcHedgeFlagType)jarg2; 
  if (arg1) (arg1)->HedgeFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryMaxOrderVolumeWithPriceField_1HedgeFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcQueryMaxOrderVolumeWithPriceField *arg1 = (CThostFtdcQueryMaxOrderVolumeWithPriceField *) 0 ;
  TThostFtdcHedgeFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryMaxOrderVolumeWithPriceField **)&jarg1; 
  result = (TThostFtdcHedgeFlagType) ((arg1)->HedgeFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryMaxOrderVolumeWithPriceField_1MaxVolume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcQueryMaxOrderVolumeWithPriceField *arg1 = (CThostFtdcQueryMaxOrderVolumeWithPriceField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryMaxOrderVolumeWithPriceField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->MaxVolume = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryMaxOrderVolumeWithPriceField_1MaxVolume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcQueryMaxOrderVolumeWithPriceField *arg1 = (CThostFtdcQueryMaxOrderVolumeWithPriceField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryMaxOrderVolumeWithPriceField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->MaxVolume);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryMaxOrderVolumeWithPriceField_1Price_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcQueryMaxOrderVolumeWithPriceField *arg1 = (CThostFtdcQueryMaxOrderVolumeWithPriceField *) 0 ;
  TThostFtdcPriceType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryMaxOrderVolumeWithPriceField **)&jarg1; 
  arg2 = (TThostFtdcPriceType)jarg2; 
  if (arg1) (arg1)->Price = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryMaxOrderVolumeWithPriceField_1Price_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcQueryMaxOrderVolumeWithPriceField *arg1 = (CThostFtdcQueryMaxOrderVolumeWithPriceField *) 0 ;
  TThostFtdcPriceType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryMaxOrderVolumeWithPriceField **)&jarg1; 
  result = (TThostFtdcPriceType) ((arg1)->Price);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQueryMaxOrderVolumeWithPriceField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQueryMaxOrderVolumeWithPriceField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQueryMaxOrderVolumeWithPriceField *)new CThostFtdcQueryMaxOrderVolumeWithPriceField();
  *(CThostFtdcQueryMaxOrderVolumeWithPriceField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQueryMaxOrderVolumeWithPriceField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQueryMaxOrderVolumeWithPriceField *arg1 = (CThostFtdcQueryMaxOrderVolumeWithPriceField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQueryMaxOrderVolumeWithPriceField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryBrokerTradingParamsField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryBrokerTradingParamsField *arg1 = (CThostFtdcQryBrokerTradingParamsField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryBrokerTradingParamsField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryBrokerTradingParamsField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryBrokerTradingParamsField *arg1 = (CThostFtdcQryBrokerTradingParamsField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryBrokerTradingParamsField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryBrokerTradingParamsField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryBrokerTradingParamsField *arg1 = (CThostFtdcQryBrokerTradingParamsField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryBrokerTradingParamsField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryBrokerTradingParamsField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryBrokerTradingParamsField *arg1 = (CThostFtdcQryBrokerTradingParamsField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryBrokerTradingParamsField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryBrokerTradingParamsField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryBrokerTradingParamsField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryBrokerTradingParamsField *)new CThostFtdcQryBrokerTradingParamsField();
  *(CThostFtdcQryBrokerTradingParamsField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryBrokerTradingParamsField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryBrokerTradingParamsField *arg1 = (CThostFtdcQryBrokerTradingParamsField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryBrokerTradingParamsField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerTradingParamsField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerTradingParamsField *arg1 = (CThostFtdcBrokerTradingParamsField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerTradingParamsField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerTradingParamsField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerTradingParamsField *arg1 = (CThostFtdcBrokerTradingParamsField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerTradingParamsField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerTradingParamsField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerTradingParamsField *arg1 = (CThostFtdcBrokerTradingParamsField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerTradingParamsField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerTradingParamsField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerTradingParamsField *arg1 = (CThostFtdcBrokerTradingParamsField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerTradingParamsField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerTradingParamsField_1MarginPriceType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcBrokerTradingParamsField *arg1 = (CThostFtdcBrokerTradingParamsField *) 0 ;
  TThostFtdcMarginPriceTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerTradingParamsField **)&jarg1; 
  arg2 = (TThostFtdcMarginPriceTypeType)jarg2; 
  if (arg1) (arg1)->MarginPriceType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerTradingParamsField_1MarginPriceType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcBrokerTradingParamsField *arg1 = (CThostFtdcBrokerTradingParamsField *) 0 ;
  TThostFtdcMarginPriceTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerTradingParamsField **)&jarg1; 
  result = (TThostFtdcMarginPriceTypeType) ((arg1)->MarginPriceType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerTradingParamsField_1Algorithm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcBrokerTradingParamsField *arg1 = (CThostFtdcBrokerTradingParamsField *) 0 ;
  TThostFtdcAlgorithmType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerTradingParamsField **)&jarg1; 
  arg2 = (TThostFtdcAlgorithmType)jarg2; 
  if (arg1) (arg1)->Algorithm = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerTradingParamsField_1Algorithm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcBrokerTradingParamsField *arg1 = (CThostFtdcBrokerTradingParamsField *) 0 ;
  TThostFtdcAlgorithmType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerTradingParamsField **)&jarg1; 
  result = (TThostFtdcAlgorithmType) ((arg1)->Algorithm);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerTradingParamsField_1AvailIncludeCloseProfit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcBrokerTradingParamsField *arg1 = (CThostFtdcBrokerTradingParamsField *) 0 ;
  TThostFtdcIncludeCloseProfitType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerTradingParamsField **)&jarg1; 
  arg2 = (TThostFtdcIncludeCloseProfitType)jarg2; 
  if (arg1) (arg1)->AvailIncludeCloseProfit = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerTradingParamsField_1AvailIncludeCloseProfit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcBrokerTradingParamsField *arg1 = (CThostFtdcBrokerTradingParamsField *) 0 ;
  TThostFtdcIncludeCloseProfitType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerTradingParamsField **)&jarg1; 
  result = (TThostFtdcIncludeCloseProfitType) ((arg1)->AvailIncludeCloseProfit);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcBrokerTradingParamsField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcBrokerTradingParamsField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcBrokerTradingParamsField *)new CThostFtdcBrokerTradingParamsField();
  *(CThostFtdcBrokerTradingParamsField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcBrokerTradingParamsField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcBrokerTradingParamsField *arg1 = (CThostFtdcBrokerTradingParamsField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcBrokerTradingParamsField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryBrokerTradingAlgosField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryBrokerTradingAlgosField *arg1 = (CThostFtdcQryBrokerTradingAlgosField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryBrokerTradingAlgosField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryBrokerTradingAlgosField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryBrokerTradingAlgosField *arg1 = (CThostFtdcQryBrokerTradingAlgosField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryBrokerTradingAlgosField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryBrokerTradingAlgosField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryBrokerTradingAlgosField *arg1 = (CThostFtdcQryBrokerTradingAlgosField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryBrokerTradingAlgosField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryBrokerTradingAlgosField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryBrokerTradingAlgosField *arg1 = (CThostFtdcQryBrokerTradingAlgosField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryBrokerTradingAlgosField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryBrokerTradingAlgosField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryBrokerTradingAlgosField *arg1 = (CThostFtdcQryBrokerTradingAlgosField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryBrokerTradingAlgosField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryBrokerTradingAlgosField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryBrokerTradingAlgosField *arg1 = (CThostFtdcQryBrokerTradingAlgosField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryBrokerTradingAlgosField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryBrokerTradingAlgosField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryBrokerTradingAlgosField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryBrokerTradingAlgosField *)new CThostFtdcQryBrokerTradingAlgosField();
  *(CThostFtdcQryBrokerTradingAlgosField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryBrokerTradingAlgosField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryBrokerTradingAlgosField *arg1 = (CThostFtdcQryBrokerTradingAlgosField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryBrokerTradingAlgosField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerTradingAlgosField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerTradingAlgosField *arg1 = (CThostFtdcBrokerTradingAlgosField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerTradingAlgosField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerTradingAlgosField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerTradingAlgosField *arg1 = (CThostFtdcBrokerTradingAlgosField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerTradingAlgosField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerTradingAlgosField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerTradingAlgosField *arg1 = (CThostFtdcBrokerTradingAlgosField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerTradingAlgosField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerTradingAlgosField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerTradingAlgosField *arg1 = (CThostFtdcBrokerTradingAlgosField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerTradingAlgosField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerTradingAlgosField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerTradingAlgosField *arg1 = (CThostFtdcBrokerTradingAlgosField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerTradingAlgosField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerTradingAlgosField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerTradingAlgosField *arg1 = (CThostFtdcBrokerTradingAlgosField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerTradingAlgosField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerTradingAlgosField_1HandlePositionAlgoID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcBrokerTradingAlgosField *arg1 = (CThostFtdcBrokerTradingAlgosField *) 0 ;
  TThostFtdcHandlePositionAlgoIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerTradingAlgosField **)&jarg1; 
  arg2 = (TThostFtdcHandlePositionAlgoIDType)jarg2; 
  if (arg1) (arg1)->HandlePositionAlgoID = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerTradingAlgosField_1HandlePositionAlgoID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcBrokerTradingAlgosField *arg1 = (CThostFtdcBrokerTradingAlgosField *) 0 ;
  TThostFtdcHandlePositionAlgoIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerTradingAlgosField **)&jarg1; 
  result = (TThostFtdcHandlePositionAlgoIDType) ((arg1)->HandlePositionAlgoID);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerTradingAlgosField_1FindMarginRateAlgoID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcBrokerTradingAlgosField *arg1 = (CThostFtdcBrokerTradingAlgosField *) 0 ;
  TThostFtdcFindMarginRateAlgoIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerTradingAlgosField **)&jarg1; 
  arg2 = (TThostFtdcFindMarginRateAlgoIDType)jarg2; 
  if (arg1) (arg1)->FindMarginRateAlgoID = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerTradingAlgosField_1FindMarginRateAlgoID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcBrokerTradingAlgosField *arg1 = (CThostFtdcBrokerTradingAlgosField *) 0 ;
  TThostFtdcFindMarginRateAlgoIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerTradingAlgosField **)&jarg1; 
  result = (TThostFtdcFindMarginRateAlgoIDType) ((arg1)->FindMarginRateAlgoID);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerTradingAlgosField_1HandleTradingAccountAlgoID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcBrokerTradingAlgosField *arg1 = (CThostFtdcBrokerTradingAlgosField *) 0 ;
  TThostFtdcHandleTradingAccountAlgoIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerTradingAlgosField **)&jarg1; 
  arg2 = (TThostFtdcHandleTradingAccountAlgoIDType)jarg2; 
  if (arg1) (arg1)->HandleTradingAccountAlgoID = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerTradingAlgosField_1HandleTradingAccountAlgoID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcBrokerTradingAlgosField *arg1 = (CThostFtdcBrokerTradingAlgosField *) 0 ;
  TThostFtdcHandleTradingAccountAlgoIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerTradingAlgosField **)&jarg1; 
  result = (TThostFtdcHandleTradingAccountAlgoIDType) ((arg1)->HandleTradingAccountAlgoID);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcBrokerTradingAlgosField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcBrokerTradingAlgosField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcBrokerTradingAlgosField *)new CThostFtdcBrokerTradingAlgosField();
  *(CThostFtdcBrokerTradingAlgosField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcBrokerTradingAlgosField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcBrokerTradingAlgosField *arg1 = (CThostFtdcBrokerTradingAlgosField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcBrokerTradingAlgosField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryBrokerDepositField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQueryBrokerDepositField *arg1 = (CThostFtdcQueryBrokerDepositField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryBrokerDepositField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryBrokerDepositField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQueryBrokerDepositField *arg1 = (CThostFtdcQueryBrokerDepositField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryBrokerDepositField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryBrokerDepositField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQueryBrokerDepositField *arg1 = (CThostFtdcQueryBrokerDepositField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryBrokerDepositField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQueryBrokerDepositField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQueryBrokerDepositField *arg1 = (CThostFtdcQueryBrokerDepositField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQueryBrokerDepositField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQueryBrokerDepositField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQueryBrokerDepositField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQueryBrokerDepositField *)new CThostFtdcQueryBrokerDepositField();
  *(CThostFtdcQueryBrokerDepositField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQueryBrokerDepositField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQueryBrokerDepositField *arg1 = (CThostFtdcQueryBrokerDepositField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQueryBrokerDepositField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerDepositField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerDepositField *arg1 = (CThostFtdcBrokerDepositField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerDepositField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerDepositField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerDepositField *arg1 = (CThostFtdcBrokerDepositField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerDepositField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerDepositField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerDepositField *arg1 = (CThostFtdcBrokerDepositField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerDepositField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerDepositField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerDepositField *arg1 = (CThostFtdcBrokerDepositField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerDepositField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerDepositField_1ParticipantID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerDepositField *arg1 = (CThostFtdcBrokerDepositField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerDepositField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ParticipantID, (const char *)arg2, 11-1);
      arg1->ParticipantID[11-1] = 0;
    } else {
      arg1->ParticipantID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerDepositField_1ParticipantID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerDepositField *arg1 = (CThostFtdcBrokerDepositField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerDepositField **)&jarg1; 
  result = (char *) ((arg1)->ParticipantID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerDepositField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerDepositField *arg1 = (CThostFtdcBrokerDepositField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerDepositField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerDepositField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerDepositField *arg1 = (CThostFtdcBrokerDepositField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerDepositField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerDepositField_1PreBalance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcBrokerDepositField *arg1 = (CThostFtdcBrokerDepositField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerDepositField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->PreBalance = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerDepositField_1PreBalance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcBrokerDepositField *arg1 = (CThostFtdcBrokerDepositField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerDepositField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->PreBalance);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerDepositField_1CurrMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcBrokerDepositField *arg1 = (CThostFtdcBrokerDepositField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerDepositField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->CurrMargin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerDepositField_1CurrMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcBrokerDepositField *arg1 = (CThostFtdcBrokerDepositField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerDepositField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->CurrMargin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerDepositField_1CloseProfit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcBrokerDepositField *arg1 = (CThostFtdcBrokerDepositField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerDepositField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->CloseProfit = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerDepositField_1CloseProfit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcBrokerDepositField *arg1 = (CThostFtdcBrokerDepositField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerDepositField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->CloseProfit);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerDepositField_1Balance_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcBrokerDepositField *arg1 = (CThostFtdcBrokerDepositField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerDepositField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Balance = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerDepositField_1Balance_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcBrokerDepositField *arg1 = (CThostFtdcBrokerDepositField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerDepositField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Balance);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerDepositField_1Deposit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcBrokerDepositField *arg1 = (CThostFtdcBrokerDepositField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerDepositField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Deposit = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerDepositField_1Deposit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcBrokerDepositField *arg1 = (CThostFtdcBrokerDepositField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerDepositField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Deposit);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerDepositField_1Withdraw_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcBrokerDepositField *arg1 = (CThostFtdcBrokerDepositField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerDepositField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Withdraw = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerDepositField_1Withdraw_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcBrokerDepositField *arg1 = (CThostFtdcBrokerDepositField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerDepositField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Withdraw);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerDepositField_1Available_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcBrokerDepositField *arg1 = (CThostFtdcBrokerDepositField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerDepositField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Available = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerDepositField_1Available_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcBrokerDepositField *arg1 = (CThostFtdcBrokerDepositField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerDepositField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Available);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerDepositField_1Reserve_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcBrokerDepositField *arg1 = (CThostFtdcBrokerDepositField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerDepositField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Reserve = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerDepositField_1Reserve_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcBrokerDepositField *arg1 = (CThostFtdcBrokerDepositField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerDepositField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Reserve);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerDepositField_1FrozenMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcBrokerDepositField *arg1 = (CThostFtdcBrokerDepositField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerDepositField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->FrozenMargin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerDepositField_1FrozenMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcBrokerDepositField *arg1 = (CThostFtdcBrokerDepositField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerDepositField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->FrozenMargin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcBrokerDepositField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcBrokerDepositField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcBrokerDepositField *)new CThostFtdcBrokerDepositField();
  *(CThostFtdcBrokerDepositField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcBrokerDepositField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcBrokerDepositField *arg1 = (CThostFtdcBrokerDepositField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcBrokerDepositField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryCFMMCBrokerKeyField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryCFMMCBrokerKeyField *arg1 = (CThostFtdcQryCFMMCBrokerKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryCFMMCBrokerKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryCFMMCBrokerKeyField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryCFMMCBrokerKeyField *arg1 = (CThostFtdcQryCFMMCBrokerKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryCFMMCBrokerKeyField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryCFMMCBrokerKeyField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryCFMMCBrokerKeyField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryCFMMCBrokerKeyField *)new CThostFtdcQryCFMMCBrokerKeyField();
  *(CThostFtdcQryCFMMCBrokerKeyField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryCFMMCBrokerKeyField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryCFMMCBrokerKeyField *arg1 = (CThostFtdcQryCFMMCBrokerKeyField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryCFMMCBrokerKeyField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCFMMCBrokerKeyField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCFMMCBrokerKeyField *arg1 = (CThostFtdcCFMMCBrokerKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCFMMCBrokerKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCFMMCBrokerKeyField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCFMMCBrokerKeyField *arg1 = (CThostFtdcCFMMCBrokerKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCFMMCBrokerKeyField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCFMMCBrokerKeyField_1ParticipantID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCFMMCBrokerKeyField *arg1 = (CThostFtdcCFMMCBrokerKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCFMMCBrokerKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ParticipantID, (const char *)arg2, 11-1);
      arg1->ParticipantID[11-1] = 0;
    } else {
      arg1->ParticipantID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCFMMCBrokerKeyField_1ParticipantID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCFMMCBrokerKeyField *arg1 = (CThostFtdcCFMMCBrokerKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCFMMCBrokerKeyField **)&jarg1; 
  result = (char *) ((arg1)->ParticipantID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCFMMCBrokerKeyField_1CreateDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCFMMCBrokerKeyField *arg1 = (CThostFtdcCFMMCBrokerKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCFMMCBrokerKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CreateDate, (const char *)arg2, 9-1);
      arg1->CreateDate[9-1] = 0;
    } else {
      arg1->CreateDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCFMMCBrokerKeyField_1CreateDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCFMMCBrokerKeyField *arg1 = (CThostFtdcCFMMCBrokerKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCFMMCBrokerKeyField **)&jarg1; 
  result = (char *) ((arg1)->CreateDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCFMMCBrokerKeyField_1CreateTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCFMMCBrokerKeyField *arg1 = (CThostFtdcCFMMCBrokerKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCFMMCBrokerKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CreateTime, (const char *)arg2, 9-1);
      arg1->CreateTime[9-1] = 0;
    } else {
      arg1->CreateTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCFMMCBrokerKeyField_1CreateTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCFMMCBrokerKeyField *arg1 = (CThostFtdcCFMMCBrokerKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCFMMCBrokerKeyField **)&jarg1; 
  result = (char *) ((arg1)->CreateTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCFMMCBrokerKeyField_1KeyID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcCFMMCBrokerKeyField *arg1 = (CThostFtdcCFMMCBrokerKeyField *) 0 ;
  TThostFtdcSequenceNoType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCFMMCBrokerKeyField **)&jarg1; 
  arg2 = (TThostFtdcSequenceNoType)jarg2; 
  if (arg1) (arg1)->KeyID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcCFMMCBrokerKeyField_1KeyID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcCFMMCBrokerKeyField *arg1 = (CThostFtdcCFMMCBrokerKeyField *) 0 ;
  TThostFtdcSequenceNoType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCFMMCBrokerKeyField **)&jarg1; 
  result = (TThostFtdcSequenceNoType) ((arg1)->KeyID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCFMMCBrokerKeyField_1CurrentKey_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCFMMCBrokerKeyField *arg1 = (CThostFtdcCFMMCBrokerKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCFMMCBrokerKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrentKey, (const char *)arg2, 21-1);
      arg1->CurrentKey[21-1] = 0;
    } else {
      arg1->CurrentKey[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCFMMCBrokerKeyField_1CurrentKey_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCFMMCBrokerKeyField *arg1 = (CThostFtdcCFMMCBrokerKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCFMMCBrokerKeyField **)&jarg1; 
  result = (char *) ((arg1)->CurrentKey);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCFMMCBrokerKeyField_1KeyKind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcCFMMCBrokerKeyField *arg1 = (CThostFtdcCFMMCBrokerKeyField *) 0 ;
  TThostFtdcCFMMCKeyKindType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCFMMCBrokerKeyField **)&jarg1; 
  arg2 = (TThostFtdcCFMMCKeyKindType)jarg2; 
  if (arg1) (arg1)->KeyKind = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcCFMMCBrokerKeyField_1KeyKind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcCFMMCBrokerKeyField *arg1 = (CThostFtdcCFMMCBrokerKeyField *) 0 ;
  TThostFtdcCFMMCKeyKindType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCFMMCBrokerKeyField **)&jarg1; 
  result = (TThostFtdcCFMMCKeyKindType) ((arg1)->KeyKind);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcCFMMCBrokerKeyField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcCFMMCBrokerKeyField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcCFMMCBrokerKeyField *)new CThostFtdcCFMMCBrokerKeyField();
  *(CThostFtdcCFMMCBrokerKeyField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcCFMMCBrokerKeyField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcCFMMCBrokerKeyField *arg1 = (CThostFtdcCFMMCBrokerKeyField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcCFMMCBrokerKeyField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCFMMCTradingAccountKeyField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCFMMCTradingAccountKeyField *arg1 = (CThostFtdcCFMMCTradingAccountKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCFMMCTradingAccountKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCFMMCTradingAccountKeyField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCFMMCTradingAccountKeyField *arg1 = (CThostFtdcCFMMCTradingAccountKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCFMMCTradingAccountKeyField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCFMMCTradingAccountKeyField_1ParticipantID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCFMMCTradingAccountKeyField *arg1 = (CThostFtdcCFMMCTradingAccountKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCFMMCTradingAccountKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ParticipantID, (const char *)arg2, 11-1);
      arg1->ParticipantID[11-1] = 0;
    } else {
      arg1->ParticipantID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCFMMCTradingAccountKeyField_1ParticipantID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCFMMCTradingAccountKeyField *arg1 = (CThostFtdcCFMMCTradingAccountKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCFMMCTradingAccountKeyField **)&jarg1; 
  result = (char *) ((arg1)->ParticipantID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCFMMCTradingAccountKeyField_1AccountID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCFMMCTradingAccountKeyField *arg1 = (CThostFtdcCFMMCTradingAccountKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCFMMCTradingAccountKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 13-1);
      arg1->AccountID[13-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCFMMCTradingAccountKeyField_1AccountID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCFMMCTradingAccountKeyField *arg1 = (CThostFtdcCFMMCTradingAccountKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCFMMCTradingAccountKeyField **)&jarg1; 
  result = (char *) ((arg1)->AccountID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCFMMCTradingAccountKeyField_1KeyID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcCFMMCTradingAccountKeyField *arg1 = (CThostFtdcCFMMCTradingAccountKeyField *) 0 ;
  TThostFtdcSequenceNoType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCFMMCTradingAccountKeyField **)&jarg1; 
  arg2 = (TThostFtdcSequenceNoType)jarg2; 
  if (arg1) (arg1)->KeyID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcCFMMCTradingAccountKeyField_1KeyID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcCFMMCTradingAccountKeyField *arg1 = (CThostFtdcCFMMCTradingAccountKeyField *) 0 ;
  TThostFtdcSequenceNoType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCFMMCTradingAccountKeyField **)&jarg1; 
  result = (TThostFtdcSequenceNoType) ((arg1)->KeyID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCFMMCTradingAccountKeyField_1CurrentKey_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCFMMCTradingAccountKeyField *arg1 = (CThostFtdcCFMMCTradingAccountKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCFMMCTradingAccountKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrentKey, (const char *)arg2, 21-1);
      arg1->CurrentKey[21-1] = 0;
    } else {
      arg1->CurrentKey[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCFMMCTradingAccountKeyField_1CurrentKey_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCFMMCTradingAccountKeyField *arg1 = (CThostFtdcCFMMCTradingAccountKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCFMMCTradingAccountKeyField **)&jarg1; 
  result = (char *) ((arg1)->CurrentKey);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcCFMMCTradingAccountKeyField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcCFMMCTradingAccountKeyField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcCFMMCTradingAccountKeyField *)new CThostFtdcCFMMCTradingAccountKeyField();
  *(CThostFtdcCFMMCTradingAccountKeyField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcCFMMCTradingAccountKeyField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcCFMMCTradingAccountKeyField *arg1 = (CThostFtdcCFMMCTradingAccountKeyField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcCFMMCTradingAccountKeyField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryCFMMCTradingAccountKeyField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryCFMMCTradingAccountKeyField *arg1 = (CThostFtdcQryCFMMCTradingAccountKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryCFMMCTradingAccountKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryCFMMCTradingAccountKeyField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryCFMMCTradingAccountKeyField *arg1 = (CThostFtdcQryCFMMCTradingAccountKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryCFMMCTradingAccountKeyField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryCFMMCTradingAccountKeyField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryCFMMCTradingAccountKeyField *arg1 = (CThostFtdcQryCFMMCTradingAccountKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryCFMMCTradingAccountKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryCFMMCTradingAccountKeyField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryCFMMCTradingAccountKeyField *arg1 = (CThostFtdcQryCFMMCTradingAccountKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryCFMMCTradingAccountKeyField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryCFMMCTradingAccountKeyField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryCFMMCTradingAccountKeyField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryCFMMCTradingAccountKeyField *)new CThostFtdcQryCFMMCTradingAccountKeyField();
  *(CThostFtdcQryCFMMCTradingAccountKeyField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryCFMMCTradingAccountKeyField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryCFMMCTradingAccountKeyField *arg1 = (CThostFtdcQryCFMMCTradingAccountKeyField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryCFMMCTradingAccountKeyField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserOTPParamField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerUserOTPParamField *arg1 = (CThostFtdcBrokerUserOTPParamField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserOTPParamField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserOTPParamField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerUserOTPParamField *arg1 = (CThostFtdcBrokerUserOTPParamField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserOTPParamField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserOTPParamField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerUserOTPParamField *arg1 = (CThostFtdcBrokerUserOTPParamField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserOTPParamField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserOTPParamField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerUserOTPParamField *arg1 = (CThostFtdcBrokerUserOTPParamField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserOTPParamField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserOTPParamField_1OTPVendorsID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerUserOTPParamField *arg1 = (CThostFtdcBrokerUserOTPParamField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserOTPParamField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OTPVendorsID, (const char *)arg2, 2-1);
      arg1->OTPVendorsID[2-1] = 0;
    } else {
      arg1->OTPVendorsID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserOTPParamField_1OTPVendorsID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerUserOTPParamField *arg1 = (CThostFtdcBrokerUserOTPParamField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserOTPParamField **)&jarg1; 
  result = (char *) ((arg1)->OTPVendorsID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserOTPParamField_1SerialNumber_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerUserOTPParamField *arg1 = (CThostFtdcBrokerUserOTPParamField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserOTPParamField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->SerialNumber, (const char *)arg2, 17-1);
      arg1->SerialNumber[17-1] = 0;
    } else {
      arg1->SerialNumber[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserOTPParamField_1SerialNumber_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerUserOTPParamField *arg1 = (CThostFtdcBrokerUserOTPParamField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserOTPParamField **)&jarg1; 
  result = (char *) ((arg1)->SerialNumber);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserOTPParamField_1AuthKey_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerUserOTPParamField *arg1 = (CThostFtdcBrokerUserOTPParamField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserOTPParamField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->AuthKey, (const char *)arg2, 41-1);
      arg1->AuthKey[41-1] = 0;
    } else {
      arg1->AuthKey[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserOTPParamField_1AuthKey_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerUserOTPParamField *arg1 = (CThostFtdcBrokerUserOTPParamField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserOTPParamField **)&jarg1; 
  result = (char *) ((arg1)->AuthKey);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserOTPParamField_1LastDrift_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcBrokerUserOTPParamField *arg1 = (CThostFtdcBrokerUserOTPParamField *) 0 ;
  TThostFtdcLastDriftType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserOTPParamField **)&jarg1; 
  arg2 = (TThostFtdcLastDriftType)jarg2; 
  if (arg1) (arg1)->LastDrift = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserOTPParamField_1LastDrift_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcBrokerUserOTPParamField *arg1 = (CThostFtdcBrokerUserOTPParamField *) 0 ;
  TThostFtdcLastDriftType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserOTPParamField **)&jarg1; 
  result = (TThostFtdcLastDriftType) ((arg1)->LastDrift);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserOTPParamField_1LastSuccess_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcBrokerUserOTPParamField *arg1 = (CThostFtdcBrokerUserOTPParamField *) 0 ;
  TThostFtdcLastSuccessType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserOTPParamField **)&jarg1; 
  arg2 = (TThostFtdcLastSuccessType)jarg2; 
  if (arg1) (arg1)->LastSuccess = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserOTPParamField_1LastSuccess_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcBrokerUserOTPParamField *arg1 = (CThostFtdcBrokerUserOTPParamField *) 0 ;
  TThostFtdcLastSuccessType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserOTPParamField **)&jarg1; 
  result = (TThostFtdcLastSuccessType) ((arg1)->LastSuccess);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserOTPParamField_1OTPType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcBrokerUserOTPParamField *arg1 = (CThostFtdcBrokerUserOTPParamField *) 0 ;
  TThostFtdcOTPTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserOTPParamField **)&jarg1; 
  arg2 = (TThostFtdcOTPTypeType)jarg2; 
  if (arg1) (arg1)->OTPType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserOTPParamField_1OTPType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcBrokerUserOTPParamField *arg1 = (CThostFtdcBrokerUserOTPParamField *) 0 ;
  TThostFtdcOTPTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserOTPParamField **)&jarg1; 
  result = (TThostFtdcOTPTypeType) ((arg1)->OTPType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcBrokerUserOTPParamField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcBrokerUserOTPParamField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcBrokerUserOTPParamField *)new CThostFtdcBrokerUserOTPParamField();
  *(CThostFtdcBrokerUserOTPParamField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcBrokerUserOTPParamField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcBrokerUserOTPParamField *arg1 = (CThostFtdcBrokerUserOTPParamField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcBrokerUserOTPParamField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcManualSyncBrokerUserOTPField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcManualSyncBrokerUserOTPField *arg1 = (CThostFtdcManualSyncBrokerUserOTPField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcManualSyncBrokerUserOTPField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcManualSyncBrokerUserOTPField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcManualSyncBrokerUserOTPField *arg1 = (CThostFtdcManualSyncBrokerUserOTPField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcManualSyncBrokerUserOTPField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcManualSyncBrokerUserOTPField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcManualSyncBrokerUserOTPField *arg1 = (CThostFtdcManualSyncBrokerUserOTPField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcManualSyncBrokerUserOTPField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcManualSyncBrokerUserOTPField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcManualSyncBrokerUserOTPField *arg1 = (CThostFtdcManualSyncBrokerUserOTPField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcManualSyncBrokerUserOTPField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcManualSyncBrokerUserOTPField_1OTPType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcManualSyncBrokerUserOTPField *arg1 = (CThostFtdcManualSyncBrokerUserOTPField *) 0 ;
  TThostFtdcOTPTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcManualSyncBrokerUserOTPField **)&jarg1; 
  arg2 = (TThostFtdcOTPTypeType)jarg2; 
  if (arg1) (arg1)->OTPType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcManualSyncBrokerUserOTPField_1OTPType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcManualSyncBrokerUserOTPField *arg1 = (CThostFtdcManualSyncBrokerUserOTPField *) 0 ;
  TThostFtdcOTPTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcManualSyncBrokerUserOTPField **)&jarg1; 
  result = (TThostFtdcOTPTypeType) ((arg1)->OTPType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcManualSyncBrokerUserOTPField_1FirstOTP_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcManualSyncBrokerUserOTPField *arg1 = (CThostFtdcManualSyncBrokerUserOTPField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcManualSyncBrokerUserOTPField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->FirstOTP, (const char *)arg2, 41-1);
      arg1->FirstOTP[41-1] = 0;
    } else {
      arg1->FirstOTP[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcManualSyncBrokerUserOTPField_1FirstOTP_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcManualSyncBrokerUserOTPField *arg1 = (CThostFtdcManualSyncBrokerUserOTPField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcManualSyncBrokerUserOTPField **)&jarg1; 
  result = (char *) ((arg1)->FirstOTP);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcManualSyncBrokerUserOTPField_1SecondOTP_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcManualSyncBrokerUserOTPField *arg1 = (CThostFtdcManualSyncBrokerUserOTPField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcManualSyncBrokerUserOTPField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->SecondOTP, (const char *)arg2, 41-1);
      arg1->SecondOTP[41-1] = 0;
    } else {
      arg1->SecondOTP[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcManualSyncBrokerUserOTPField_1SecondOTP_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcManualSyncBrokerUserOTPField *arg1 = (CThostFtdcManualSyncBrokerUserOTPField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcManualSyncBrokerUserOTPField **)&jarg1; 
  result = (char *) ((arg1)->SecondOTP);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcManualSyncBrokerUserOTPField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcManualSyncBrokerUserOTPField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcManualSyncBrokerUserOTPField *)new CThostFtdcManualSyncBrokerUserOTPField();
  *(CThostFtdcManualSyncBrokerUserOTPField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcManualSyncBrokerUserOTPField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcManualSyncBrokerUserOTPField *arg1 = (CThostFtdcManualSyncBrokerUserOTPField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcManualSyncBrokerUserOTPField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCommRateModelField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCommRateModelField *arg1 = (CThostFtdcCommRateModelField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCommRateModelField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCommRateModelField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCommRateModelField *arg1 = (CThostFtdcCommRateModelField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCommRateModelField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCommRateModelField_1CommModelID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCommRateModelField *arg1 = (CThostFtdcCommRateModelField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCommRateModelField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CommModelID, (const char *)arg2, 13-1);
      arg1->CommModelID[13-1] = 0;
    } else {
      arg1->CommModelID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCommRateModelField_1CommModelID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCommRateModelField *arg1 = (CThostFtdcCommRateModelField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCommRateModelField **)&jarg1; 
  result = (char *) ((arg1)->CommModelID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCommRateModelField_1CommModelName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCommRateModelField *arg1 = (CThostFtdcCommRateModelField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCommRateModelField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CommModelName, (const char *)arg2, 161-1);
      arg1->CommModelName[161-1] = 0;
    } else {
      arg1->CommModelName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCommRateModelField_1CommModelName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCommRateModelField *arg1 = (CThostFtdcCommRateModelField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCommRateModelField **)&jarg1; 
  result = (char *) ((arg1)->CommModelName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcCommRateModelField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcCommRateModelField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcCommRateModelField *)new CThostFtdcCommRateModelField();
  *(CThostFtdcCommRateModelField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcCommRateModelField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcCommRateModelField *arg1 = (CThostFtdcCommRateModelField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcCommRateModelField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryCommRateModelField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryCommRateModelField *arg1 = (CThostFtdcQryCommRateModelField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryCommRateModelField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryCommRateModelField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryCommRateModelField *arg1 = (CThostFtdcQryCommRateModelField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryCommRateModelField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryCommRateModelField_1CommModelID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryCommRateModelField *arg1 = (CThostFtdcQryCommRateModelField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryCommRateModelField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CommModelID, (const char *)arg2, 13-1);
      arg1->CommModelID[13-1] = 0;
    } else {
      arg1->CommModelID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryCommRateModelField_1CommModelID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryCommRateModelField *arg1 = (CThostFtdcQryCommRateModelField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryCommRateModelField **)&jarg1; 
  result = (char *) ((arg1)->CommModelID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryCommRateModelField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryCommRateModelField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryCommRateModelField *)new CThostFtdcQryCommRateModelField();
  *(CThostFtdcQryCommRateModelField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryCommRateModelField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryCommRateModelField *arg1 = (CThostFtdcQryCommRateModelField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryCommRateModelField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarginModelField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMarginModelField *arg1 = (CThostFtdcMarginModelField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarginModelField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarginModelField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMarginModelField *arg1 = (CThostFtdcMarginModelField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarginModelField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarginModelField_1MarginModelID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMarginModelField *arg1 = (CThostFtdcMarginModelField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarginModelField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->MarginModelID, (const char *)arg2, 13-1);
      arg1->MarginModelID[13-1] = 0;
    } else {
      arg1->MarginModelID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarginModelField_1MarginModelID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMarginModelField *arg1 = (CThostFtdcMarginModelField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarginModelField **)&jarg1; 
  result = (char *) ((arg1)->MarginModelID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarginModelField_1MarginModelName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMarginModelField *arg1 = (CThostFtdcMarginModelField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarginModelField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->MarginModelName, (const char *)arg2, 161-1);
      arg1->MarginModelName[161-1] = 0;
    } else {
      arg1->MarginModelName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMarginModelField_1MarginModelName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMarginModelField *arg1 = (CThostFtdcMarginModelField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMarginModelField **)&jarg1; 
  result = (char *) ((arg1)->MarginModelName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcMarginModelField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcMarginModelField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcMarginModelField *)new CThostFtdcMarginModelField();
  *(CThostFtdcMarginModelField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcMarginModelField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcMarginModelField *arg1 = (CThostFtdcMarginModelField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcMarginModelField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryMarginModelField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryMarginModelField *arg1 = (CThostFtdcQryMarginModelField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryMarginModelField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryMarginModelField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryMarginModelField *arg1 = (CThostFtdcQryMarginModelField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryMarginModelField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryMarginModelField_1MarginModelID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryMarginModelField *arg1 = (CThostFtdcQryMarginModelField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryMarginModelField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->MarginModelID, (const char *)arg2, 13-1);
      arg1->MarginModelID[13-1] = 0;
    } else {
      arg1->MarginModelID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryMarginModelField_1MarginModelID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryMarginModelField *arg1 = (CThostFtdcQryMarginModelField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryMarginModelField **)&jarg1; 
  result = (char *) ((arg1)->MarginModelID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryMarginModelField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryMarginModelField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryMarginModelField *)new CThostFtdcQryMarginModelField();
  *(CThostFtdcQryMarginModelField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryMarginModelField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryMarginModelField *arg1 = (CThostFtdcQryMarginModelField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryMarginModelField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcEWarrantOffsetField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcEWarrantOffsetField *arg1 = (CThostFtdcEWarrantOffsetField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcEWarrantOffsetField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcEWarrantOffsetField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcEWarrantOffsetField *arg1 = (CThostFtdcEWarrantOffsetField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcEWarrantOffsetField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcEWarrantOffsetField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcEWarrantOffsetField *arg1 = (CThostFtdcEWarrantOffsetField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcEWarrantOffsetField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcEWarrantOffsetField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcEWarrantOffsetField *arg1 = (CThostFtdcEWarrantOffsetField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcEWarrantOffsetField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcEWarrantOffsetField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcEWarrantOffsetField *arg1 = (CThostFtdcEWarrantOffsetField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcEWarrantOffsetField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcEWarrantOffsetField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcEWarrantOffsetField *arg1 = (CThostFtdcEWarrantOffsetField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcEWarrantOffsetField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcEWarrantOffsetField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcEWarrantOffsetField *arg1 = (CThostFtdcEWarrantOffsetField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcEWarrantOffsetField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcEWarrantOffsetField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcEWarrantOffsetField *arg1 = (CThostFtdcEWarrantOffsetField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcEWarrantOffsetField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcEWarrantOffsetField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcEWarrantOffsetField *arg1 = (CThostFtdcEWarrantOffsetField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcEWarrantOffsetField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcEWarrantOffsetField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcEWarrantOffsetField *arg1 = (CThostFtdcEWarrantOffsetField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcEWarrantOffsetField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcEWarrantOffsetField_1Direction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcEWarrantOffsetField *arg1 = (CThostFtdcEWarrantOffsetField *) 0 ;
  TThostFtdcDirectionType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcEWarrantOffsetField **)&jarg1; 
  arg2 = (TThostFtdcDirectionType)jarg2; 
  if (arg1) (arg1)->Direction = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcEWarrantOffsetField_1Direction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcEWarrantOffsetField *arg1 = (CThostFtdcEWarrantOffsetField *) 0 ;
  TThostFtdcDirectionType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcEWarrantOffsetField **)&jarg1; 
  result = (TThostFtdcDirectionType) ((arg1)->Direction);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcEWarrantOffsetField_1HedgeFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcEWarrantOffsetField *arg1 = (CThostFtdcEWarrantOffsetField *) 0 ;
  TThostFtdcHedgeFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcEWarrantOffsetField **)&jarg1; 
  arg2 = (TThostFtdcHedgeFlagType)jarg2; 
  if (arg1) (arg1)->HedgeFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcEWarrantOffsetField_1HedgeFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcEWarrantOffsetField *arg1 = (CThostFtdcEWarrantOffsetField *) 0 ;
  TThostFtdcHedgeFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcEWarrantOffsetField **)&jarg1; 
  result = (TThostFtdcHedgeFlagType) ((arg1)->HedgeFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcEWarrantOffsetField_1Volume_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcEWarrantOffsetField *arg1 = (CThostFtdcEWarrantOffsetField *) 0 ;
  TThostFtdcVolumeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcEWarrantOffsetField **)&jarg1; 
  arg2 = (TThostFtdcVolumeType)jarg2; 
  if (arg1) (arg1)->Volume = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcEWarrantOffsetField_1Volume_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcEWarrantOffsetField *arg1 = (CThostFtdcEWarrantOffsetField *) 0 ;
  TThostFtdcVolumeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcEWarrantOffsetField **)&jarg1; 
  result = (TThostFtdcVolumeType) ((arg1)->Volume);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcEWarrantOffsetField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcEWarrantOffsetField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcEWarrantOffsetField *)new CThostFtdcEWarrantOffsetField();
  *(CThostFtdcEWarrantOffsetField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcEWarrantOffsetField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcEWarrantOffsetField *arg1 = (CThostFtdcEWarrantOffsetField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcEWarrantOffsetField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryEWarrantOffsetField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryEWarrantOffsetField *arg1 = (CThostFtdcQryEWarrantOffsetField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryEWarrantOffsetField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryEWarrantOffsetField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryEWarrantOffsetField *arg1 = (CThostFtdcQryEWarrantOffsetField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryEWarrantOffsetField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryEWarrantOffsetField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryEWarrantOffsetField *arg1 = (CThostFtdcQryEWarrantOffsetField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryEWarrantOffsetField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryEWarrantOffsetField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryEWarrantOffsetField *arg1 = (CThostFtdcQryEWarrantOffsetField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryEWarrantOffsetField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryEWarrantOffsetField_1ExchangeID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryEWarrantOffsetField *arg1 = (CThostFtdcQryEWarrantOffsetField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryEWarrantOffsetField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ExchangeID, (const char *)arg2, 9-1);
      arg1->ExchangeID[9-1] = 0;
    } else {
      arg1->ExchangeID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryEWarrantOffsetField_1ExchangeID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryEWarrantOffsetField *arg1 = (CThostFtdcQryEWarrantOffsetField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryEWarrantOffsetField **)&jarg1; 
  result = (char *) ((arg1)->ExchangeID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryEWarrantOffsetField_1InstrumentID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryEWarrantOffsetField *arg1 = (CThostFtdcQryEWarrantOffsetField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryEWarrantOffsetField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InstrumentID, (const char *)arg2, 31-1);
      arg1->InstrumentID[31-1] = 0;
    } else {
      arg1->InstrumentID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryEWarrantOffsetField_1InstrumentID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryEWarrantOffsetField *arg1 = (CThostFtdcQryEWarrantOffsetField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryEWarrantOffsetField **)&jarg1; 
  result = (char *) ((arg1)->InstrumentID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryEWarrantOffsetField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryEWarrantOffsetField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryEWarrantOffsetField *)new CThostFtdcQryEWarrantOffsetField();
  *(CThostFtdcQryEWarrantOffsetField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryEWarrantOffsetField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryEWarrantOffsetField *arg1 = (CThostFtdcQryEWarrantOffsetField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryEWarrantOffsetField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInvestorProductGroupMarginField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryInvestorProductGroupMarginField *arg1 = (CThostFtdcQryInvestorProductGroupMarginField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInvestorProductGroupMarginField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInvestorProductGroupMarginField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryInvestorProductGroupMarginField *arg1 = (CThostFtdcQryInvestorProductGroupMarginField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInvestorProductGroupMarginField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInvestorProductGroupMarginField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryInvestorProductGroupMarginField *arg1 = (CThostFtdcQryInvestorProductGroupMarginField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInvestorProductGroupMarginField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInvestorProductGroupMarginField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryInvestorProductGroupMarginField *arg1 = (CThostFtdcQryInvestorProductGroupMarginField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInvestorProductGroupMarginField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInvestorProductGroupMarginField_1ProductGroupID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryInvestorProductGroupMarginField *arg1 = (CThostFtdcQryInvestorProductGroupMarginField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInvestorProductGroupMarginField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ProductGroupID, (const char *)arg2, 31-1);
      arg1->ProductGroupID[31-1] = 0;
    } else {
      arg1->ProductGroupID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryInvestorProductGroupMarginField_1ProductGroupID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryInvestorProductGroupMarginField *arg1 = (CThostFtdcQryInvestorProductGroupMarginField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryInvestorProductGroupMarginField **)&jarg1; 
  result = (char *) ((arg1)->ProductGroupID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryInvestorProductGroupMarginField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryInvestorProductGroupMarginField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryInvestorProductGroupMarginField *)new CThostFtdcQryInvestorProductGroupMarginField();
  *(CThostFtdcQryInvestorProductGroupMarginField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryInvestorProductGroupMarginField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryInvestorProductGroupMarginField *arg1 = (CThostFtdcQryInvestorProductGroupMarginField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryInvestorProductGroupMarginField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1ProductGroupID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ProductGroupID, (const char *)arg2, 31-1);
      arg1->ProductGroupID[31-1] = 0;
    } else {
      arg1->ProductGroupID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1ProductGroupID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  result = (char *) ((arg1)->ProductGroupID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1SettlementID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcSettlementIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  arg2 = (TThostFtdcSettlementIDType)jarg2; 
  if (arg1) (arg1)->SettlementID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1SettlementID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcSettlementIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  result = (TThostFtdcSettlementIDType) ((arg1)->SettlementID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1FrozenMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->FrozenMargin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1FrozenMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->FrozenMargin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1LongFrozenMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->LongFrozenMargin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1LongFrozenMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->LongFrozenMargin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1ShortFrozenMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->ShortFrozenMargin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1ShortFrozenMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->ShortFrozenMargin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1UseMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->UseMargin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1UseMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->UseMargin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1LongUseMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->LongUseMargin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1LongUseMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->LongUseMargin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1ShortUseMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->ShortUseMargin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1ShortUseMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->ShortUseMargin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1ExchMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->ExchMargin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1ExchMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->ExchMargin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1LongExchMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->LongExchMargin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1LongExchMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->LongExchMargin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1ShortExchMargin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->ShortExchMargin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1ShortExchMargin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->ShortExchMargin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1CloseProfit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->CloseProfit = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1CloseProfit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->CloseProfit);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1FrozenCommission_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->FrozenCommission = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1FrozenCommission_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->FrozenCommission);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1Commission_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Commission = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1Commission_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Commission);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1FrozenCash_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->FrozenCash = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1FrozenCash_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->FrozenCash);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1CashIn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->CashIn = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1CashIn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->CashIn);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1PositionProfit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->PositionProfit = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1PositionProfit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->PositionProfit);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1OffsetAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->OffsetAmount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1OffsetAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->OffsetAmount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1LongOffsetAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->LongOffsetAmount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1LongOffsetAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->LongOffsetAmount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1ShortOffsetAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->ShortOffsetAmount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1ShortOffsetAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->ShortOffsetAmount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1ExchOffsetAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->ExchOffsetAmount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1ExchOffsetAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->ExchOffsetAmount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1LongExchOffsetAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->LongExchOffsetAmount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1LongExchOffsetAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->LongExchOffsetAmount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1ShortExchOffsetAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->ShortExchOffsetAmount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcInvestorProductGroupMarginField_1ShortExchOffsetAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->ShortExchOffsetAmount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcInvestorProductGroupMarginField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcInvestorProductGroupMarginField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcInvestorProductGroupMarginField *)new CThostFtdcInvestorProductGroupMarginField();
  *(CThostFtdcInvestorProductGroupMarginField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcInvestorProductGroupMarginField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcInvestorProductGroupMarginField *arg1 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1TradeCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeCode, (const char *)arg2, 7-1);
      arg1->TradeCode[7-1] = 0;
    } else {
      arg1->TradeCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1TradeCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradeCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1BankBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBranchID, (const char *)arg2, 5-1);
      arg1->BankBranchID[5-1] = 0;
    } else {
      arg1->BankBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1BankBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1BrokerBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerBranchID, (const char *)arg2, 31-1);
      arg1->BrokerBranchID[31-1] = 0;
    } else {
      arg1->BrokerBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1BrokerBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->BrokerBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1TradeDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeDate, (const char *)arg2, 9-1);
      arg1->TradeDate[9-1] = 0;
    } else {
      arg1->TradeDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1TradeDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradeDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1TradeTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeTime, (const char *)arg2, 9-1);
      arg1->TradeTime[9-1] = 0;
    } else {
      arg1->TradeTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1TradeTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradeTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1BankSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSerial, (const char *)arg2, 13-1);
      arg1->BankSerial[13-1] = 0;
    } else {
      arg1->BankSerial[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1BankSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankSerial);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1PlateSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  TThostFtdcSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = (TThostFtdcSerialType)jarg2; 
  if (arg1) (arg1)->PlateSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1PlateSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  TThostFtdcSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (TThostFtdcSerialType) ((arg1)->PlateSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1LastFragment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  TThostFtdcLastFragmentType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = (TThostFtdcLastFragmentType)jarg2; 
  if (arg1) (arg1)->LastFragment = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1LastFragment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  TThostFtdcLastFragmentType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (TThostFtdcLastFragmentType) ((arg1)->LastFragment);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1CustomerName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CustomerName, (const char *)arg2, 51-1);
      arg1->CustomerName[51-1] = 0;
    } else {
      arg1->CustomerName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1CustomerName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->CustomerName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1IdCardType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  TThostFtdcIdCardTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = (TThostFtdcIdCardTypeType)jarg2; 
  if (arg1) (arg1)->IdCardType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1IdCardType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  TThostFtdcIdCardTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (TThostFtdcIdCardTypeType) ((arg1)->IdCardType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1IdentifiedCardNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->IdentifiedCardNo, (const char *)arg2, 51-1);
      arg1->IdentifiedCardNo[51-1] = 0;
    } else {
      arg1->IdentifiedCardNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1IdentifiedCardNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->IdentifiedCardNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1Gender_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  TThostFtdcGenderType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = (TThostFtdcGenderType)jarg2; 
  if (arg1) (arg1)->Gender = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1Gender_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  TThostFtdcGenderType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (TThostFtdcGenderType) ((arg1)->Gender);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1CountryCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CountryCode, (const char *)arg2, 21-1);
      arg1->CountryCode[21-1] = 0;
    } else {
      arg1->CountryCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1CountryCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->CountryCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1CustType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  TThostFtdcCustTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = (TThostFtdcCustTypeType)jarg2; 
  if (arg1) (arg1)->CustType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1CustType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  TThostFtdcCustTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (TThostFtdcCustTypeType) ((arg1)->CustType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1Address_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Address, (const char *)arg2, 101-1);
      arg1->Address[101-1] = 0;
    } else {
      arg1->Address[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1Address_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->Address);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1ZipCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ZipCode, (const char *)arg2, 7-1);
      arg1->ZipCode[7-1] = 0;
    } else {
      arg1->ZipCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1ZipCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->ZipCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1Telephone_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Telephone, (const char *)arg2, 41-1);
      arg1->Telephone[41-1] = 0;
    } else {
      arg1->Telephone[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1Telephone_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->Telephone);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1MobilePhone_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->MobilePhone, (const char *)arg2, 21-1);
      arg1->MobilePhone[21-1] = 0;
    } else {
      arg1->MobilePhone[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1MobilePhone_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->MobilePhone);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1Fax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Fax, (const char *)arg2, 41-1);
      arg1->Fax[41-1] = 0;
    } else {
      arg1->Fax[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1Fax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->Fax);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1EMail_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->EMail, (const char *)arg2, 41-1);
      arg1->EMail[41-1] = 0;
    } else {
      arg1->EMail[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1EMail_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->EMail);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1MoneyAccountStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  TThostFtdcMoneyAccountStatusType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyAccountStatusType)jarg2; 
  if (arg1) (arg1)->MoneyAccountStatus = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1MoneyAccountStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  TThostFtdcMoneyAccountStatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (TThostFtdcMoneyAccountStatusType) ((arg1)->MoneyAccountStatus);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1BankAccount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankAccount, (const char *)arg2, 41-1);
      arg1->BankAccount[41-1] = 0;
    } else {
      arg1->BankAccount[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1BankAccount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankAccount);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1BankPassWord_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankPassWord, (const char *)arg2, 41-1);
      arg1->BankPassWord[41-1] = 0;
    } else {
      arg1->BankPassWord[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1BankPassWord_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankPassWord);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1AccountID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 13-1);
      arg1->AccountID[13-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1AccountID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->AccountID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1Password_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Password, (const char *)arg2, 41-1);
      arg1->Password[41-1] = 0;
    } else {
      arg1->Password[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1Password_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->Password);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1InstallID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  TThostFtdcInstallIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = (TThostFtdcInstallIDType)jarg2; 
  if (arg1) (arg1)->InstallID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1InstallID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  TThostFtdcInstallIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (TThostFtdcInstallIDType) ((arg1)->InstallID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1VerifyCertNoFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  TThostFtdcYesNoIndicatorType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = (TThostFtdcYesNoIndicatorType)jarg2; 
  if (arg1) (arg1)->VerifyCertNoFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1VerifyCertNoFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  TThostFtdcYesNoIndicatorType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (TThostFtdcYesNoIndicatorType) ((arg1)->VerifyCertNoFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1CurrencyID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrencyID, (const char *)arg2, 4-1);
      arg1->CurrencyID[4-1] = 0;
    } else {
      arg1->CurrencyID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1CurrencyID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->CurrencyID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1CashExchangeCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  TThostFtdcCashExchangeCodeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = (TThostFtdcCashExchangeCodeType)jarg2; 
  if (arg1) (arg1)->CashExchangeCode = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1CashExchangeCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  TThostFtdcCashExchangeCodeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (TThostFtdcCashExchangeCodeType) ((arg1)->CashExchangeCode);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1Digest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Digest, (const char *)arg2, 36-1);
      arg1->Digest[36-1] = 0;
    } else {
      arg1->Digest[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1Digest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->Digest);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1BankAccType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  TThostFtdcBankAccTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = (TThostFtdcBankAccTypeType)jarg2; 
  if (arg1) (arg1)->BankAccType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1BankAccType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  TThostFtdcBankAccTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (TThostFtdcBankAccTypeType) ((arg1)->BankAccType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1DeviceID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->DeviceID, (const char *)arg2, 3-1);
      arg1->DeviceID[3-1] = 0;
    } else {
      arg1->DeviceID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1DeviceID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->DeviceID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1BankSecuAccType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  TThostFtdcBankAccTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = (TThostFtdcBankAccTypeType)jarg2; 
  if (arg1) (arg1)->BankSecuAccType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1BankSecuAccType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  TThostFtdcBankAccTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (TThostFtdcBankAccTypeType) ((arg1)->BankSecuAccType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1BrokerIDByBank_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerIDByBank, (const char *)arg2, 33-1);
      arg1->BrokerIDByBank[33-1] = 0;
    } else {
      arg1->BrokerIDByBank[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1BrokerIDByBank_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->BrokerIDByBank);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1BankSecuAcc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSecuAcc, (const char *)arg2, 41-1);
      arg1->BankSecuAcc[41-1] = 0;
    } else {
      arg1->BankSecuAcc[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1BankSecuAcc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankSecuAcc);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1BankPwdFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  TThostFtdcPwdFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = (TThostFtdcPwdFlagType)jarg2; 
  if (arg1) (arg1)->BankPwdFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1BankPwdFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  TThostFtdcPwdFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (TThostFtdcPwdFlagType) ((arg1)->BankPwdFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1SecuPwdFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  TThostFtdcPwdFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = (TThostFtdcPwdFlagType)jarg2; 
  if (arg1) (arg1)->SecuPwdFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1SecuPwdFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  TThostFtdcPwdFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (TThostFtdcPwdFlagType) ((arg1)->SecuPwdFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1OperNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OperNo, (const char *)arg2, 17-1);
      arg1->OperNo[17-1] = 0;
    } else {
      arg1->OperNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1OperNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->OperNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1TID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  TThostFtdcTIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = (TThostFtdcTIDType)jarg2; 
  if (arg1) (arg1)->TID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1TID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  TThostFtdcTIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (TThostFtdcTIDType) ((arg1)->TID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqOpenAccountField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcReqOpenAccountField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcReqOpenAccountField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcReqOpenAccountField *)new CThostFtdcReqOpenAccountField();
  *(CThostFtdcReqOpenAccountField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcReqOpenAccountField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcReqOpenAccountField *arg1 = (CThostFtdcReqOpenAccountField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcReqOpenAccountField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1TradeCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeCode, (const char *)arg2, 7-1);
      arg1->TradeCode[7-1] = 0;
    } else {
      arg1->TradeCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1TradeCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradeCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1BankBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBranchID, (const char *)arg2, 5-1);
      arg1->BankBranchID[5-1] = 0;
    } else {
      arg1->BankBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1BankBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1BrokerBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerBranchID, (const char *)arg2, 31-1);
      arg1->BrokerBranchID[31-1] = 0;
    } else {
      arg1->BrokerBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1BrokerBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->BrokerBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1TradeDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeDate, (const char *)arg2, 9-1);
      arg1->TradeDate[9-1] = 0;
    } else {
      arg1->TradeDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1TradeDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradeDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1TradeTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeTime, (const char *)arg2, 9-1);
      arg1->TradeTime[9-1] = 0;
    } else {
      arg1->TradeTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1TradeTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradeTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1BankSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSerial, (const char *)arg2, 13-1);
      arg1->BankSerial[13-1] = 0;
    } else {
      arg1->BankSerial[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1BankSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankSerial);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1PlateSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  TThostFtdcSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = (TThostFtdcSerialType)jarg2; 
  if (arg1) (arg1)->PlateSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1PlateSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  TThostFtdcSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (TThostFtdcSerialType) ((arg1)->PlateSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1LastFragment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  TThostFtdcLastFragmentType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = (TThostFtdcLastFragmentType)jarg2; 
  if (arg1) (arg1)->LastFragment = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1LastFragment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  TThostFtdcLastFragmentType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (TThostFtdcLastFragmentType) ((arg1)->LastFragment);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1CustomerName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CustomerName, (const char *)arg2, 51-1);
      arg1->CustomerName[51-1] = 0;
    } else {
      arg1->CustomerName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1CustomerName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->CustomerName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1IdCardType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  TThostFtdcIdCardTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = (TThostFtdcIdCardTypeType)jarg2; 
  if (arg1) (arg1)->IdCardType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1IdCardType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  TThostFtdcIdCardTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (TThostFtdcIdCardTypeType) ((arg1)->IdCardType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1IdentifiedCardNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->IdentifiedCardNo, (const char *)arg2, 51-1);
      arg1->IdentifiedCardNo[51-1] = 0;
    } else {
      arg1->IdentifiedCardNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1IdentifiedCardNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->IdentifiedCardNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1Gender_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  TThostFtdcGenderType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = (TThostFtdcGenderType)jarg2; 
  if (arg1) (arg1)->Gender = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1Gender_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  TThostFtdcGenderType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (TThostFtdcGenderType) ((arg1)->Gender);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1CountryCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CountryCode, (const char *)arg2, 21-1);
      arg1->CountryCode[21-1] = 0;
    } else {
      arg1->CountryCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1CountryCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->CountryCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1CustType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  TThostFtdcCustTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = (TThostFtdcCustTypeType)jarg2; 
  if (arg1) (arg1)->CustType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1CustType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  TThostFtdcCustTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (TThostFtdcCustTypeType) ((arg1)->CustType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1Address_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Address, (const char *)arg2, 101-1);
      arg1->Address[101-1] = 0;
    } else {
      arg1->Address[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1Address_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->Address);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1ZipCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ZipCode, (const char *)arg2, 7-1);
      arg1->ZipCode[7-1] = 0;
    } else {
      arg1->ZipCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1ZipCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->ZipCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1Telephone_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Telephone, (const char *)arg2, 41-1);
      arg1->Telephone[41-1] = 0;
    } else {
      arg1->Telephone[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1Telephone_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->Telephone);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1MobilePhone_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->MobilePhone, (const char *)arg2, 21-1);
      arg1->MobilePhone[21-1] = 0;
    } else {
      arg1->MobilePhone[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1MobilePhone_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->MobilePhone);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1Fax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Fax, (const char *)arg2, 41-1);
      arg1->Fax[41-1] = 0;
    } else {
      arg1->Fax[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1Fax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->Fax);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1EMail_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->EMail, (const char *)arg2, 41-1);
      arg1->EMail[41-1] = 0;
    } else {
      arg1->EMail[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1EMail_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->EMail);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1MoneyAccountStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  TThostFtdcMoneyAccountStatusType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyAccountStatusType)jarg2; 
  if (arg1) (arg1)->MoneyAccountStatus = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1MoneyAccountStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  TThostFtdcMoneyAccountStatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (TThostFtdcMoneyAccountStatusType) ((arg1)->MoneyAccountStatus);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1BankAccount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankAccount, (const char *)arg2, 41-1);
      arg1->BankAccount[41-1] = 0;
    } else {
      arg1->BankAccount[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1BankAccount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankAccount);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1BankPassWord_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankPassWord, (const char *)arg2, 41-1);
      arg1->BankPassWord[41-1] = 0;
    } else {
      arg1->BankPassWord[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1BankPassWord_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankPassWord);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1AccountID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 13-1);
      arg1->AccountID[13-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1AccountID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->AccountID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1Password_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Password, (const char *)arg2, 41-1);
      arg1->Password[41-1] = 0;
    } else {
      arg1->Password[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1Password_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->Password);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1InstallID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  TThostFtdcInstallIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = (TThostFtdcInstallIDType)jarg2; 
  if (arg1) (arg1)->InstallID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1InstallID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  TThostFtdcInstallIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (TThostFtdcInstallIDType) ((arg1)->InstallID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1VerifyCertNoFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  TThostFtdcYesNoIndicatorType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = (TThostFtdcYesNoIndicatorType)jarg2; 
  if (arg1) (arg1)->VerifyCertNoFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1VerifyCertNoFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  TThostFtdcYesNoIndicatorType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (TThostFtdcYesNoIndicatorType) ((arg1)->VerifyCertNoFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1CurrencyID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrencyID, (const char *)arg2, 4-1);
      arg1->CurrencyID[4-1] = 0;
    } else {
      arg1->CurrencyID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1CurrencyID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->CurrencyID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1CashExchangeCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  TThostFtdcCashExchangeCodeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = (TThostFtdcCashExchangeCodeType)jarg2; 
  if (arg1) (arg1)->CashExchangeCode = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1CashExchangeCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  TThostFtdcCashExchangeCodeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (TThostFtdcCashExchangeCodeType) ((arg1)->CashExchangeCode);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1Digest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Digest, (const char *)arg2, 36-1);
      arg1->Digest[36-1] = 0;
    } else {
      arg1->Digest[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1Digest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->Digest);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1BankAccType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  TThostFtdcBankAccTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = (TThostFtdcBankAccTypeType)jarg2; 
  if (arg1) (arg1)->BankAccType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1BankAccType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  TThostFtdcBankAccTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (TThostFtdcBankAccTypeType) ((arg1)->BankAccType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1DeviceID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->DeviceID, (const char *)arg2, 3-1);
      arg1->DeviceID[3-1] = 0;
    } else {
      arg1->DeviceID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1DeviceID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->DeviceID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1BankSecuAccType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  TThostFtdcBankAccTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = (TThostFtdcBankAccTypeType)jarg2; 
  if (arg1) (arg1)->BankSecuAccType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1BankSecuAccType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  TThostFtdcBankAccTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (TThostFtdcBankAccTypeType) ((arg1)->BankSecuAccType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1BrokerIDByBank_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerIDByBank, (const char *)arg2, 33-1);
      arg1->BrokerIDByBank[33-1] = 0;
    } else {
      arg1->BrokerIDByBank[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1BrokerIDByBank_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->BrokerIDByBank);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1BankSecuAcc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSecuAcc, (const char *)arg2, 41-1);
      arg1->BankSecuAcc[41-1] = 0;
    } else {
      arg1->BankSecuAcc[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1BankSecuAcc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankSecuAcc);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1BankPwdFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  TThostFtdcPwdFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = (TThostFtdcPwdFlagType)jarg2; 
  if (arg1) (arg1)->BankPwdFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1BankPwdFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  TThostFtdcPwdFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (TThostFtdcPwdFlagType) ((arg1)->BankPwdFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1SecuPwdFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  TThostFtdcPwdFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = (TThostFtdcPwdFlagType)jarg2; 
  if (arg1) (arg1)->SecuPwdFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1SecuPwdFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  TThostFtdcPwdFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (TThostFtdcPwdFlagType) ((arg1)->SecuPwdFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1OperNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OperNo, (const char *)arg2, 17-1);
      arg1->OperNo[17-1] = 0;
    } else {
      arg1->OperNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1OperNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->OperNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1TID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  TThostFtdcTIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = (TThostFtdcTIDType)jarg2; 
  if (arg1) (arg1)->TID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1TID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  TThostFtdcTIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (TThostFtdcTIDType) ((arg1)->TID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqCancelAccountField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcReqCancelAccountField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcReqCancelAccountField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcReqCancelAccountField *)new CThostFtdcReqCancelAccountField();
  *(CThostFtdcReqCancelAccountField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcReqCancelAccountField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcReqCancelAccountField *arg1 = (CThostFtdcReqCancelAccountField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcReqCancelAccountField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1TradeCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeCode, (const char *)arg2, 7-1);
      arg1->TradeCode[7-1] = 0;
    } else {
      arg1->TradeCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1TradeCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradeCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1BankBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBranchID, (const char *)arg2, 5-1);
      arg1->BankBranchID[5-1] = 0;
    } else {
      arg1->BankBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1BankBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1BrokerBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerBranchID, (const char *)arg2, 31-1);
      arg1->BrokerBranchID[31-1] = 0;
    } else {
      arg1->BrokerBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1BrokerBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->BrokerBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1TradeDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeDate, (const char *)arg2, 9-1);
      arg1->TradeDate[9-1] = 0;
    } else {
      arg1->TradeDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1TradeDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradeDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1TradeTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeTime, (const char *)arg2, 9-1);
      arg1->TradeTime[9-1] = 0;
    } else {
      arg1->TradeTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1TradeTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradeTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1BankSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSerial, (const char *)arg2, 13-1);
      arg1->BankSerial[13-1] = 0;
    } else {
      arg1->BankSerial[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1BankSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankSerial);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1PlateSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  TThostFtdcSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = (TThostFtdcSerialType)jarg2; 
  if (arg1) (arg1)->PlateSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1PlateSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  TThostFtdcSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (TThostFtdcSerialType) ((arg1)->PlateSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1LastFragment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  TThostFtdcLastFragmentType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = (TThostFtdcLastFragmentType)jarg2; 
  if (arg1) (arg1)->LastFragment = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1LastFragment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  TThostFtdcLastFragmentType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (TThostFtdcLastFragmentType) ((arg1)->LastFragment);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1CustomerName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CustomerName, (const char *)arg2, 51-1);
      arg1->CustomerName[51-1] = 0;
    } else {
      arg1->CustomerName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1CustomerName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->CustomerName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1IdCardType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  TThostFtdcIdCardTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = (TThostFtdcIdCardTypeType)jarg2; 
  if (arg1) (arg1)->IdCardType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1IdCardType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  TThostFtdcIdCardTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (TThostFtdcIdCardTypeType) ((arg1)->IdCardType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1IdentifiedCardNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->IdentifiedCardNo, (const char *)arg2, 51-1);
      arg1->IdentifiedCardNo[51-1] = 0;
    } else {
      arg1->IdentifiedCardNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1IdentifiedCardNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->IdentifiedCardNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1Gender_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  TThostFtdcGenderType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = (TThostFtdcGenderType)jarg2; 
  if (arg1) (arg1)->Gender = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1Gender_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  TThostFtdcGenderType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (TThostFtdcGenderType) ((arg1)->Gender);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1CountryCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CountryCode, (const char *)arg2, 21-1);
      arg1->CountryCode[21-1] = 0;
    } else {
      arg1->CountryCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1CountryCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->CountryCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1CustType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  TThostFtdcCustTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = (TThostFtdcCustTypeType)jarg2; 
  if (arg1) (arg1)->CustType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1CustType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  TThostFtdcCustTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (TThostFtdcCustTypeType) ((arg1)->CustType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1Address_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Address, (const char *)arg2, 101-1);
      arg1->Address[101-1] = 0;
    } else {
      arg1->Address[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1Address_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->Address);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1ZipCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ZipCode, (const char *)arg2, 7-1);
      arg1->ZipCode[7-1] = 0;
    } else {
      arg1->ZipCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1ZipCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->ZipCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1Telephone_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Telephone, (const char *)arg2, 41-1);
      arg1->Telephone[41-1] = 0;
    } else {
      arg1->Telephone[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1Telephone_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->Telephone);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1MobilePhone_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->MobilePhone, (const char *)arg2, 21-1);
      arg1->MobilePhone[21-1] = 0;
    } else {
      arg1->MobilePhone[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1MobilePhone_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->MobilePhone);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1Fax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Fax, (const char *)arg2, 41-1);
      arg1->Fax[41-1] = 0;
    } else {
      arg1->Fax[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1Fax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->Fax);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1EMail_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->EMail, (const char *)arg2, 41-1);
      arg1->EMail[41-1] = 0;
    } else {
      arg1->EMail[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1EMail_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->EMail);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1MoneyAccountStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  TThostFtdcMoneyAccountStatusType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyAccountStatusType)jarg2; 
  if (arg1) (arg1)->MoneyAccountStatus = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1MoneyAccountStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  TThostFtdcMoneyAccountStatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (TThostFtdcMoneyAccountStatusType) ((arg1)->MoneyAccountStatus);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1BankAccount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankAccount, (const char *)arg2, 41-1);
      arg1->BankAccount[41-1] = 0;
    } else {
      arg1->BankAccount[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1BankAccount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankAccount);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1BankPassWord_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankPassWord, (const char *)arg2, 41-1);
      arg1->BankPassWord[41-1] = 0;
    } else {
      arg1->BankPassWord[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1BankPassWord_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankPassWord);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1NewBankAccount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->NewBankAccount, (const char *)arg2, 41-1);
      arg1->NewBankAccount[41-1] = 0;
    } else {
      arg1->NewBankAccount[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1NewBankAccount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->NewBankAccount);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1NewBankPassWord_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->NewBankPassWord, (const char *)arg2, 41-1);
      arg1->NewBankPassWord[41-1] = 0;
    } else {
      arg1->NewBankPassWord[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1NewBankPassWord_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->NewBankPassWord);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1AccountID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 13-1);
      arg1->AccountID[13-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1AccountID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->AccountID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1Password_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Password, (const char *)arg2, 41-1);
      arg1->Password[41-1] = 0;
    } else {
      arg1->Password[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1Password_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->Password);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1BankAccType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  TThostFtdcBankAccTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = (TThostFtdcBankAccTypeType)jarg2; 
  if (arg1) (arg1)->BankAccType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1BankAccType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  TThostFtdcBankAccTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (TThostFtdcBankAccTypeType) ((arg1)->BankAccType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1InstallID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  TThostFtdcInstallIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = (TThostFtdcInstallIDType)jarg2; 
  if (arg1) (arg1)->InstallID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1InstallID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  TThostFtdcInstallIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (TThostFtdcInstallIDType) ((arg1)->InstallID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1VerifyCertNoFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  TThostFtdcYesNoIndicatorType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = (TThostFtdcYesNoIndicatorType)jarg2; 
  if (arg1) (arg1)->VerifyCertNoFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1VerifyCertNoFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  TThostFtdcYesNoIndicatorType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (TThostFtdcYesNoIndicatorType) ((arg1)->VerifyCertNoFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1CurrencyID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrencyID, (const char *)arg2, 4-1);
      arg1->CurrencyID[4-1] = 0;
    } else {
      arg1->CurrencyID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1CurrencyID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->CurrencyID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1BrokerIDByBank_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerIDByBank, (const char *)arg2, 33-1);
      arg1->BrokerIDByBank[33-1] = 0;
    } else {
      arg1->BrokerIDByBank[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1BrokerIDByBank_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->BrokerIDByBank);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1BankPwdFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  TThostFtdcPwdFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = (TThostFtdcPwdFlagType)jarg2; 
  if (arg1) (arg1)->BankPwdFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1BankPwdFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  TThostFtdcPwdFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (TThostFtdcPwdFlagType) ((arg1)->BankPwdFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1SecuPwdFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  TThostFtdcPwdFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = (TThostFtdcPwdFlagType)jarg2; 
  if (arg1) (arg1)->SecuPwdFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1SecuPwdFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  TThostFtdcPwdFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (TThostFtdcPwdFlagType) ((arg1)->SecuPwdFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1TID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  TThostFtdcTIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = (TThostFtdcTIDType)jarg2; 
  if (arg1) (arg1)->TID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1TID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  TThostFtdcTIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (TThostFtdcTIDType) ((arg1)->TID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1Digest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Digest, (const char *)arg2, 36-1);
      arg1->Digest[36-1] = 0;
    } else {
      arg1->Digest[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqChangeAccountField_1Digest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->Digest);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcReqChangeAccountField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcReqChangeAccountField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcReqChangeAccountField *)new CThostFtdcReqChangeAccountField();
  *(CThostFtdcReqChangeAccountField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcReqChangeAccountField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcReqChangeAccountField *arg1 = (CThostFtdcReqChangeAccountField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcReqChangeAccountField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1TradeCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeCode, (const char *)arg2, 7-1);
      arg1->TradeCode[7-1] = 0;
    } else {
      arg1->TradeCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1TradeCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (char *) ((arg1)->TradeCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1BankBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBranchID, (const char *)arg2, 5-1);
      arg1->BankBranchID[5-1] = 0;
    } else {
      arg1->BankBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1BankBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (char *) ((arg1)->BankBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1BrokerBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerBranchID, (const char *)arg2, 31-1);
      arg1->BrokerBranchID[31-1] = 0;
    } else {
      arg1->BrokerBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1BrokerBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (char *) ((arg1)->BrokerBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1TradeDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeDate, (const char *)arg2, 9-1);
      arg1->TradeDate[9-1] = 0;
    } else {
      arg1->TradeDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1TradeDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (char *) ((arg1)->TradeDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1TradeTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeTime, (const char *)arg2, 9-1);
      arg1->TradeTime[9-1] = 0;
    } else {
      arg1->TradeTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1TradeTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (char *) ((arg1)->TradeTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1BankSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSerial, (const char *)arg2, 13-1);
      arg1->BankSerial[13-1] = 0;
    } else {
      arg1->BankSerial[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1BankSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (char *) ((arg1)->BankSerial);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1PlateSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = (TThostFtdcSerialType)jarg2; 
  if (arg1) (arg1)->PlateSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1PlateSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (TThostFtdcSerialType) ((arg1)->PlateSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1LastFragment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcLastFragmentType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = (TThostFtdcLastFragmentType)jarg2; 
  if (arg1) (arg1)->LastFragment = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1LastFragment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcLastFragmentType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (TThostFtdcLastFragmentType) ((arg1)->LastFragment);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1CustomerName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CustomerName, (const char *)arg2, 51-1);
      arg1->CustomerName[51-1] = 0;
    } else {
      arg1->CustomerName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1CustomerName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (char *) ((arg1)->CustomerName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1IdCardType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcIdCardTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = (TThostFtdcIdCardTypeType)jarg2; 
  if (arg1) (arg1)->IdCardType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1IdCardType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcIdCardTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (TThostFtdcIdCardTypeType) ((arg1)->IdCardType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1IdentifiedCardNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->IdentifiedCardNo, (const char *)arg2, 51-1);
      arg1->IdentifiedCardNo[51-1] = 0;
    } else {
      arg1->IdentifiedCardNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1IdentifiedCardNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (char *) ((arg1)->IdentifiedCardNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1CustType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcCustTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = (TThostFtdcCustTypeType)jarg2; 
  if (arg1) (arg1)->CustType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1CustType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcCustTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (TThostFtdcCustTypeType) ((arg1)->CustType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1BankAccount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankAccount, (const char *)arg2, 41-1);
      arg1->BankAccount[41-1] = 0;
    } else {
      arg1->BankAccount[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1BankAccount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (char *) ((arg1)->BankAccount);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1BankPassWord_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankPassWord, (const char *)arg2, 41-1);
      arg1->BankPassWord[41-1] = 0;
    } else {
      arg1->BankPassWord[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1BankPassWord_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (char *) ((arg1)->BankPassWord);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1AccountID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 13-1);
      arg1->AccountID[13-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1AccountID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (char *) ((arg1)->AccountID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1Password_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Password, (const char *)arg2, 41-1);
      arg1->Password[41-1] = 0;
    } else {
      arg1->Password[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1Password_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (char *) ((arg1)->Password);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1InstallID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcInstallIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = (TThostFtdcInstallIDType)jarg2; 
  if (arg1) (arg1)->InstallID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1InstallID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcInstallIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (TThostFtdcInstallIDType) ((arg1)->InstallID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1FutureSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcFutureSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = (TThostFtdcFutureSerialType)jarg2; 
  if (arg1) (arg1)->FutureSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1FutureSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcFutureSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (TThostFtdcFutureSerialType) ((arg1)->FutureSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1VerifyCertNoFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcYesNoIndicatorType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = (TThostFtdcYesNoIndicatorType)jarg2; 
  if (arg1) (arg1)->VerifyCertNoFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1VerifyCertNoFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcYesNoIndicatorType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (TThostFtdcYesNoIndicatorType) ((arg1)->VerifyCertNoFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1CurrencyID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrencyID, (const char *)arg2, 4-1);
      arg1->CurrencyID[4-1] = 0;
    } else {
      arg1->CurrencyID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1CurrencyID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (char *) ((arg1)->CurrencyID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1TradeAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcTradeAmountType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = (TThostFtdcTradeAmountType)jarg2; 
  if (arg1) (arg1)->TradeAmount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1TradeAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcTradeAmountType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (TThostFtdcTradeAmountType) ((arg1)->TradeAmount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1FutureFetchAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcTradeAmountType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = (TThostFtdcTradeAmountType)jarg2; 
  if (arg1) (arg1)->FutureFetchAmount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1FutureFetchAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcTradeAmountType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (TThostFtdcTradeAmountType) ((arg1)->FutureFetchAmount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1FeePayFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcFeePayFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = (TThostFtdcFeePayFlagType)jarg2; 
  if (arg1) (arg1)->FeePayFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1FeePayFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcFeePayFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (TThostFtdcFeePayFlagType) ((arg1)->FeePayFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1CustFee_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcCustFeeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = (TThostFtdcCustFeeType)jarg2; 
  if (arg1) (arg1)->CustFee = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1CustFee_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcCustFeeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (TThostFtdcCustFeeType) ((arg1)->CustFee);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1BrokerFee_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcFutureFeeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = (TThostFtdcFutureFeeType)jarg2; 
  if (arg1) (arg1)->BrokerFee = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1BrokerFee_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcFutureFeeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (TThostFtdcFutureFeeType) ((arg1)->BrokerFee);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1Message_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Message, (const char *)arg2, 129-1);
      arg1->Message[129-1] = 0;
    } else {
      arg1->Message[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1Message_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (char *) ((arg1)->Message);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1Digest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Digest, (const char *)arg2, 36-1);
      arg1->Digest[36-1] = 0;
    } else {
      arg1->Digest[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1Digest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (char *) ((arg1)->Digest);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1BankAccType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcBankAccTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = (TThostFtdcBankAccTypeType)jarg2; 
  if (arg1) (arg1)->BankAccType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1BankAccType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcBankAccTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (TThostFtdcBankAccTypeType) ((arg1)->BankAccType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1DeviceID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->DeviceID, (const char *)arg2, 3-1);
      arg1->DeviceID[3-1] = 0;
    } else {
      arg1->DeviceID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1DeviceID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (char *) ((arg1)->DeviceID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1BankSecuAccType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcBankAccTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = (TThostFtdcBankAccTypeType)jarg2; 
  if (arg1) (arg1)->BankSecuAccType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1BankSecuAccType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcBankAccTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (TThostFtdcBankAccTypeType) ((arg1)->BankSecuAccType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1BrokerIDByBank_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerIDByBank, (const char *)arg2, 33-1);
      arg1->BrokerIDByBank[33-1] = 0;
    } else {
      arg1->BrokerIDByBank[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1BrokerIDByBank_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (char *) ((arg1)->BrokerIDByBank);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1BankSecuAcc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSecuAcc, (const char *)arg2, 41-1);
      arg1->BankSecuAcc[41-1] = 0;
    } else {
      arg1->BankSecuAcc[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1BankSecuAcc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (char *) ((arg1)->BankSecuAcc);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1BankPwdFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcPwdFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = (TThostFtdcPwdFlagType)jarg2; 
  if (arg1) (arg1)->BankPwdFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1BankPwdFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcPwdFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (TThostFtdcPwdFlagType) ((arg1)->BankPwdFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1SecuPwdFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcPwdFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = (TThostFtdcPwdFlagType)jarg2; 
  if (arg1) (arg1)->SecuPwdFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1SecuPwdFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcPwdFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (TThostFtdcPwdFlagType) ((arg1)->SecuPwdFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1OperNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OperNo, (const char *)arg2, 17-1);
      arg1->OperNo[17-1] = 0;
    } else {
      arg1->OperNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1OperNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (char *) ((arg1)->OperNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1RequestID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcRequestIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = (TThostFtdcRequestIDType)jarg2; 
  if (arg1) (arg1)->RequestID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1RequestID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcRequestIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (TThostFtdcRequestIDType) ((arg1)->RequestID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1TID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcTIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = (TThostFtdcTIDType)jarg2; 
  if (arg1) (arg1)->TID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1TID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcTIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (TThostFtdcTIDType) ((arg1)->TID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1TransferStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcTransferStatusType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  arg2 = (TThostFtdcTransferStatusType)jarg2; 
  if (arg1) (arg1)->TransferStatus = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqTransferField_1TransferStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  TThostFtdcTransferStatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  result = (TThostFtdcTransferStatusType) ((arg1)->TransferStatus);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcReqTransferField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcReqTransferField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcReqTransferField *)new CThostFtdcReqTransferField();
  *(CThostFtdcReqTransferField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcReqTransferField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcReqTransferField *arg1 = (CThostFtdcReqTransferField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcReqTransferField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1TradeCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeCode, (const char *)arg2, 7-1);
      arg1->TradeCode[7-1] = 0;
    } else {
      arg1->TradeCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1TradeCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (char *) ((arg1)->TradeCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1BankBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBranchID, (const char *)arg2, 5-1);
      arg1->BankBranchID[5-1] = 0;
    } else {
      arg1->BankBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1BankBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (char *) ((arg1)->BankBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1BrokerBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerBranchID, (const char *)arg2, 31-1);
      arg1->BrokerBranchID[31-1] = 0;
    } else {
      arg1->BrokerBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1BrokerBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (char *) ((arg1)->BrokerBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1TradeDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeDate, (const char *)arg2, 9-1);
      arg1->TradeDate[9-1] = 0;
    } else {
      arg1->TradeDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1TradeDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (char *) ((arg1)->TradeDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1TradeTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeTime, (const char *)arg2, 9-1);
      arg1->TradeTime[9-1] = 0;
    } else {
      arg1->TradeTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1TradeTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (char *) ((arg1)->TradeTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1BankSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSerial, (const char *)arg2, 13-1);
      arg1->BankSerial[13-1] = 0;
    } else {
      arg1->BankSerial[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1BankSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (char *) ((arg1)->BankSerial);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1PlateSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = (TThostFtdcSerialType)jarg2; 
  if (arg1) (arg1)->PlateSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1PlateSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (TThostFtdcSerialType) ((arg1)->PlateSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1LastFragment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcLastFragmentType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = (TThostFtdcLastFragmentType)jarg2; 
  if (arg1) (arg1)->LastFragment = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1LastFragment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcLastFragmentType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (TThostFtdcLastFragmentType) ((arg1)->LastFragment);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1CustomerName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CustomerName, (const char *)arg2, 51-1);
      arg1->CustomerName[51-1] = 0;
    } else {
      arg1->CustomerName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1CustomerName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (char *) ((arg1)->CustomerName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1IdCardType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcIdCardTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = (TThostFtdcIdCardTypeType)jarg2; 
  if (arg1) (arg1)->IdCardType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1IdCardType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcIdCardTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (TThostFtdcIdCardTypeType) ((arg1)->IdCardType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1IdentifiedCardNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->IdentifiedCardNo, (const char *)arg2, 51-1);
      arg1->IdentifiedCardNo[51-1] = 0;
    } else {
      arg1->IdentifiedCardNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1IdentifiedCardNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (char *) ((arg1)->IdentifiedCardNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1CustType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcCustTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = (TThostFtdcCustTypeType)jarg2; 
  if (arg1) (arg1)->CustType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1CustType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcCustTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (TThostFtdcCustTypeType) ((arg1)->CustType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1BankAccount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankAccount, (const char *)arg2, 41-1);
      arg1->BankAccount[41-1] = 0;
    } else {
      arg1->BankAccount[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1BankAccount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (char *) ((arg1)->BankAccount);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1BankPassWord_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankPassWord, (const char *)arg2, 41-1);
      arg1->BankPassWord[41-1] = 0;
    } else {
      arg1->BankPassWord[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1BankPassWord_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (char *) ((arg1)->BankPassWord);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1AccountID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 13-1);
      arg1->AccountID[13-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1AccountID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (char *) ((arg1)->AccountID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1Password_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Password, (const char *)arg2, 41-1);
      arg1->Password[41-1] = 0;
    } else {
      arg1->Password[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1Password_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (char *) ((arg1)->Password);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1InstallID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcInstallIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = (TThostFtdcInstallIDType)jarg2; 
  if (arg1) (arg1)->InstallID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1InstallID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcInstallIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (TThostFtdcInstallIDType) ((arg1)->InstallID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1FutureSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcFutureSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = (TThostFtdcFutureSerialType)jarg2; 
  if (arg1) (arg1)->FutureSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1FutureSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcFutureSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (TThostFtdcFutureSerialType) ((arg1)->FutureSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1VerifyCertNoFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcYesNoIndicatorType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = (TThostFtdcYesNoIndicatorType)jarg2; 
  if (arg1) (arg1)->VerifyCertNoFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1VerifyCertNoFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcYesNoIndicatorType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (TThostFtdcYesNoIndicatorType) ((arg1)->VerifyCertNoFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1CurrencyID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrencyID, (const char *)arg2, 4-1);
      arg1->CurrencyID[4-1] = 0;
    } else {
      arg1->CurrencyID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1CurrencyID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (char *) ((arg1)->CurrencyID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1TradeAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcTradeAmountType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = (TThostFtdcTradeAmountType)jarg2; 
  if (arg1) (arg1)->TradeAmount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1TradeAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcTradeAmountType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (TThostFtdcTradeAmountType) ((arg1)->TradeAmount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1FutureFetchAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcTradeAmountType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = (TThostFtdcTradeAmountType)jarg2; 
  if (arg1) (arg1)->FutureFetchAmount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1FutureFetchAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcTradeAmountType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (TThostFtdcTradeAmountType) ((arg1)->FutureFetchAmount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1FeePayFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcFeePayFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = (TThostFtdcFeePayFlagType)jarg2; 
  if (arg1) (arg1)->FeePayFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1FeePayFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcFeePayFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (TThostFtdcFeePayFlagType) ((arg1)->FeePayFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1CustFee_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcCustFeeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = (TThostFtdcCustFeeType)jarg2; 
  if (arg1) (arg1)->CustFee = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1CustFee_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcCustFeeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (TThostFtdcCustFeeType) ((arg1)->CustFee);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1BrokerFee_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcFutureFeeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = (TThostFtdcFutureFeeType)jarg2; 
  if (arg1) (arg1)->BrokerFee = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1BrokerFee_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcFutureFeeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (TThostFtdcFutureFeeType) ((arg1)->BrokerFee);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1Message_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Message, (const char *)arg2, 129-1);
      arg1->Message[129-1] = 0;
    } else {
      arg1->Message[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1Message_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (char *) ((arg1)->Message);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1Digest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Digest, (const char *)arg2, 36-1);
      arg1->Digest[36-1] = 0;
    } else {
      arg1->Digest[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1Digest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (char *) ((arg1)->Digest);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1BankAccType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcBankAccTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = (TThostFtdcBankAccTypeType)jarg2; 
  if (arg1) (arg1)->BankAccType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1BankAccType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcBankAccTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (TThostFtdcBankAccTypeType) ((arg1)->BankAccType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1DeviceID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->DeviceID, (const char *)arg2, 3-1);
      arg1->DeviceID[3-1] = 0;
    } else {
      arg1->DeviceID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1DeviceID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (char *) ((arg1)->DeviceID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1BankSecuAccType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcBankAccTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = (TThostFtdcBankAccTypeType)jarg2; 
  if (arg1) (arg1)->BankSecuAccType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1BankSecuAccType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcBankAccTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (TThostFtdcBankAccTypeType) ((arg1)->BankSecuAccType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1BrokerIDByBank_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerIDByBank, (const char *)arg2, 33-1);
      arg1->BrokerIDByBank[33-1] = 0;
    } else {
      arg1->BrokerIDByBank[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1BrokerIDByBank_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (char *) ((arg1)->BrokerIDByBank);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1BankSecuAcc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSecuAcc, (const char *)arg2, 41-1);
      arg1->BankSecuAcc[41-1] = 0;
    } else {
      arg1->BankSecuAcc[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1BankSecuAcc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (char *) ((arg1)->BankSecuAcc);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1BankPwdFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcPwdFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = (TThostFtdcPwdFlagType)jarg2; 
  if (arg1) (arg1)->BankPwdFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1BankPwdFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcPwdFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (TThostFtdcPwdFlagType) ((arg1)->BankPwdFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1SecuPwdFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcPwdFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = (TThostFtdcPwdFlagType)jarg2; 
  if (arg1) (arg1)->SecuPwdFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1SecuPwdFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcPwdFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (TThostFtdcPwdFlagType) ((arg1)->SecuPwdFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1OperNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OperNo, (const char *)arg2, 17-1);
      arg1->OperNo[17-1] = 0;
    } else {
      arg1->OperNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1OperNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (char *) ((arg1)->OperNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1RequestID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcRequestIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = (TThostFtdcRequestIDType)jarg2; 
  if (arg1) (arg1)->RequestID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1RequestID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcRequestIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (TThostFtdcRequestIDType) ((arg1)->RequestID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1TID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcTIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = (TThostFtdcTIDType)jarg2; 
  if (arg1) (arg1)->TID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1TID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcTIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (TThostFtdcTIDType) ((arg1)->TID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1TransferStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcTransferStatusType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = (TThostFtdcTransferStatusType)jarg2; 
  if (arg1) (arg1)->TransferStatus = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1TransferStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcTransferStatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (TThostFtdcTransferStatusType) ((arg1)->TransferStatus);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1ErrorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcErrorIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = (TThostFtdcErrorIDType)jarg2; 
  if (arg1) (arg1)->ErrorID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1ErrorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  TThostFtdcErrorIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (TThostFtdcErrorIDType) ((arg1)->ErrorID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1ErrorMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ErrorMsg, (const char *)arg2, 81-1);
      arg1->ErrorMsg[81-1] = 0;
    } else {
      arg1->ErrorMsg[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspTransferField_1ErrorMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  result = (char *) ((arg1)->ErrorMsg);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcRspTransferField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcRspTransferField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcRspTransferField *)new CThostFtdcRspTransferField();
  *(CThostFtdcRspTransferField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcRspTransferField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcRspTransferField *arg1 = (CThostFtdcRspTransferField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcRspTransferField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1RepealTimeInterval_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcRepealTimeIntervalType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = (TThostFtdcRepealTimeIntervalType)jarg2; 
  if (arg1) (arg1)->RepealTimeInterval = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1RepealTimeInterval_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcRepealTimeIntervalType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (TThostFtdcRepealTimeIntervalType) ((arg1)->RepealTimeInterval);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1RepealedTimes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcRepealedTimesType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = (TThostFtdcRepealedTimesType)jarg2; 
  if (arg1) (arg1)->RepealedTimes = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1RepealedTimes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcRepealedTimesType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (TThostFtdcRepealedTimesType) ((arg1)->RepealedTimes);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1BankRepealFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcBankRepealFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = (TThostFtdcBankRepealFlagType)jarg2; 
  if (arg1) (arg1)->BankRepealFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1BankRepealFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcBankRepealFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (TThostFtdcBankRepealFlagType) ((arg1)->BankRepealFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1BrokerRepealFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcBrokerRepealFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = (TThostFtdcBrokerRepealFlagType)jarg2; 
  if (arg1) (arg1)->BrokerRepealFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1BrokerRepealFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcBrokerRepealFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (TThostFtdcBrokerRepealFlagType) ((arg1)->BrokerRepealFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1PlateRepealSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcPlateSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = (TThostFtdcPlateSerialType)jarg2; 
  if (arg1) (arg1)->PlateRepealSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1PlateRepealSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcPlateSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (TThostFtdcPlateSerialType) ((arg1)->PlateRepealSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1BankRepealSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankRepealSerial, (const char *)arg2, 13-1);
      arg1->BankRepealSerial[13-1] = 0;
    } else {
      arg1->BankRepealSerial[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1BankRepealSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (char *) ((arg1)->BankRepealSerial);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1FutureRepealSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcFutureSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = (TThostFtdcFutureSerialType)jarg2; 
  if (arg1) (arg1)->FutureRepealSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1FutureRepealSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcFutureSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (TThostFtdcFutureSerialType) ((arg1)->FutureRepealSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1TradeCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeCode, (const char *)arg2, 7-1);
      arg1->TradeCode[7-1] = 0;
    } else {
      arg1->TradeCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1TradeCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (char *) ((arg1)->TradeCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1BankBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBranchID, (const char *)arg2, 5-1);
      arg1->BankBranchID[5-1] = 0;
    } else {
      arg1->BankBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1BankBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (char *) ((arg1)->BankBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1BrokerBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerBranchID, (const char *)arg2, 31-1);
      arg1->BrokerBranchID[31-1] = 0;
    } else {
      arg1->BrokerBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1BrokerBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (char *) ((arg1)->BrokerBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1TradeDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeDate, (const char *)arg2, 9-1);
      arg1->TradeDate[9-1] = 0;
    } else {
      arg1->TradeDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1TradeDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (char *) ((arg1)->TradeDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1TradeTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeTime, (const char *)arg2, 9-1);
      arg1->TradeTime[9-1] = 0;
    } else {
      arg1->TradeTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1TradeTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (char *) ((arg1)->TradeTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1BankSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSerial, (const char *)arg2, 13-1);
      arg1->BankSerial[13-1] = 0;
    } else {
      arg1->BankSerial[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1BankSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (char *) ((arg1)->BankSerial);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1PlateSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = (TThostFtdcSerialType)jarg2; 
  if (arg1) (arg1)->PlateSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1PlateSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (TThostFtdcSerialType) ((arg1)->PlateSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1LastFragment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcLastFragmentType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = (TThostFtdcLastFragmentType)jarg2; 
  if (arg1) (arg1)->LastFragment = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1LastFragment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcLastFragmentType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (TThostFtdcLastFragmentType) ((arg1)->LastFragment);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1CustomerName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CustomerName, (const char *)arg2, 51-1);
      arg1->CustomerName[51-1] = 0;
    } else {
      arg1->CustomerName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1CustomerName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (char *) ((arg1)->CustomerName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1IdCardType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcIdCardTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = (TThostFtdcIdCardTypeType)jarg2; 
  if (arg1) (arg1)->IdCardType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1IdCardType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcIdCardTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (TThostFtdcIdCardTypeType) ((arg1)->IdCardType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1IdentifiedCardNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->IdentifiedCardNo, (const char *)arg2, 51-1);
      arg1->IdentifiedCardNo[51-1] = 0;
    } else {
      arg1->IdentifiedCardNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1IdentifiedCardNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (char *) ((arg1)->IdentifiedCardNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1CustType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcCustTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = (TThostFtdcCustTypeType)jarg2; 
  if (arg1) (arg1)->CustType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1CustType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcCustTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (TThostFtdcCustTypeType) ((arg1)->CustType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1BankAccount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankAccount, (const char *)arg2, 41-1);
      arg1->BankAccount[41-1] = 0;
    } else {
      arg1->BankAccount[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1BankAccount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (char *) ((arg1)->BankAccount);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1BankPassWord_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankPassWord, (const char *)arg2, 41-1);
      arg1->BankPassWord[41-1] = 0;
    } else {
      arg1->BankPassWord[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1BankPassWord_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (char *) ((arg1)->BankPassWord);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1AccountID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 13-1);
      arg1->AccountID[13-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1AccountID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (char *) ((arg1)->AccountID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1Password_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Password, (const char *)arg2, 41-1);
      arg1->Password[41-1] = 0;
    } else {
      arg1->Password[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1Password_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (char *) ((arg1)->Password);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1InstallID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcInstallIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = (TThostFtdcInstallIDType)jarg2; 
  if (arg1) (arg1)->InstallID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1InstallID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcInstallIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (TThostFtdcInstallIDType) ((arg1)->InstallID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1FutureSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcFutureSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = (TThostFtdcFutureSerialType)jarg2; 
  if (arg1) (arg1)->FutureSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1FutureSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcFutureSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (TThostFtdcFutureSerialType) ((arg1)->FutureSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1VerifyCertNoFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcYesNoIndicatorType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = (TThostFtdcYesNoIndicatorType)jarg2; 
  if (arg1) (arg1)->VerifyCertNoFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1VerifyCertNoFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcYesNoIndicatorType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (TThostFtdcYesNoIndicatorType) ((arg1)->VerifyCertNoFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1CurrencyID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrencyID, (const char *)arg2, 4-1);
      arg1->CurrencyID[4-1] = 0;
    } else {
      arg1->CurrencyID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1CurrencyID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (char *) ((arg1)->CurrencyID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1TradeAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcTradeAmountType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = (TThostFtdcTradeAmountType)jarg2; 
  if (arg1) (arg1)->TradeAmount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1TradeAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcTradeAmountType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (TThostFtdcTradeAmountType) ((arg1)->TradeAmount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1FutureFetchAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcTradeAmountType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = (TThostFtdcTradeAmountType)jarg2; 
  if (arg1) (arg1)->FutureFetchAmount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1FutureFetchAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcTradeAmountType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (TThostFtdcTradeAmountType) ((arg1)->FutureFetchAmount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1FeePayFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcFeePayFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = (TThostFtdcFeePayFlagType)jarg2; 
  if (arg1) (arg1)->FeePayFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1FeePayFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcFeePayFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (TThostFtdcFeePayFlagType) ((arg1)->FeePayFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1CustFee_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcCustFeeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = (TThostFtdcCustFeeType)jarg2; 
  if (arg1) (arg1)->CustFee = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1CustFee_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcCustFeeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (TThostFtdcCustFeeType) ((arg1)->CustFee);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1BrokerFee_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcFutureFeeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = (TThostFtdcFutureFeeType)jarg2; 
  if (arg1) (arg1)->BrokerFee = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1BrokerFee_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcFutureFeeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (TThostFtdcFutureFeeType) ((arg1)->BrokerFee);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1Message_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Message, (const char *)arg2, 129-1);
      arg1->Message[129-1] = 0;
    } else {
      arg1->Message[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1Message_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (char *) ((arg1)->Message);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1Digest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Digest, (const char *)arg2, 36-1);
      arg1->Digest[36-1] = 0;
    } else {
      arg1->Digest[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1Digest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (char *) ((arg1)->Digest);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1BankAccType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcBankAccTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = (TThostFtdcBankAccTypeType)jarg2; 
  if (arg1) (arg1)->BankAccType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1BankAccType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcBankAccTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (TThostFtdcBankAccTypeType) ((arg1)->BankAccType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1DeviceID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->DeviceID, (const char *)arg2, 3-1);
      arg1->DeviceID[3-1] = 0;
    } else {
      arg1->DeviceID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1DeviceID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (char *) ((arg1)->DeviceID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1BankSecuAccType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcBankAccTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = (TThostFtdcBankAccTypeType)jarg2; 
  if (arg1) (arg1)->BankSecuAccType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1BankSecuAccType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcBankAccTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (TThostFtdcBankAccTypeType) ((arg1)->BankSecuAccType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1BrokerIDByBank_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerIDByBank, (const char *)arg2, 33-1);
      arg1->BrokerIDByBank[33-1] = 0;
    } else {
      arg1->BrokerIDByBank[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1BrokerIDByBank_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (char *) ((arg1)->BrokerIDByBank);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1BankSecuAcc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSecuAcc, (const char *)arg2, 41-1);
      arg1->BankSecuAcc[41-1] = 0;
    } else {
      arg1->BankSecuAcc[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1BankSecuAcc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (char *) ((arg1)->BankSecuAcc);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1BankPwdFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcPwdFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = (TThostFtdcPwdFlagType)jarg2; 
  if (arg1) (arg1)->BankPwdFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1BankPwdFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcPwdFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (TThostFtdcPwdFlagType) ((arg1)->BankPwdFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1SecuPwdFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcPwdFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = (TThostFtdcPwdFlagType)jarg2; 
  if (arg1) (arg1)->SecuPwdFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1SecuPwdFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcPwdFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (TThostFtdcPwdFlagType) ((arg1)->SecuPwdFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1OperNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OperNo, (const char *)arg2, 17-1);
      arg1->OperNo[17-1] = 0;
    } else {
      arg1->OperNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1OperNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (char *) ((arg1)->OperNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1RequestID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcRequestIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = (TThostFtdcRequestIDType)jarg2; 
  if (arg1) (arg1)->RequestID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1RequestID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcRequestIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (TThostFtdcRequestIDType) ((arg1)->RequestID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1TID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcTIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = (TThostFtdcTIDType)jarg2; 
  if (arg1) (arg1)->TID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1TID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcTIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (TThostFtdcTIDType) ((arg1)->TID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1TransferStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcTransferStatusType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  arg2 = (TThostFtdcTransferStatusType)jarg2; 
  if (arg1) (arg1)->TransferStatus = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqRepealField_1TransferStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  TThostFtdcTransferStatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  result = (TThostFtdcTransferStatusType) ((arg1)->TransferStatus);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcReqRepealField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcReqRepealField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcReqRepealField *)new CThostFtdcReqRepealField();
  *(CThostFtdcReqRepealField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcReqRepealField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcReqRepealField *arg1 = (CThostFtdcReqRepealField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcReqRepealField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1RepealTimeInterval_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcRepealTimeIntervalType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = (TThostFtdcRepealTimeIntervalType)jarg2; 
  if (arg1) (arg1)->RepealTimeInterval = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1RepealTimeInterval_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcRepealTimeIntervalType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (TThostFtdcRepealTimeIntervalType) ((arg1)->RepealTimeInterval);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1RepealedTimes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcRepealedTimesType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = (TThostFtdcRepealedTimesType)jarg2; 
  if (arg1) (arg1)->RepealedTimes = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1RepealedTimes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcRepealedTimesType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (TThostFtdcRepealedTimesType) ((arg1)->RepealedTimes);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1BankRepealFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcBankRepealFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = (TThostFtdcBankRepealFlagType)jarg2; 
  if (arg1) (arg1)->BankRepealFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1BankRepealFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcBankRepealFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (TThostFtdcBankRepealFlagType) ((arg1)->BankRepealFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1BrokerRepealFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcBrokerRepealFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = (TThostFtdcBrokerRepealFlagType)jarg2; 
  if (arg1) (arg1)->BrokerRepealFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1BrokerRepealFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcBrokerRepealFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (TThostFtdcBrokerRepealFlagType) ((arg1)->BrokerRepealFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1PlateRepealSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcPlateSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = (TThostFtdcPlateSerialType)jarg2; 
  if (arg1) (arg1)->PlateRepealSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1PlateRepealSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcPlateSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (TThostFtdcPlateSerialType) ((arg1)->PlateRepealSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1BankRepealSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankRepealSerial, (const char *)arg2, 13-1);
      arg1->BankRepealSerial[13-1] = 0;
    } else {
      arg1->BankRepealSerial[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1BankRepealSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (char *) ((arg1)->BankRepealSerial);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1FutureRepealSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcFutureSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = (TThostFtdcFutureSerialType)jarg2; 
  if (arg1) (arg1)->FutureRepealSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1FutureRepealSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcFutureSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (TThostFtdcFutureSerialType) ((arg1)->FutureRepealSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1TradeCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeCode, (const char *)arg2, 7-1);
      arg1->TradeCode[7-1] = 0;
    } else {
      arg1->TradeCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1TradeCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (char *) ((arg1)->TradeCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1BankBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBranchID, (const char *)arg2, 5-1);
      arg1->BankBranchID[5-1] = 0;
    } else {
      arg1->BankBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1BankBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (char *) ((arg1)->BankBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1BrokerBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerBranchID, (const char *)arg2, 31-1);
      arg1->BrokerBranchID[31-1] = 0;
    } else {
      arg1->BrokerBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1BrokerBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (char *) ((arg1)->BrokerBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1TradeDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeDate, (const char *)arg2, 9-1);
      arg1->TradeDate[9-1] = 0;
    } else {
      arg1->TradeDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1TradeDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (char *) ((arg1)->TradeDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1TradeTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeTime, (const char *)arg2, 9-1);
      arg1->TradeTime[9-1] = 0;
    } else {
      arg1->TradeTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1TradeTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (char *) ((arg1)->TradeTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1BankSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSerial, (const char *)arg2, 13-1);
      arg1->BankSerial[13-1] = 0;
    } else {
      arg1->BankSerial[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1BankSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (char *) ((arg1)->BankSerial);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1PlateSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = (TThostFtdcSerialType)jarg2; 
  if (arg1) (arg1)->PlateSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1PlateSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (TThostFtdcSerialType) ((arg1)->PlateSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1LastFragment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcLastFragmentType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = (TThostFtdcLastFragmentType)jarg2; 
  if (arg1) (arg1)->LastFragment = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1LastFragment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcLastFragmentType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (TThostFtdcLastFragmentType) ((arg1)->LastFragment);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1CustomerName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CustomerName, (const char *)arg2, 51-1);
      arg1->CustomerName[51-1] = 0;
    } else {
      arg1->CustomerName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1CustomerName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (char *) ((arg1)->CustomerName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1IdCardType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcIdCardTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = (TThostFtdcIdCardTypeType)jarg2; 
  if (arg1) (arg1)->IdCardType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1IdCardType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcIdCardTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (TThostFtdcIdCardTypeType) ((arg1)->IdCardType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1IdentifiedCardNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->IdentifiedCardNo, (const char *)arg2, 51-1);
      arg1->IdentifiedCardNo[51-1] = 0;
    } else {
      arg1->IdentifiedCardNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1IdentifiedCardNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (char *) ((arg1)->IdentifiedCardNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1CustType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcCustTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = (TThostFtdcCustTypeType)jarg2; 
  if (arg1) (arg1)->CustType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1CustType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcCustTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (TThostFtdcCustTypeType) ((arg1)->CustType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1BankAccount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankAccount, (const char *)arg2, 41-1);
      arg1->BankAccount[41-1] = 0;
    } else {
      arg1->BankAccount[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1BankAccount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (char *) ((arg1)->BankAccount);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1BankPassWord_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankPassWord, (const char *)arg2, 41-1);
      arg1->BankPassWord[41-1] = 0;
    } else {
      arg1->BankPassWord[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1BankPassWord_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (char *) ((arg1)->BankPassWord);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1AccountID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 13-1);
      arg1->AccountID[13-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1AccountID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (char *) ((arg1)->AccountID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1Password_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Password, (const char *)arg2, 41-1);
      arg1->Password[41-1] = 0;
    } else {
      arg1->Password[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1Password_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (char *) ((arg1)->Password);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1InstallID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcInstallIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = (TThostFtdcInstallIDType)jarg2; 
  if (arg1) (arg1)->InstallID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1InstallID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcInstallIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (TThostFtdcInstallIDType) ((arg1)->InstallID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1FutureSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcFutureSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = (TThostFtdcFutureSerialType)jarg2; 
  if (arg1) (arg1)->FutureSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1FutureSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcFutureSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (TThostFtdcFutureSerialType) ((arg1)->FutureSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1VerifyCertNoFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcYesNoIndicatorType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = (TThostFtdcYesNoIndicatorType)jarg2; 
  if (arg1) (arg1)->VerifyCertNoFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1VerifyCertNoFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcYesNoIndicatorType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (TThostFtdcYesNoIndicatorType) ((arg1)->VerifyCertNoFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1CurrencyID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrencyID, (const char *)arg2, 4-1);
      arg1->CurrencyID[4-1] = 0;
    } else {
      arg1->CurrencyID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1CurrencyID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (char *) ((arg1)->CurrencyID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1TradeAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcTradeAmountType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = (TThostFtdcTradeAmountType)jarg2; 
  if (arg1) (arg1)->TradeAmount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1TradeAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcTradeAmountType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (TThostFtdcTradeAmountType) ((arg1)->TradeAmount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1FutureFetchAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcTradeAmountType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = (TThostFtdcTradeAmountType)jarg2; 
  if (arg1) (arg1)->FutureFetchAmount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1FutureFetchAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcTradeAmountType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (TThostFtdcTradeAmountType) ((arg1)->FutureFetchAmount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1FeePayFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcFeePayFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = (TThostFtdcFeePayFlagType)jarg2; 
  if (arg1) (arg1)->FeePayFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1FeePayFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcFeePayFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (TThostFtdcFeePayFlagType) ((arg1)->FeePayFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1CustFee_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcCustFeeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = (TThostFtdcCustFeeType)jarg2; 
  if (arg1) (arg1)->CustFee = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1CustFee_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcCustFeeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (TThostFtdcCustFeeType) ((arg1)->CustFee);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1BrokerFee_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcFutureFeeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = (TThostFtdcFutureFeeType)jarg2; 
  if (arg1) (arg1)->BrokerFee = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1BrokerFee_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcFutureFeeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (TThostFtdcFutureFeeType) ((arg1)->BrokerFee);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1Message_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Message, (const char *)arg2, 129-1);
      arg1->Message[129-1] = 0;
    } else {
      arg1->Message[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1Message_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (char *) ((arg1)->Message);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1Digest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Digest, (const char *)arg2, 36-1);
      arg1->Digest[36-1] = 0;
    } else {
      arg1->Digest[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1Digest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (char *) ((arg1)->Digest);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1BankAccType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcBankAccTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = (TThostFtdcBankAccTypeType)jarg2; 
  if (arg1) (arg1)->BankAccType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1BankAccType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcBankAccTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (TThostFtdcBankAccTypeType) ((arg1)->BankAccType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1DeviceID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->DeviceID, (const char *)arg2, 3-1);
      arg1->DeviceID[3-1] = 0;
    } else {
      arg1->DeviceID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1DeviceID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (char *) ((arg1)->DeviceID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1BankSecuAccType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcBankAccTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = (TThostFtdcBankAccTypeType)jarg2; 
  if (arg1) (arg1)->BankSecuAccType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1BankSecuAccType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcBankAccTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (TThostFtdcBankAccTypeType) ((arg1)->BankSecuAccType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1BrokerIDByBank_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerIDByBank, (const char *)arg2, 33-1);
      arg1->BrokerIDByBank[33-1] = 0;
    } else {
      arg1->BrokerIDByBank[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1BrokerIDByBank_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (char *) ((arg1)->BrokerIDByBank);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1BankSecuAcc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSecuAcc, (const char *)arg2, 41-1);
      arg1->BankSecuAcc[41-1] = 0;
    } else {
      arg1->BankSecuAcc[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1BankSecuAcc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (char *) ((arg1)->BankSecuAcc);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1BankPwdFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcPwdFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = (TThostFtdcPwdFlagType)jarg2; 
  if (arg1) (arg1)->BankPwdFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1BankPwdFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcPwdFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (TThostFtdcPwdFlagType) ((arg1)->BankPwdFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1SecuPwdFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcPwdFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = (TThostFtdcPwdFlagType)jarg2; 
  if (arg1) (arg1)->SecuPwdFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1SecuPwdFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcPwdFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (TThostFtdcPwdFlagType) ((arg1)->SecuPwdFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1OperNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OperNo, (const char *)arg2, 17-1);
      arg1->OperNo[17-1] = 0;
    } else {
      arg1->OperNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1OperNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (char *) ((arg1)->OperNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1RequestID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcRequestIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = (TThostFtdcRequestIDType)jarg2; 
  if (arg1) (arg1)->RequestID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1RequestID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcRequestIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (TThostFtdcRequestIDType) ((arg1)->RequestID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1TID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcTIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = (TThostFtdcTIDType)jarg2; 
  if (arg1) (arg1)->TID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1TID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcTIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (TThostFtdcTIDType) ((arg1)->TID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1TransferStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcTransferStatusType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = (TThostFtdcTransferStatusType)jarg2; 
  if (arg1) (arg1)->TransferStatus = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1TransferStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcTransferStatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (TThostFtdcTransferStatusType) ((arg1)->TransferStatus);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1ErrorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcErrorIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = (TThostFtdcErrorIDType)jarg2; 
  if (arg1) (arg1)->ErrorID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1ErrorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  TThostFtdcErrorIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (TThostFtdcErrorIDType) ((arg1)->ErrorID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1ErrorMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ErrorMsg, (const char *)arg2, 81-1);
      arg1->ErrorMsg[81-1] = 0;
    } else {
      arg1->ErrorMsg[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspRepealField_1ErrorMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  result = (char *) ((arg1)->ErrorMsg);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcRspRepealField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcRspRepealField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcRspRepealField *)new CThostFtdcRspRepealField();
  *(CThostFtdcRspRepealField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcRspRepealField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcRspRepealField *arg1 = (CThostFtdcRspRepealField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcRspRepealField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1TradeCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeCode, (const char *)arg2, 7-1);
      arg1->TradeCode[7-1] = 0;
    } else {
      arg1->TradeCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1TradeCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradeCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1BankBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBranchID, (const char *)arg2, 5-1);
      arg1->BankBranchID[5-1] = 0;
    } else {
      arg1->BankBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1BankBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1BrokerBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerBranchID, (const char *)arg2, 31-1);
      arg1->BrokerBranchID[31-1] = 0;
    } else {
      arg1->BrokerBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1BrokerBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->BrokerBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1TradeDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeDate, (const char *)arg2, 9-1);
      arg1->TradeDate[9-1] = 0;
    } else {
      arg1->TradeDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1TradeDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradeDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1TradeTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeTime, (const char *)arg2, 9-1);
      arg1->TradeTime[9-1] = 0;
    } else {
      arg1->TradeTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1TradeTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradeTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1BankSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSerial, (const char *)arg2, 13-1);
      arg1->BankSerial[13-1] = 0;
    } else {
      arg1->BankSerial[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1BankSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankSerial);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1PlateSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  TThostFtdcSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcSerialType)jarg2; 
  if (arg1) (arg1)->PlateSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1PlateSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  TThostFtdcSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (TThostFtdcSerialType) ((arg1)->PlateSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1LastFragment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  TThostFtdcLastFragmentType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcLastFragmentType)jarg2; 
  if (arg1) (arg1)->LastFragment = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1LastFragment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  TThostFtdcLastFragmentType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (TThostFtdcLastFragmentType) ((arg1)->LastFragment);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1CustomerName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CustomerName, (const char *)arg2, 51-1);
      arg1->CustomerName[51-1] = 0;
    } else {
      arg1->CustomerName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1CustomerName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->CustomerName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1IdCardType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  TThostFtdcIdCardTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcIdCardTypeType)jarg2; 
  if (arg1) (arg1)->IdCardType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1IdCardType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  TThostFtdcIdCardTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (TThostFtdcIdCardTypeType) ((arg1)->IdCardType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1IdentifiedCardNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->IdentifiedCardNo, (const char *)arg2, 51-1);
      arg1->IdentifiedCardNo[51-1] = 0;
    } else {
      arg1->IdentifiedCardNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1IdentifiedCardNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->IdentifiedCardNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1CustType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  TThostFtdcCustTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcCustTypeType)jarg2; 
  if (arg1) (arg1)->CustType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1CustType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  TThostFtdcCustTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (TThostFtdcCustTypeType) ((arg1)->CustType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1BankAccount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankAccount, (const char *)arg2, 41-1);
      arg1->BankAccount[41-1] = 0;
    } else {
      arg1->BankAccount[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1BankAccount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankAccount);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1BankPassWord_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankPassWord, (const char *)arg2, 41-1);
      arg1->BankPassWord[41-1] = 0;
    } else {
      arg1->BankPassWord[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1BankPassWord_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankPassWord);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1AccountID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 13-1);
      arg1->AccountID[13-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1AccountID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->AccountID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1Password_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Password, (const char *)arg2, 41-1);
      arg1->Password[41-1] = 0;
    } else {
      arg1->Password[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1Password_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->Password);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1FutureSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  TThostFtdcFutureSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcFutureSerialType)jarg2; 
  if (arg1) (arg1)->FutureSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1FutureSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  TThostFtdcFutureSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (TThostFtdcFutureSerialType) ((arg1)->FutureSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1InstallID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  TThostFtdcInstallIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcInstallIDType)jarg2; 
  if (arg1) (arg1)->InstallID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1InstallID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  TThostFtdcInstallIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (TThostFtdcInstallIDType) ((arg1)->InstallID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1VerifyCertNoFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  TThostFtdcYesNoIndicatorType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcYesNoIndicatorType)jarg2; 
  if (arg1) (arg1)->VerifyCertNoFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1VerifyCertNoFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  TThostFtdcYesNoIndicatorType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (TThostFtdcYesNoIndicatorType) ((arg1)->VerifyCertNoFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1CurrencyID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrencyID, (const char *)arg2, 4-1);
      arg1->CurrencyID[4-1] = 0;
    } else {
      arg1->CurrencyID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1CurrencyID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->CurrencyID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1Digest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Digest, (const char *)arg2, 36-1);
      arg1->Digest[36-1] = 0;
    } else {
      arg1->Digest[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1Digest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->Digest);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1BankAccType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  TThostFtdcBankAccTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcBankAccTypeType)jarg2; 
  if (arg1) (arg1)->BankAccType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1BankAccType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  TThostFtdcBankAccTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (TThostFtdcBankAccTypeType) ((arg1)->BankAccType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1DeviceID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->DeviceID, (const char *)arg2, 3-1);
      arg1->DeviceID[3-1] = 0;
    } else {
      arg1->DeviceID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1DeviceID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->DeviceID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1BankSecuAccType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  TThostFtdcBankAccTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcBankAccTypeType)jarg2; 
  if (arg1) (arg1)->BankSecuAccType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1BankSecuAccType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  TThostFtdcBankAccTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (TThostFtdcBankAccTypeType) ((arg1)->BankSecuAccType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1BrokerIDByBank_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerIDByBank, (const char *)arg2, 33-1);
      arg1->BrokerIDByBank[33-1] = 0;
    } else {
      arg1->BrokerIDByBank[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1BrokerIDByBank_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->BrokerIDByBank);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1BankSecuAcc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSecuAcc, (const char *)arg2, 41-1);
      arg1->BankSecuAcc[41-1] = 0;
    } else {
      arg1->BankSecuAcc[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1BankSecuAcc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankSecuAcc);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1BankPwdFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  TThostFtdcPwdFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcPwdFlagType)jarg2; 
  if (arg1) (arg1)->BankPwdFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1BankPwdFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  TThostFtdcPwdFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (TThostFtdcPwdFlagType) ((arg1)->BankPwdFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1SecuPwdFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  TThostFtdcPwdFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcPwdFlagType)jarg2; 
  if (arg1) (arg1)->SecuPwdFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1SecuPwdFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  TThostFtdcPwdFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (TThostFtdcPwdFlagType) ((arg1)->SecuPwdFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1OperNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OperNo, (const char *)arg2, 17-1);
      arg1->OperNo[17-1] = 0;
    } else {
      arg1->OperNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1OperNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->OperNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1RequestID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  TThostFtdcRequestIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcRequestIDType)jarg2; 
  if (arg1) (arg1)->RequestID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1RequestID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  TThostFtdcRequestIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (TThostFtdcRequestIDType) ((arg1)->RequestID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1TID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  TThostFtdcTIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcTIDType)jarg2; 
  if (arg1) (arg1)->TID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryAccountField_1TID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  TThostFtdcTIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  result = (TThostFtdcTIDType) ((arg1)->TID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcReqQueryAccountField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcReqQueryAccountField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcReqQueryAccountField *)new CThostFtdcReqQueryAccountField();
  *(CThostFtdcReqQueryAccountField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcReqQueryAccountField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcReqQueryAccountField *arg1 = (CThostFtdcReqQueryAccountField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcReqQueryAccountField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1TradeCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeCode, (const char *)arg2, 7-1);
      arg1->TradeCode[7-1] = 0;
    } else {
      arg1->TradeCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1TradeCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradeCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1BankBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBranchID, (const char *)arg2, 5-1);
      arg1->BankBranchID[5-1] = 0;
    } else {
      arg1->BankBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1BankBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1BrokerBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerBranchID, (const char *)arg2, 31-1);
      arg1->BrokerBranchID[31-1] = 0;
    } else {
      arg1->BrokerBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1BrokerBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->BrokerBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1TradeDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeDate, (const char *)arg2, 9-1);
      arg1->TradeDate[9-1] = 0;
    } else {
      arg1->TradeDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1TradeDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradeDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1TradeTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeTime, (const char *)arg2, 9-1);
      arg1->TradeTime[9-1] = 0;
    } else {
      arg1->TradeTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1TradeTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradeTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1BankSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSerial, (const char *)arg2, 13-1);
      arg1->BankSerial[13-1] = 0;
    } else {
      arg1->BankSerial[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1BankSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankSerial);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1PlateSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  TThostFtdcSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcSerialType)jarg2; 
  if (arg1) (arg1)->PlateSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1PlateSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  TThostFtdcSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (TThostFtdcSerialType) ((arg1)->PlateSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1LastFragment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  TThostFtdcLastFragmentType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcLastFragmentType)jarg2; 
  if (arg1) (arg1)->LastFragment = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1LastFragment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  TThostFtdcLastFragmentType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (TThostFtdcLastFragmentType) ((arg1)->LastFragment);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1CustomerName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CustomerName, (const char *)arg2, 51-1);
      arg1->CustomerName[51-1] = 0;
    } else {
      arg1->CustomerName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1CustomerName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->CustomerName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1IdCardType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  TThostFtdcIdCardTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcIdCardTypeType)jarg2; 
  if (arg1) (arg1)->IdCardType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1IdCardType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  TThostFtdcIdCardTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (TThostFtdcIdCardTypeType) ((arg1)->IdCardType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1IdentifiedCardNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->IdentifiedCardNo, (const char *)arg2, 51-1);
      arg1->IdentifiedCardNo[51-1] = 0;
    } else {
      arg1->IdentifiedCardNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1IdentifiedCardNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->IdentifiedCardNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1CustType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  TThostFtdcCustTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcCustTypeType)jarg2; 
  if (arg1) (arg1)->CustType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1CustType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  TThostFtdcCustTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (TThostFtdcCustTypeType) ((arg1)->CustType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1BankAccount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankAccount, (const char *)arg2, 41-1);
      arg1->BankAccount[41-1] = 0;
    } else {
      arg1->BankAccount[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1BankAccount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankAccount);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1BankPassWord_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankPassWord, (const char *)arg2, 41-1);
      arg1->BankPassWord[41-1] = 0;
    } else {
      arg1->BankPassWord[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1BankPassWord_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankPassWord);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1AccountID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 13-1);
      arg1->AccountID[13-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1AccountID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->AccountID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1Password_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Password, (const char *)arg2, 41-1);
      arg1->Password[41-1] = 0;
    } else {
      arg1->Password[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1Password_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->Password);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1FutureSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  TThostFtdcFutureSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcFutureSerialType)jarg2; 
  if (arg1) (arg1)->FutureSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1FutureSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  TThostFtdcFutureSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (TThostFtdcFutureSerialType) ((arg1)->FutureSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1InstallID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  TThostFtdcInstallIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcInstallIDType)jarg2; 
  if (arg1) (arg1)->InstallID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1InstallID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  TThostFtdcInstallIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (TThostFtdcInstallIDType) ((arg1)->InstallID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1VerifyCertNoFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  TThostFtdcYesNoIndicatorType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcYesNoIndicatorType)jarg2; 
  if (arg1) (arg1)->VerifyCertNoFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1VerifyCertNoFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  TThostFtdcYesNoIndicatorType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (TThostFtdcYesNoIndicatorType) ((arg1)->VerifyCertNoFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1CurrencyID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrencyID, (const char *)arg2, 4-1);
      arg1->CurrencyID[4-1] = 0;
    } else {
      arg1->CurrencyID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1CurrencyID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->CurrencyID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1Digest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Digest, (const char *)arg2, 36-1);
      arg1->Digest[36-1] = 0;
    } else {
      arg1->Digest[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1Digest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->Digest);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1BankAccType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  TThostFtdcBankAccTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcBankAccTypeType)jarg2; 
  if (arg1) (arg1)->BankAccType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1BankAccType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  TThostFtdcBankAccTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (TThostFtdcBankAccTypeType) ((arg1)->BankAccType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1DeviceID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->DeviceID, (const char *)arg2, 3-1);
      arg1->DeviceID[3-1] = 0;
    } else {
      arg1->DeviceID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1DeviceID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->DeviceID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1BankSecuAccType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  TThostFtdcBankAccTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcBankAccTypeType)jarg2; 
  if (arg1) (arg1)->BankSecuAccType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1BankSecuAccType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  TThostFtdcBankAccTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (TThostFtdcBankAccTypeType) ((arg1)->BankSecuAccType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1BrokerIDByBank_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerIDByBank, (const char *)arg2, 33-1);
      arg1->BrokerIDByBank[33-1] = 0;
    } else {
      arg1->BrokerIDByBank[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1BrokerIDByBank_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->BrokerIDByBank);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1BankSecuAcc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSecuAcc, (const char *)arg2, 41-1);
      arg1->BankSecuAcc[41-1] = 0;
    } else {
      arg1->BankSecuAcc[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1BankSecuAcc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankSecuAcc);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1BankPwdFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  TThostFtdcPwdFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcPwdFlagType)jarg2; 
  if (arg1) (arg1)->BankPwdFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1BankPwdFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  TThostFtdcPwdFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (TThostFtdcPwdFlagType) ((arg1)->BankPwdFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1SecuPwdFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  TThostFtdcPwdFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcPwdFlagType)jarg2; 
  if (arg1) (arg1)->SecuPwdFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1SecuPwdFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  TThostFtdcPwdFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (TThostFtdcPwdFlagType) ((arg1)->SecuPwdFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1OperNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OperNo, (const char *)arg2, 17-1);
      arg1->OperNo[17-1] = 0;
    } else {
      arg1->OperNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1OperNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->OperNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1RequestID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  TThostFtdcRequestIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcRequestIDType)jarg2; 
  if (arg1) (arg1)->RequestID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1RequestID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  TThostFtdcRequestIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (TThostFtdcRequestIDType) ((arg1)->RequestID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1TID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  TThostFtdcTIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcTIDType)jarg2; 
  if (arg1) (arg1)->TID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1TID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  TThostFtdcTIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (TThostFtdcTIDType) ((arg1)->TID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1BankUseAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  TThostFtdcTradeAmountType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcTradeAmountType)jarg2; 
  if (arg1) (arg1)->BankUseAmount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1BankUseAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  TThostFtdcTradeAmountType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (TThostFtdcTradeAmountType) ((arg1)->BankUseAmount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1BankFetchAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  TThostFtdcTradeAmountType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcTradeAmountType)jarg2; 
  if (arg1) (arg1)->BankFetchAmount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryAccountField_1BankFetchAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  TThostFtdcTradeAmountType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  result = (TThostFtdcTradeAmountType) ((arg1)->BankFetchAmount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcRspQueryAccountField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcRspQueryAccountField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcRspQueryAccountField *)new CThostFtdcRspQueryAccountField();
  *(CThostFtdcRspQueryAccountField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcRspQueryAccountField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcRspQueryAccountField *arg1 = (CThostFtdcRspQueryAccountField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcRspQueryAccountField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1TradeCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeCode, (const char *)arg2, 7-1);
      arg1->TradeCode[7-1] = 0;
    } else {
      arg1->TradeCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1TradeCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  result = (char *) ((arg1)->TradeCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1BankBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBranchID, (const char *)arg2, 5-1);
      arg1->BankBranchID[5-1] = 0;
    } else {
      arg1->BankBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1BankBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  result = (char *) ((arg1)->BankBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1BrokerBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerBranchID, (const char *)arg2, 31-1);
      arg1->BrokerBranchID[31-1] = 0;
    } else {
      arg1->BrokerBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1BrokerBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  result = (char *) ((arg1)->BrokerBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1TradeDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeDate, (const char *)arg2, 9-1);
      arg1->TradeDate[9-1] = 0;
    } else {
      arg1->TradeDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1TradeDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  result = (char *) ((arg1)->TradeDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1TradeTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeTime, (const char *)arg2, 9-1);
      arg1->TradeTime[9-1] = 0;
    } else {
      arg1->TradeTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1TradeTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  result = (char *) ((arg1)->TradeTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1BankSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSerial, (const char *)arg2, 13-1);
      arg1->BankSerial[13-1] = 0;
    } else {
      arg1->BankSerial[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1BankSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  result = (char *) ((arg1)->BankSerial);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1PlateSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  TThostFtdcSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  arg2 = (TThostFtdcSerialType)jarg2; 
  if (arg1) (arg1)->PlateSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1PlateSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  TThostFtdcSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  result = (TThostFtdcSerialType) ((arg1)->PlateSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1LastFragment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  TThostFtdcLastFragmentType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  arg2 = (TThostFtdcLastFragmentType)jarg2; 
  if (arg1) (arg1)->LastFragment = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1LastFragment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  TThostFtdcLastFragmentType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  result = (TThostFtdcLastFragmentType) ((arg1)->LastFragment);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1InstallID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  TThostFtdcInstallIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  arg2 = (TThostFtdcInstallIDType)jarg2; 
  if (arg1) (arg1)->InstallID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1InstallID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  TThostFtdcInstallIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  result = (TThostFtdcInstallIDType) ((arg1)->InstallID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1Digest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Digest, (const char *)arg2, 36-1);
      arg1->Digest[36-1] = 0;
    } else {
      arg1->Digest[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1Digest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  result = (char *) ((arg1)->Digest);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1CurrencyID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrencyID, (const char *)arg2, 4-1);
      arg1->CurrencyID[4-1] = 0;
    } else {
      arg1->CurrencyID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1CurrencyID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  result = (char *) ((arg1)->CurrencyID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1DeviceID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->DeviceID, (const char *)arg2, 3-1);
      arg1->DeviceID[3-1] = 0;
    } else {
      arg1->DeviceID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1DeviceID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  result = (char *) ((arg1)->DeviceID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1BrokerIDByBank_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerIDByBank, (const char *)arg2, 33-1);
      arg1->BrokerIDByBank[33-1] = 0;
    } else {
      arg1->BrokerIDByBank[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1BrokerIDByBank_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  result = (char *) ((arg1)->BrokerIDByBank);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1OperNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OperNo, (const char *)arg2, 17-1);
      arg1->OperNo[17-1] = 0;
    } else {
      arg1->OperNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1OperNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  result = (char *) ((arg1)->OperNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1RequestID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  TThostFtdcRequestIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  arg2 = (TThostFtdcRequestIDType)jarg2; 
  if (arg1) (arg1)->RequestID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1RequestID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  TThostFtdcRequestIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  result = (TThostFtdcRequestIDType) ((arg1)->RequestID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1TID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  TThostFtdcTIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  arg2 = (TThostFtdcTIDType)jarg2; 
  if (arg1) (arg1)->TID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcFutureSignIOField_1TID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  TThostFtdcTIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  result = (TThostFtdcTIDType) ((arg1)->TID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcFutureSignIOField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcFutureSignIOField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcFutureSignIOField *)new CThostFtdcFutureSignIOField();
  *(CThostFtdcFutureSignIOField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcFutureSignIOField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcFutureSignIOField *arg1 = (CThostFtdcFutureSignIOField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcFutureSignIOField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1TradeCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeCode, (const char *)arg2, 7-1);
      arg1->TradeCode[7-1] = 0;
    } else {
      arg1->TradeCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1TradeCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->TradeCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1BankBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBranchID, (const char *)arg2, 5-1);
      arg1->BankBranchID[5-1] = 0;
    } else {
      arg1->BankBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1BankBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->BankBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1BrokerBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerBranchID, (const char *)arg2, 31-1);
      arg1->BrokerBranchID[31-1] = 0;
    } else {
      arg1->BrokerBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1BrokerBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->BrokerBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1TradeDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeDate, (const char *)arg2, 9-1);
      arg1->TradeDate[9-1] = 0;
    } else {
      arg1->TradeDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1TradeDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->TradeDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1TradeTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeTime, (const char *)arg2, 9-1);
      arg1->TradeTime[9-1] = 0;
    } else {
      arg1->TradeTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1TradeTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->TradeTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1BankSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSerial, (const char *)arg2, 13-1);
      arg1->BankSerial[13-1] = 0;
    } else {
      arg1->BankSerial[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1BankSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->BankSerial);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1PlateSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  TThostFtdcSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  arg2 = (TThostFtdcSerialType)jarg2; 
  if (arg1) (arg1)->PlateSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1PlateSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  TThostFtdcSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  result = (TThostFtdcSerialType) ((arg1)->PlateSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1LastFragment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  TThostFtdcLastFragmentType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  arg2 = (TThostFtdcLastFragmentType)jarg2; 
  if (arg1) (arg1)->LastFragment = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1LastFragment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  TThostFtdcLastFragmentType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  result = (TThostFtdcLastFragmentType) ((arg1)->LastFragment);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1InstallID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  TThostFtdcInstallIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  arg2 = (TThostFtdcInstallIDType)jarg2; 
  if (arg1) (arg1)->InstallID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1InstallID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  TThostFtdcInstallIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  result = (TThostFtdcInstallIDType) ((arg1)->InstallID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1Digest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Digest, (const char *)arg2, 36-1);
      arg1->Digest[36-1] = 0;
    } else {
      arg1->Digest[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1Digest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->Digest);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1CurrencyID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrencyID, (const char *)arg2, 4-1);
      arg1->CurrencyID[4-1] = 0;
    } else {
      arg1->CurrencyID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1CurrencyID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->CurrencyID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1DeviceID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->DeviceID, (const char *)arg2, 3-1);
      arg1->DeviceID[3-1] = 0;
    } else {
      arg1->DeviceID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1DeviceID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->DeviceID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1BrokerIDByBank_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerIDByBank, (const char *)arg2, 33-1);
      arg1->BrokerIDByBank[33-1] = 0;
    } else {
      arg1->BrokerIDByBank[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1BrokerIDByBank_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->BrokerIDByBank);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1OperNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OperNo, (const char *)arg2, 17-1);
      arg1->OperNo[17-1] = 0;
    } else {
      arg1->OperNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1OperNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->OperNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1RequestID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  TThostFtdcRequestIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  arg2 = (TThostFtdcRequestIDType)jarg2; 
  if (arg1) (arg1)->RequestID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1RequestID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  TThostFtdcRequestIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  result = (TThostFtdcRequestIDType) ((arg1)->RequestID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1TID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  TThostFtdcTIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  arg2 = (TThostFtdcTIDType)jarg2; 
  if (arg1) (arg1)->TID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1TID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  TThostFtdcTIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  result = (TThostFtdcTIDType) ((arg1)->TID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1ErrorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  TThostFtdcErrorIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  arg2 = (TThostFtdcErrorIDType)jarg2; 
  if (arg1) (arg1)->ErrorID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1ErrorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  TThostFtdcErrorIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  result = (TThostFtdcErrorIDType) ((arg1)->ErrorID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1ErrorMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ErrorMsg, (const char *)arg2, 81-1);
      arg1->ErrorMsg[81-1] = 0;
    } else {
      arg1->ErrorMsg[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1ErrorMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->ErrorMsg);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1PinKey_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->PinKey, (const char *)arg2, 129-1);
      arg1->PinKey[129-1] = 0;
    } else {
      arg1->PinKey[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1PinKey_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->PinKey);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1MacKey_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->MacKey, (const char *)arg2, 129-1);
      arg1->MacKey[129-1] = 0;
    } else {
      arg1->MacKey[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignInField_1MacKey_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->MacKey);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcRspFutureSignInField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcRspFutureSignInField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcRspFutureSignInField *)new CThostFtdcRspFutureSignInField();
  *(CThostFtdcRspFutureSignInField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcRspFutureSignInField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcRspFutureSignInField *arg1 = (CThostFtdcRspFutureSignInField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcRspFutureSignInField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1TradeCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeCode, (const char *)arg2, 7-1);
      arg1->TradeCode[7-1] = 0;
    } else {
      arg1->TradeCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1TradeCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->TradeCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1BankBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBranchID, (const char *)arg2, 5-1);
      arg1->BankBranchID[5-1] = 0;
    } else {
      arg1->BankBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1BankBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->BankBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1BrokerBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerBranchID, (const char *)arg2, 31-1);
      arg1->BrokerBranchID[31-1] = 0;
    } else {
      arg1->BrokerBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1BrokerBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->BrokerBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1TradeDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeDate, (const char *)arg2, 9-1);
      arg1->TradeDate[9-1] = 0;
    } else {
      arg1->TradeDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1TradeDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->TradeDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1TradeTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeTime, (const char *)arg2, 9-1);
      arg1->TradeTime[9-1] = 0;
    } else {
      arg1->TradeTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1TradeTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->TradeTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1BankSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSerial, (const char *)arg2, 13-1);
      arg1->BankSerial[13-1] = 0;
    } else {
      arg1->BankSerial[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1BankSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->BankSerial);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1PlateSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  TThostFtdcSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  arg2 = (TThostFtdcSerialType)jarg2; 
  if (arg1) (arg1)->PlateSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1PlateSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  TThostFtdcSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  result = (TThostFtdcSerialType) ((arg1)->PlateSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1LastFragment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  TThostFtdcLastFragmentType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  arg2 = (TThostFtdcLastFragmentType)jarg2; 
  if (arg1) (arg1)->LastFragment = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1LastFragment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  TThostFtdcLastFragmentType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  result = (TThostFtdcLastFragmentType) ((arg1)->LastFragment);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1InstallID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  TThostFtdcInstallIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  arg2 = (TThostFtdcInstallIDType)jarg2; 
  if (arg1) (arg1)->InstallID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1InstallID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  TThostFtdcInstallIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  result = (TThostFtdcInstallIDType) ((arg1)->InstallID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1Digest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Digest, (const char *)arg2, 36-1);
      arg1->Digest[36-1] = 0;
    } else {
      arg1->Digest[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1Digest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->Digest);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1CurrencyID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrencyID, (const char *)arg2, 4-1);
      arg1->CurrencyID[4-1] = 0;
    } else {
      arg1->CurrencyID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1CurrencyID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->CurrencyID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1DeviceID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->DeviceID, (const char *)arg2, 3-1);
      arg1->DeviceID[3-1] = 0;
    } else {
      arg1->DeviceID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1DeviceID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->DeviceID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1BrokerIDByBank_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerIDByBank, (const char *)arg2, 33-1);
      arg1->BrokerIDByBank[33-1] = 0;
    } else {
      arg1->BrokerIDByBank[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1BrokerIDByBank_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->BrokerIDByBank);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1OperNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OperNo, (const char *)arg2, 17-1);
      arg1->OperNo[17-1] = 0;
    } else {
      arg1->OperNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1OperNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->OperNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1RequestID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  TThostFtdcRequestIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  arg2 = (TThostFtdcRequestIDType)jarg2; 
  if (arg1) (arg1)->RequestID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1RequestID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  TThostFtdcRequestIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  result = (TThostFtdcRequestIDType) ((arg1)->RequestID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1TID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  TThostFtdcTIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  arg2 = (TThostFtdcTIDType)jarg2; 
  if (arg1) (arg1)->TID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqFutureSignOutField_1TID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  TThostFtdcTIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  result = (TThostFtdcTIDType) ((arg1)->TID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcReqFutureSignOutField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcReqFutureSignOutField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcReqFutureSignOutField *)new CThostFtdcReqFutureSignOutField();
  *(CThostFtdcReqFutureSignOutField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcReqFutureSignOutField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcReqFutureSignOutField *arg1 = (CThostFtdcReqFutureSignOutField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcReqFutureSignOutField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1TradeCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeCode, (const char *)arg2, 7-1);
      arg1->TradeCode[7-1] = 0;
    } else {
      arg1->TradeCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1TradeCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->TradeCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1BankBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBranchID, (const char *)arg2, 5-1);
      arg1->BankBranchID[5-1] = 0;
    } else {
      arg1->BankBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1BankBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->BankBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1BrokerBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerBranchID, (const char *)arg2, 31-1);
      arg1->BrokerBranchID[31-1] = 0;
    } else {
      arg1->BrokerBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1BrokerBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->BrokerBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1TradeDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeDate, (const char *)arg2, 9-1);
      arg1->TradeDate[9-1] = 0;
    } else {
      arg1->TradeDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1TradeDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->TradeDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1TradeTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeTime, (const char *)arg2, 9-1);
      arg1->TradeTime[9-1] = 0;
    } else {
      arg1->TradeTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1TradeTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->TradeTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1BankSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSerial, (const char *)arg2, 13-1);
      arg1->BankSerial[13-1] = 0;
    } else {
      arg1->BankSerial[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1BankSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->BankSerial);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1PlateSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  TThostFtdcSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  arg2 = (TThostFtdcSerialType)jarg2; 
  if (arg1) (arg1)->PlateSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1PlateSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  TThostFtdcSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  result = (TThostFtdcSerialType) ((arg1)->PlateSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1LastFragment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  TThostFtdcLastFragmentType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  arg2 = (TThostFtdcLastFragmentType)jarg2; 
  if (arg1) (arg1)->LastFragment = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1LastFragment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  TThostFtdcLastFragmentType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  result = (TThostFtdcLastFragmentType) ((arg1)->LastFragment);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1InstallID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  TThostFtdcInstallIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  arg2 = (TThostFtdcInstallIDType)jarg2; 
  if (arg1) (arg1)->InstallID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1InstallID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  TThostFtdcInstallIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  result = (TThostFtdcInstallIDType) ((arg1)->InstallID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1Digest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Digest, (const char *)arg2, 36-1);
      arg1->Digest[36-1] = 0;
    } else {
      arg1->Digest[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1Digest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->Digest);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1CurrencyID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrencyID, (const char *)arg2, 4-1);
      arg1->CurrencyID[4-1] = 0;
    } else {
      arg1->CurrencyID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1CurrencyID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->CurrencyID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1DeviceID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->DeviceID, (const char *)arg2, 3-1);
      arg1->DeviceID[3-1] = 0;
    } else {
      arg1->DeviceID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1DeviceID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->DeviceID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1BrokerIDByBank_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerIDByBank, (const char *)arg2, 33-1);
      arg1->BrokerIDByBank[33-1] = 0;
    } else {
      arg1->BrokerIDByBank[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1BrokerIDByBank_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->BrokerIDByBank);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1OperNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OperNo, (const char *)arg2, 17-1);
      arg1->OperNo[17-1] = 0;
    } else {
      arg1->OperNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1OperNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->OperNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1RequestID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  TThostFtdcRequestIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  arg2 = (TThostFtdcRequestIDType)jarg2; 
  if (arg1) (arg1)->RequestID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1RequestID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  TThostFtdcRequestIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  result = (TThostFtdcRequestIDType) ((arg1)->RequestID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1TID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  TThostFtdcTIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  arg2 = (TThostFtdcTIDType)jarg2; 
  if (arg1) (arg1)->TID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1TID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  TThostFtdcTIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  result = (TThostFtdcTIDType) ((arg1)->TID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1ErrorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  TThostFtdcErrorIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  arg2 = (TThostFtdcErrorIDType)jarg2; 
  if (arg1) (arg1)->ErrorID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1ErrorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  TThostFtdcErrorIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  result = (TThostFtdcErrorIDType) ((arg1)->ErrorID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1ErrorMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ErrorMsg, (const char *)arg2, 81-1);
      arg1->ErrorMsg[81-1] = 0;
    } else {
      arg1->ErrorMsg[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspFutureSignOutField_1ErrorMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->ErrorMsg);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcRspFutureSignOutField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcRspFutureSignOutField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcRspFutureSignOutField *)new CThostFtdcRspFutureSignOutField();
  *(CThostFtdcRspFutureSignOutField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcRspFutureSignOutField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcRspFutureSignOutField *arg1 = (CThostFtdcRspFutureSignOutField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcRspFutureSignOutField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1TradeCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeCode, (const char *)arg2, 7-1);
      arg1->TradeCode[7-1] = 0;
    } else {
      arg1->TradeCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1TradeCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->TradeCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1BankBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBranchID, (const char *)arg2, 5-1);
      arg1->BankBranchID[5-1] = 0;
    } else {
      arg1->BankBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1BankBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->BankBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1BrokerBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerBranchID, (const char *)arg2, 31-1);
      arg1->BrokerBranchID[31-1] = 0;
    } else {
      arg1->BrokerBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1BrokerBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->BrokerBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1TradeDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeDate, (const char *)arg2, 9-1);
      arg1->TradeDate[9-1] = 0;
    } else {
      arg1->TradeDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1TradeDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->TradeDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1TradeTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeTime, (const char *)arg2, 9-1);
      arg1->TradeTime[9-1] = 0;
    } else {
      arg1->TradeTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1TradeTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->TradeTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1BankSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSerial, (const char *)arg2, 13-1);
      arg1->BankSerial[13-1] = 0;
    } else {
      arg1->BankSerial[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1BankSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->BankSerial);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1PlateSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  TThostFtdcSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  arg2 = (TThostFtdcSerialType)jarg2; 
  if (arg1) (arg1)->PlateSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1PlateSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  TThostFtdcSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  result = (TThostFtdcSerialType) ((arg1)->PlateSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1LastFragment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  TThostFtdcLastFragmentType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  arg2 = (TThostFtdcLastFragmentType)jarg2; 
  if (arg1) (arg1)->LastFragment = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1LastFragment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  TThostFtdcLastFragmentType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  result = (TThostFtdcLastFragmentType) ((arg1)->LastFragment);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1Reference_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  TThostFtdcSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  arg2 = (TThostFtdcSerialType)jarg2; 
  if (arg1) (arg1)->Reference = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1Reference_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  TThostFtdcSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  result = (TThostFtdcSerialType) ((arg1)->Reference);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1RefrenceIssureType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  TThostFtdcInstitutionTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  arg2 = (TThostFtdcInstitutionTypeType)jarg2; 
  if (arg1) (arg1)->RefrenceIssureType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1RefrenceIssureType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  TThostFtdcInstitutionTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  result = (TThostFtdcInstitutionTypeType) ((arg1)->RefrenceIssureType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1RefrenceIssure_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->RefrenceIssure, (const char *)arg2, 36-1);
      arg1->RefrenceIssure[36-1] = 0;
    } else {
      arg1->RefrenceIssure[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1RefrenceIssure_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->RefrenceIssure);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1CustomerName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CustomerName, (const char *)arg2, 51-1);
      arg1->CustomerName[51-1] = 0;
    } else {
      arg1->CustomerName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1CustomerName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->CustomerName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1IdCardType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  TThostFtdcIdCardTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  arg2 = (TThostFtdcIdCardTypeType)jarg2; 
  if (arg1) (arg1)->IdCardType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1IdCardType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  TThostFtdcIdCardTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  result = (TThostFtdcIdCardTypeType) ((arg1)->IdCardType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1IdentifiedCardNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->IdentifiedCardNo, (const char *)arg2, 51-1);
      arg1->IdentifiedCardNo[51-1] = 0;
    } else {
      arg1->IdentifiedCardNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1IdentifiedCardNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->IdentifiedCardNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1CustType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  TThostFtdcCustTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  arg2 = (TThostFtdcCustTypeType)jarg2; 
  if (arg1) (arg1)->CustType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1CustType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  TThostFtdcCustTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  result = (TThostFtdcCustTypeType) ((arg1)->CustType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1BankAccount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankAccount, (const char *)arg2, 41-1);
      arg1->BankAccount[41-1] = 0;
    } else {
      arg1->BankAccount[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1BankAccount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->BankAccount);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1BankPassWord_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankPassWord, (const char *)arg2, 41-1);
      arg1->BankPassWord[41-1] = 0;
    } else {
      arg1->BankPassWord[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1BankPassWord_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->BankPassWord);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1AccountID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 13-1);
      arg1->AccountID[13-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1AccountID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->AccountID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1Password_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Password, (const char *)arg2, 41-1);
      arg1->Password[41-1] = 0;
    } else {
      arg1->Password[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1Password_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->Password);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1CurrencyID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrencyID, (const char *)arg2, 4-1);
      arg1->CurrencyID[4-1] = 0;
    } else {
      arg1->CurrencyID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1CurrencyID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->CurrencyID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1TradeAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  TThostFtdcTradeAmountType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  arg2 = (TThostFtdcTradeAmountType)jarg2; 
  if (arg1) (arg1)->TradeAmount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1TradeAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  TThostFtdcTradeAmountType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  result = (TThostFtdcTradeAmountType) ((arg1)->TradeAmount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1Digest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Digest, (const char *)arg2, 36-1);
      arg1->Digest[36-1] = 0;
    } else {
      arg1->Digest[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqQueryTradeResultBySerialField_1Digest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->Digest);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcReqQueryTradeResultBySerialField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcReqQueryTradeResultBySerialField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcReqQueryTradeResultBySerialField *)new CThostFtdcReqQueryTradeResultBySerialField();
  *(CThostFtdcReqQueryTradeResultBySerialField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcReqQueryTradeResultBySerialField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcReqQueryTradeResultBySerialField *arg1 = (CThostFtdcReqQueryTradeResultBySerialField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcReqQueryTradeResultBySerialField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1TradeCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeCode, (const char *)arg2, 7-1);
      arg1->TradeCode[7-1] = 0;
    } else {
      arg1->TradeCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1TradeCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->TradeCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1BankBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBranchID, (const char *)arg2, 5-1);
      arg1->BankBranchID[5-1] = 0;
    } else {
      arg1->BankBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1BankBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->BankBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1BrokerBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerBranchID, (const char *)arg2, 31-1);
      arg1->BrokerBranchID[31-1] = 0;
    } else {
      arg1->BrokerBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1BrokerBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->BrokerBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1TradeDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeDate, (const char *)arg2, 9-1);
      arg1->TradeDate[9-1] = 0;
    } else {
      arg1->TradeDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1TradeDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->TradeDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1TradeTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeTime, (const char *)arg2, 9-1);
      arg1->TradeTime[9-1] = 0;
    } else {
      arg1->TradeTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1TradeTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->TradeTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1BankSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSerial, (const char *)arg2, 13-1);
      arg1->BankSerial[13-1] = 0;
    } else {
      arg1->BankSerial[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1BankSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->BankSerial);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1PlateSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  TThostFtdcSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  arg2 = (TThostFtdcSerialType)jarg2; 
  if (arg1) (arg1)->PlateSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1PlateSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  TThostFtdcSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  result = (TThostFtdcSerialType) ((arg1)->PlateSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1LastFragment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  TThostFtdcLastFragmentType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  arg2 = (TThostFtdcLastFragmentType)jarg2; 
  if (arg1) (arg1)->LastFragment = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1LastFragment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  TThostFtdcLastFragmentType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  result = (TThostFtdcLastFragmentType) ((arg1)->LastFragment);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1ErrorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  TThostFtdcErrorIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  arg2 = (TThostFtdcErrorIDType)jarg2; 
  if (arg1) (arg1)->ErrorID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1ErrorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  TThostFtdcErrorIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  result = (TThostFtdcErrorIDType) ((arg1)->ErrorID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1ErrorMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ErrorMsg, (const char *)arg2, 81-1);
      arg1->ErrorMsg[81-1] = 0;
    } else {
      arg1->ErrorMsg[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1ErrorMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->ErrorMsg);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1Reference_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  TThostFtdcSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  arg2 = (TThostFtdcSerialType)jarg2; 
  if (arg1) (arg1)->Reference = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1Reference_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  TThostFtdcSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  result = (TThostFtdcSerialType) ((arg1)->Reference);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1RefrenceIssureType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  TThostFtdcInstitutionTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  arg2 = (TThostFtdcInstitutionTypeType)jarg2; 
  if (arg1) (arg1)->RefrenceIssureType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1RefrenceIssureType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  TThostFtdcInstitutionTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  result = (TThostFtdcInstitutionTypeType) ((arg1)->RefrenceIssureType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1RefrenceIssure_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->RefrenceIssure, (const char *)arg2, 36-1);
      arg1->RefrenceIssure[36-1] = 0;
    } else {
      arg1->RefrenceIssure[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1RefrenceIssure_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->RefrenceIssure);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1OriginReturnCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OriginReturnCode, (const char *)arg2, 7-1);
      arg1->OriginReturnCode[7-1] = 0;
    } else {
      arg1->OriginReturnCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1OriginReturnCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->OriginReturnCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1OriginDescrInfoForReturnCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OriginDescrInfoForReturnCode, (const char *)arg2, 129-1);
      arg1->OriginDescrInfoForReturnCode[129-1] = 0;
    } else {
      arg1->OriginDescrInfoForReturnCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1OriginDescrInfoForReturnCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->OriginDescrInfoForReturnCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1BankAccount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankAccount, (const char *)arg2, 41-1);
      arg1->BankAccount[41-1] = 0;
    } else {
      arg1->BankAccount[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1BankAccount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->BankAccount);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1BankPassWord_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankPassWord, (const char *)arg2, 41-1);
      arg1->BankPassWord[41-1] = 0;
    } else {
      arg1->BankPassWord[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1BankPassWord_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->BankPassWord);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1AccountID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 13-1);
      arg1->AccountID[13-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1AccountID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->AccountID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1Password_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Password, (const char *)arg2, 41-1);
      arg1->Password[41-1] = 0;
    } else {
      arg1->Password[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1Password_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->Password);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1CurrencyID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrencyID, (const char *)arg2, 4-1);
      arg1->CurrencyID[4-1] = 0;
    } else {
      arg1->CurrencyID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1CurrencyID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->CurrencyID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1TradeAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  TThostFtdcTradeAmountType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  arg2 = (TThostFtdcTradeAmountType)jarg2; 
  if (arg1) (arg1)->TradeAmount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1TradeAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  TThostFtdcTradeAmountType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  result = (TThostFtdcTradeAmountType) ((arg1)->TradeAmount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1Digest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Digest, (const char *)arg2, 36-1);
      arg1->Digest[36-1] = 0;
    } else {
      arg1->Digest[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspQueryTradeResultBySerialField_1Digest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  result = (char *) ((arg1)->Digest);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcRspQueryTradeResultBySerialField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcRspQueryTradeResultBySerialField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcRspQueryTradeResultBySerialField *)new CThostFtdcRspQueryTradeResultBySerialField();
  *(CThostFtdcRspQueryTradeResultBySerialField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcRspQueryTradeResultBySerialField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcRspQueryTradeResultBySerialField *arg1 = (CThostFtdcRspQueryTradeResultBySerialField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcRspQueryTradeResultBySerialField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqDayEndFileReadyField_1TradeCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqDayEndFileReadyField *arg1 = (CThostFtdcReqDayEndFileReadyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqDayEndFileReadyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeCode, (const char *)arg2, 7-1);
      arg1->TradeCode[7-1] = 0;
    } else {
      arg1->TradeCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqDayEndFileReadyField_1TradeCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqDayEndFileReadyField *arg1 = (CThostFtdcReqDayEndFileReadyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqDayEndFileReadyField **)&jarg1; 
  result = (char *) ((arg1)->TradeCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqDayEndFileReadyField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqDayEndFileReadyField *arg1 = (CThostFtdcReqDayEndFileReadyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqDayEndFileReadyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqDayEndFileReadyField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqDayEndFileReadyField *arg1 = (CThostFtdcReqDayEndFileReadyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqDayEndFileReadyField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqDayEndFileReadyField_1BankBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqDayEndFileReadyField *arg1 = (CThostFtdcReqDayEndFileReadyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqDayEndFileReadyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBranchID, (const char *)arg2, 5-1);
      arg1->BankBranchID[5-1] = 0;
    } else {
      arg1->BankBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqDayEndFileReadyField_1BankBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqDayEndFileReadyField *arg1 = (CThostFtdcReqDayEndFileReadyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqDayEndFileReadyField **)&jarg1; 
  result = (char *) ((arg1)->BankBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqDayEndFileReadyField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqDayEndFileReadyField *arg1 = (CThostFtdcReqDayEndFileReadyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqDayEndFileReadyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqDayEndFileReadyField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqDayEndFileReadyField *arg1 = (CThostFtdcReqDayEndFileReadyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqDayEndFileReadyField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqDayEndFileReadyField_1BrokerBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqDayEndFileReadyField *arg1 = (CThostFtdcReqDayEndFileReadyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqDayEndFileReadyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerBranchID, (const char *)arg2, 31-1);
      arg1->BrokerBranchID[31-1] = 0;
    } else {
      arg1->BrokerBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqDayEndFileReadyField_1BrokerBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqDayEndFileReadyField *arg1 = (CThostFtdcReqDayEndFileReadyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqDayEndFileReadyField **)&jarg1; 
  result = (char *) ((arg1)->BrokerBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqDayEndFileReadyField_1TradeDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqDayEndFileReadyField *arg1 = (CThostFtdcReqDayEndFileReadyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqDayEndFileReadyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeDate, (const char *)arg2, 9-1);
      arg1->TradeDate[9-1] = 0;
    } else {
      arg1->TradeDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqDayEndFileReadyField_1TradeDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqDayEndFileReadyField *arg1 = (CThostFtdcReqDayEndFileReadyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqDayEndFileReadyField **)&jarg1; 
  result = (char *) ((arg1)->TradeDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqDayEndFileReadyField_1TradeTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqDayEndFileReadyField *arg1 = (CThostFtdcReqDayEndFileReadyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqDayEndFileReadyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeTime, (const char *)arg2, 9-1);
      arg1->TradeTime[9-1] = 0;
    } else {
      arg1->TradeTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqDayEndFileReadyField_1TradeTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqDayEndFileReadyField *arg1 = (CThostFtdcReqDayEndFileReadyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqDayEndFileReadyField **)&jarg1; 
  result = (char *) ((arg1)->TradeTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqDayEndFileReadyField_1BankSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqDayEndFileReadyField *arg1 = (CThostFtdcReqDayEndFileReadyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqDayEndFileReadyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSerial, (const char *)arg2, 13-1);
      arg1->BankSerial[13-1] = 0;
    } else {
      arg1->BankSerial[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqDayEndFileReadyField_1BankSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqDayEndFileReadyField *arg1 = (CThostFtdcReqDayEndFileReadyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqDayEndFileReadyField **)&jarg1; 
  result = (char *) ((arg1)->BankSerial);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqDayEndFileReadyField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqDayEndFileReadyField *arg1 = (CThostFtdcReqDayEndFileReadyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqDayEndFileReadyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqDayEndFileReadyField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqDayEndFileReadyField *arg1 = (CThostFtdcReqDayEndFileReadyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqDayEndFileReadyField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqDayEndFileReadyField_1PlateSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqDayEndFileReadyField *arg1 = (CThostFtdcReqDayEndFileReadyField *) 0 ;
  TThostFtdcSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqDayEndFileReadyField **)&jarg1; 
  arg2 = (TThostFtdcSerialType)jarg2; 
  if (arg1) (arg1)->PlateSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqDayEndFileReadyField_1PlateSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqDayEndFileReadyField *arg1 = (CThostFtdcReqDayEndFileReadyField *) 0 ;
  TThostFtdcSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqDayEndFileReadyField **)&jarg1; 
  result = (TThostFtdcSerialType) ((arg1)->PlateSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqDayEndFileReadyField_1LastFragment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqDayEndFileReadyField *arg1 = (CThostFtdcReqDayEndFileReadyField *) 0 ;
  TThostFtdcLastFragmentType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqDayEndFileReadyField **)&jarg1; 
  arg2 = (TThostFtdcLastFragmentType)jarg2; 
  if (arg1) (arg1)->LastFragment = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqDayEndFileReadyField_1LastFragment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqDayEndFileReadyField *arg1 = (CThostFtdcReqDayEndFileReadyField *) 0 ;
  TThostFtdcLastFragmentType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqDayEndFileReadyField **)&jarg1; 
  result = (TThostFtdcLastFragmentType) ((arg1)->LastFragment);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqDayEndFileReadyField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqDayEndFileReadyField *arg1 = (CThostFtdcReqDayEndFileReadyField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqDayEndFileReadyField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqDayEndFileReadyField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqDayEndFileReadyField *arg1 = (CThostFtdcReqDayEndFileReadyField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqDayEndFileReadyField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqDayEndFileReadyField_1FileBusinessCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqDayEndFileReadyField *arg1 = (CThostFtdcReqDayEndFileReadyField *) 0 ;
  TThostFtdcFileBusinessCodeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqDayEndFileReadyField **)&jarg1; 
  arg2 = (TThostFtdcFileBusinessCodeType)jarg2; 
  if (arg1) (arg1)->FileBusinessCode = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqDayEndFileReadyField_1FileBusinessCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqDayEndFileReadyField *arg1 = (CThostFtdcReqDayEndFileReadyField *) 0 ;
  TThostFtdcFileBusinessCodeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqDayEndFileReadyField **)&jarg1; 
  result = (TThostFtdcFileBusinessCodeType) ((arg1)->FileBusinessCode);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqDayEndFileReadyField_1Digest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqDayEndFileReadyField *arg1 = (CThostFtdcReqDayEndFileReadyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqDayEndFileReadyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Digest, (const char *)arg2, 36-1);
      arg1->Digest[36-1] = 0;
    } else {
      arg1->Digest[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqDayEndFileReadyField_1Digest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqDayEndFileReadyField *arg1 = (CThostFtdcReqDayEndFileReadyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqDayEndFileReadyField **)&jarg1; 
  result = (char *) ((arg1)->Digest);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcReqDayEndFileReadyField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcReqDayEndFileReadyField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcReqDayEndFileReadyField *)new CThostFtdcReqDayEndFileReadyField();
  *(CThostFtdcReqDayEndFileReadyField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcReqDayEndFileReadyField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcReqDayEndFileReadyField *arg1 = (CThostFtdcReqDayEndFileReadyField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcReqDayEndFileReadyField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReturnResultField_1ReturnCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReturnResultField *arg1 = (CThostFtdcReturnResultField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReturnResultField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ReturnCode, (const char *)arg2, 7-1);
      arg1->ReturnCode[7-1] = 0;
    } else {
      arg1->ReturnCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReturnResultField_1ReturnCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReturnResultField *arg1 = (CThostFtdcReturnResultField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReturnResultField **)&jarg1; 
  result = (char *) ((arg1)->ReturnCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReturnResultField_1DescrInfoForReturnCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReturnResultField *arg1 = (CThostFtdcReturnResultField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReturnResultField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->DescrInfoForReturnCode, (const char *)arg2, 129-1);
      arg1->DescrInfoForReturnCode[129-1] = 0;
    } else {
      arg1->DescrInfoForReturnCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReturnResultField_1DescrInfoForReturnCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReturnResultField *arg1 = (CThostFtdcReturnResultField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReturnResultField **)&jarg1; 
  result = (char *) ((arg1)->DescrInfoForReturnCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcReturnResultField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcReturnResultField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcReturnResultField *)new CThostFtdcReturnResultField();
  *(CThostFtdcReturnResultField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcReturnResultField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcReturnResultField *arg1 = (CThostFtdcReturnResultField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcReturnResultField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1TradeCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeCode, (const char *)arg2, 7-1);
      arg1->TradeCode[7-1] = 0;
    } else {
      arg1->TradeCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1TradeCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  result = (char *) ((arg1)->TradeCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1BankBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBranchID, (const char *)arg2, 5-1);
      arg1->BankBranchID[5-1] = 0;
    } else {
      arg1->BankBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1BankBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  result = (char *) ((arg1)->BankBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1BrokerBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerBranchID, (const char *)arg2, 31-1);
      arg1->BrokerBranchID[31-1] = 0;
    } else {
      arg1->BrokerBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1BrokerBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  result = (char *) ((arg1)->BrokerBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1TradeDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeDate, (const char *)arg2, 9-1);
      arg1->TradeDate[9-1] = 0;
    } else {
      arg1->TradeDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1TradeDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  result = (char *) ((arg1)->TradeDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1TradeTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeTime, (const char *)arg2, 9-1);
      arg1->TradeTime[9-1] = 0;
    } else {
      arg1->TradeTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1TradeTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  result = (char *) ((arg1)->TradeTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1BankSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSerial, (const char *)arg2, 13-1);
      arg1->BankSerial[13-1] = 0;
    } else {
      arg1->BankSerial[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1BankSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  result = (char *) ((arg1)->BankSerial);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1PlateSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  TThostFtdcSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  arg2 = (TThostFtdcSerialType)jarg2; 
  if (arg1) (arg1)->PlateSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1PlateSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  TThostFtdcSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  result = (TThostFtdcSerialType) ((arg1)->PlateSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1LastFragment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  TThostFtdcLastFragmentType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  arg2 = (TThostFtdcLastFragmentType)jarg2; 
  if (arg1) (arg1)->LastFragment = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1LastFragment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  TThostFtdcLastFragmentType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  result = (TThostFtdcLastFragmentType) ((arg1)->LastFragment);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1AccountID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 13-1);
      arg1->AccountID[13-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1AccountID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  result = (char *) ((arg1)->AccountID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1Password_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Password, (const char *)arg2, 41-1);
      arg1->Password[41-1] = 0;
    } else {
      arg1->Password[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1Password_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  result = (char *) ((arg1)->Password);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1BankAccount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankAccount, (const char *)arg2, 41-1);
      arg1->BankAccount[41-1] = 0;
    } else {
      arg1->BankAccount[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1BankAccount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  result = (char *) ((arg1)->BankAccount);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1BankPassWord_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankPassWord, (const char *)arg2, 41-1);
      arg1->BankPassWord[41-1] = 0;
    } else {
      arg1->BankPassWord[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1BankPassWord_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  result = (char *) ((arg1)->BankPassWord);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1InstallID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  TThostFtdcInstallIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  arg2 = (TThostFtdcInstallIDType)jarg2; 
  if (arg1) (arg1)->InstallID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1InstallID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  TThostFtdcInstallIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  result = (TThostFtdcInstallIDType) ((arg1)->InstallID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1TID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  TThostFtdcTIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  arg2 = (TThostFtdcTIDType)jarg2; 
  if (arg1) (arg1)->TID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordField_1TID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  TThostFtdcTIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  result = (TThostFtdcTIDType) ((arg1)->TID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcVerifyFuturePasswordField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcVerifyFuturePasswordField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcVerifyFuturePasswordField *)new CThostFtdcVerifyFuturePasswordField();
  *(CThostFtdcVerifyFuturePasswordField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcVerifyFuturePasswordField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcVerifyFuturePasswordField *arg1 = (CThostFtdcVerifyFuturePasswordField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcVerifyFuturePasswordField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyCustInfoField_1CustomerName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcVerifyCustInfoField *arg1 = (CThostFtdcVerifyCustInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyCustInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CustomerName, (const char *)arg2, 51-1);
      arg1->CustomerName[51-1] = 0;
    } else {
      arg1->CustomerName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyCustInfoField_1CustomerName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcVerifyCustInfoField *arg1 = (CThostFtdcVerifyCustInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyCustInfoField **)&jarg1; 
  result = (char *) ((arg1)->CustomerName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyCustInfoField_1IdCardType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcVerifyCustInfoField *arg1 = (CThostFtdcVerifyCustInfoField *) 0 ;
  TThostFtdcIdCardTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyCustInfoField **)&jarg1; 
  arg2 = (TThostFtdcIdCardTypeType)jarg2; 
  if (arg1) (arg1)->IdCardType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyCustInfoField_1IdCardType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcVerifyCustInfoField *arg1 = (CThostFtdcVerifyCustInfoField *) 0 ;
  TThostFtdcIdCardTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyCustInfoField **)&jarg1; 
  result = (TThostFtdcIdCardTypeType) ((arg1)->IdCardType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyCustInfoField_1IdentifiedCardNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcVerifyCustInfoField *arg1 = (CThostFtdcVerifyCustInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyCustInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->IdentifiedCardNo, (const char *)arg2, 51-1);
      arg1->IdentifiedCardNo[51-1] = 0;
    } else {
      arg1->IdentifiedCardNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyCustInfoField_1IdentifiedCardNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcVerifyCustInfoField *arg1 = (CThostFtdcVerifyCustInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyCustInfoField **)&jarg1; 
  result = (char *) ((arg1)->IdentifiedCardNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyCustInfoField_1CustType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcVerifyCustInfoField *arg1 = (CThostFtdcVerifyCustInfoField *) 0 ;
  TThostFtdcCustTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyCustInfoField **)&jarg1; 
  arg2 = (TThostFtdcCustTypeType)jarg2; 
  if (arg1) (arg1)->CustType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyCustInfoField_1CustType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcVerifyCustInfoField *arg1 = (CThostFtdcVerifyCustInfoField *) 0 ;
  TThostFtdcCustTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyCustInfoField **)&jarg1; 
  result = (TThostFtdcCustTypeType) ((arg1)->CustType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcVerifyCustInfoField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcVerifyCustInfoField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcVerifyCustInfoField *)new CThostFtdcVerifyCustInfoField();
  *(CThostFtdcVerifyCustInfoField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcVerifyCustInfoField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcVerifyCustInfoField *arg1 = (CThostFtdcVerifyCustInfoField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcVerifyCustInfoField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordAndCustInfoField_1CustomerName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcVerifyFuturePasswordAndCustInfoField *arg1 = (CThostFtdcVerifyFuturePasswordAndCustInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordAndCustInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CustomerName, (const char *)arg2, 51-1);
      arg1->CustomerName[51-1] = 0;
    } else {
      arg1->CustomerName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordAndCustInfoField_1CustomerName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcVerifyFuturePasswordAndCustInfoField *arg1 = (CThostFtdcVerifyFuturePasswordAndCustInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordAndCustInfoField **)&jarg1; 
  result = (char *) ((arg1)->CustomerName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordAndCustInfoField_1IdCardType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcVerifyFuturePasswordAndCustInfoField *arg1 = (CThostFtdcVerifyFuturePasswordAndCustInfoField *) 0 ;
  TThostFtdcIdCardTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordAndCustInfoField **)&jarg1; 
  arg2 = (TThostFtdcIdCardTypeType)jarg2; 
  if (arg1) (arg1)->IdCardType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordAndCustInfoField_1IdCardType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcVerifyFuturePasswordAndCustInfoField *arg1 = (CThostFtdcVerifyFuturePasswordAndCustInfoField *) 0 ;
  TThostFtdcIdCardTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordAndCustInfoField **)&jarg1; 
  result = (TThostFtdcIdCardTypeType) ((arg1)->IdCardType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordAndCustInfoField_1IdentifiedCardNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcVerifyFuturePasswordAndCustInfoField *arg1 = (CThostFtdcVerifyFuturePasswordAndCustInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordAndCustInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->IdentifiedCardNo, (const char *)arg2, 51-1);
      arg1->IdentifiedCardNo[51-1] = 0;
    } else {
      arg1->IdentifiedCardNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordAndCustInfoField_1IdentifiedCardNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcVerifyFuturePasswordAndCustInfoField *arg1 = (CThostFtdcVerifyFuturePasswordAndCustInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordAndCustInfoField **)&jarg1; 
  result = (char *) ((arg1)->IdentifiedCardNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordAndCustInfoField_1CustType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcVerifyFuturePasswordAndCustInfoField *arg1 = (CThostFtdcVerifyFuturePasswordAndCustInfoField *) 0 ;
  TThostFtdcCustTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordAndCustInfoField **)&jarg1; 
  arg2 = (TThostFtdcCustTypeType)jarg2; 
  if (arg1) (arg1)->CustType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordAndCustInfoField_1CustType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcVerifyFuturePasswordAndCustInfoField *arg1 = (CThostFtdcVerifyFuturePasswordAndCustInfoField *) 0 ;
  TThostFtdcCustTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordAndCustInfoField **)&jarg1; 
  result = (TThostFtdcCustTypeType) ((arg1)->CustType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordAndCustInfoField_1AccountID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcVerifyFuturePasswordAndCustInfoField *arg1 = (CThostFtdcVerifyFuturePasswordAndCustInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordAndCustInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 13-1);
      arg1->AccountID[13-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordAndCustInfoField_1AccountID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcVerifyFuturePasswordAndCustInfoField *arg1 = (CThostFtdcVerifyFuturePasswordAndCustInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordAndCustInfoField **)&jarg1; 
  result = (char *) ((arg1)->AccountID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordAndCustInfoField_1Password_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcVerifyFuturePasswordAndCustInfoField *arg1 = (CThostFtdcVerifyFuturePasswordAndCustInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordAndCustInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Password, (const char *)arg2, 41-1);
      arg1->Password[41-1] = 0;
    } else {
      arg1->Password[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcVerifyFuturePasswordAndCustInfoField_1Password_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcVerifyFuturePasswordAndCustInfoField *arg1 = (CThostFtdcVerifyFuturePasswordAndCustInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcVerifyFuturePasswordAndCustInfoField **)&jarg1; 
  result = (char *) ((arg1)->Password);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcVerifyFuturePasswordAndCustInfoField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcVerifyFuturePasswordAndCustInfoField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcVerifyFuturePasswordAndCustInfoField *)new CThostFtdcVerifyFuturePasswordAndCustInfoField();
  *(CThostFtdcVerifyFuturePasswordAndCustInfoField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcVerifyFuturePasswordAndCustInfoField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcVerifyFuturePasswordAndCustInfoField *arg1 = (CThostFtdcVerifyFuturePasswordAndCustInfoField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcVerifyFuturePasswordAndCustInfoField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepositResultInformField_1DepositSeqNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcDepositResultInformField *arg1 = (CThostFtdcDepositResultInformField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepositResultInformField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->DepositSeqNo, (const char *)arg2, 15-1);
      arg1->DepositSeqNo[15-1] = 0;
    } else {
      arg1->DepositSeqNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepositResultInformField_1DepositSeqNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcDepositResultInformField *arg1 = (CThostFtdcDepositResultInformField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepositResultInformField **)&jarg1; 
  result = (char *) ((arg1)->DepositSeqNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepositResultInformField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcDepositResultInformField *arg1 = (CThostFtdcDepositResultInformField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepositResultInformField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepositResultInformField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcDepositResultInformField *arg1 = (CThostFtdcDepositResultInformField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepositResultInformField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepositResultInformField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcDepositResultInformField *arg1 = (CThostFtdcDepositResultInformField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepositResultInformField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepositResultInformField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcDepositResultInformField *arg1 = (CThostFtdcDepositResultInformField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepositResultInformField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepositResultInformField_1Deposit_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcDepositResultInformField *arg1 = (CThostFtdcDepositResultInformField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepositResultInformField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Deposit = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepositResultInformField_1Deposit_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcDepositResultInformField *arg1 = (CThostFtdcDepositResultInformField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepositResultInformField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Deposit);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepositResultInformField_1RequestID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcDepositResultInformField *arg1 = (CThostFtdcDepositResultInformField *) 0 ;
  TThostFtdcRequestIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepositResultInformField **)&jarg1; 
  arg2 = (TThostFtdcRequestIDType)jarg2; 
  if (arg1) (arg1)->RequestID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepositResultInformField_1RequestID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcDepositResultInformField *arg1 = (CThostFtdcDepositResultInformField *) 0 ;
  TThostFtdcRequestIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepositResultInformField **)&jarg1; 
  result = (TThostFtdcRequestIDType) ((arg1)->RequestID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepositResultInformField_1ReturnCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcDepositResultInformField *arg1 = (CThostFtdcDepositResultInformField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepositResultInformField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ReturnCode, (const char *)arg2, 7-1);
      arg1->ReturnCode[7-1] = 0;
    } else {
      arg1->ReturnCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepositResultInformField_1ReturnCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcDepositResultInformField *arg1 = (CThostFtdcDepositResultInformField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepositResultInformField **)&jarg1; 
  result = (char *) ((arg1)->ReturnCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepositResultInformField_1DescrInfoForReturnCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcDepositResultInformField *arg1 = (CThostFtdcDepositResultInformField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepositResultInformField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->DescrInfoForReturnCode, (const char *)arg2, 129-1);
      arg1->DescrInfoForReturnCode[129-1] = 0;
    } else {
      arg1->DescrInfoForReturnCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcDepositResultInformField_1DescrInfoForReturnCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcDepositResultInformField *arg1 = (CThostFtdcDepositResultInformField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDepositResultInformField **)&jarg1; 
  result = (char *) ((arg1)->DescrInfoForReturnCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcDepositResultInformField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcDepositResultInformField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcDepositResultInformField *)new CThostFtdcDepositResultInformField();
  *(CThostFtdcDepositResultInformField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcDepositResultInformField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcDepositResultInformField *arg1 = (CThostFtdcDepositResultInformField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcDepositResultInformField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1TradeCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeCode, (const char *)arg2, 7-1);
      arg1->TradeCode[7-1] = 0;
    } else {
      arg1->TradeCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1TradeCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->TradeCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1BankBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBranchID, (const char *)arg2, 5-1);
      arg1->BankBranchID[5-1] = 0;
    } else {
      arg1->BankBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1BankBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->BankBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1BrokerBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerBranchID, (const char *)arg2, 31-1);
      arg1->BrokerBranchID[31-1] = 0;
    } else {
      arg1->BrokerBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1BrokerBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->BrokerBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1TradeDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeDate, (const char *)arg2, 9-1);
      arg1->TradeDate[9-1] = 0;
    } else {
      arg1->TradeDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1TradeDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->TradeDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1TradeTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeTime, (const char *)arg2, 9-1);
      arg1->TradeTime[9-1] = 0;
    } else {
      arg1->TradeTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1TradeTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->TradeTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1BankSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSerial, (const char *)arg2, 13-1);
      arg1->BankSerial[13-1] = 0;
    } else {
      arg1->BankSerial[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1BankSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->BankSerial);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1PlateSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  TThostFtdcSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  arg2 = (TThostFtdcSerialType)jarg2; 
  if (arg1) (arg1)->PlateSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1PlateSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  TThostFtdcSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  result = (TThostFtdcSerialType) ((arg1)->PlateSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1LastFragment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  TThostFtdcLastFragmentType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  arg2 = (TThostFtdcLastFragmentType)jarg2; 
  if (arg1) (arg1)->LastFragment = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1LastFragment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  TThostFtdcLastFragmentType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  result = (TThostFtdcLastFragmentType) ((arg1)->LastFragment);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1InstallID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  TThostFtdcInstallIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  arg2 = (TThostFtdcInstallIDType)jarg2; 
  if (arg1) (arg1)->InstallID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1InstallID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  TThostFtdcInstallIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  result = (TThostFtdcInstallIDType) ((arg1)->InstallID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1Message_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Message, (const char *)arg2, 129-1);
      arg1->Message[129-1] = 0;
    } else {
      arg1->Message[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1Message_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->Message);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1DeviceID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->DeviceID, (const char *)arg2, 3-1);
      arg1->DeviceID[3-1] = 0;
    } else {
      arg1->DeviceID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1DeviceID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->DeviceID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1BrokerIDByBank_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerIDByBank, (const char *)arg2, 33-1);
      arg1->BrokerIDByBank[33-1] = 0;
    } else {
      arg1->BrokerIDByBank[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1BrokerIDByBank_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->BrokerIDByBank);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1OperNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OperNo, (const char *)arg2, 17-1);
      arg1->OperNo[17-1] = 0;
    } else {
      arg1->OperNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1OperNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->OperNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1RequestID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  TThostFtdcRequestIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  arg2 = (TThostFtdcRequestIDType)jarg2; 
  if (arg1) (arg1)->RequestID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1RequestID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  TThostFtdcRequestIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  result = (TThostFtdcRequestIDType) ((arg1)->RequestID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1TID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  TThostFtdcTIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  arg2 = (TThostFtdcTIDType)jarg2; 
  if (arg1) (arg1)->TID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcReqSyncKeyField_1TID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  TThostFtdcTIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  result = (TThostFtdcTIDType) ((arg1)->TID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcReqSyncKeyField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcReqSyncKeyField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcReqSyncKeyField *)new CThostFtdcReqSyncKeyField();
  *(CThostFtdcReqSyncKeyField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcReqSyncKeyField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcReqSyncKeyField *arg1 = (CThostFtdcReqSyncKeyField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcReqSyncKeyField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1TradeCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeCode, (const char *)arg2, 7-1);
      arg1->TradeCode[7-1] = 0;
    } else {
      arg1->TradeCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1TradeCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->TradeCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1BankBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBranchID, (const char *)arg2, 5-1);
      arg1->BankBranchID[5-1] = 0;
    } else {
      arg1->BankBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1BankBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->BankBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1BrokerBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerBranchID, (const char *)arg2, 31-1);
      arg1->BrokerBranchID[31-1] = 0;
    } else {
      arg1->BrokerBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1BrokerBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->BrokerBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1TradeDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeDate, (const char *)arg2, 9-1);
      arg1->TradeDate[9-1] = 0;
    } else {
      arg1->TradeDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1TradeDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->TradeDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1TradeTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeTime, (const char *)arg2, 9-1);
      arg1->TradeTime[9-1] = 0;
    } else {
      arg1->TradeTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1TradeTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->TradeTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1BankSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSerial, (const char *)arg2, 13-1);
      arg1->BankSerial[13-1] = 0;
    } else {
      arg1->BankSerial[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1BankSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->BankSerial);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1PlateSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  TThostFtdcSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  arg2 = (TThostFtdcSerialType)jarg2; 
  if (arg1) (arg1)->PlateSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1PlateSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  TThostFtdcSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  result = (TThostFtdcSerialType) ((arg1)->PlateSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1LastFragment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  TThostFtdcLastFragmentType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  arg2 = (TThostFtdcLastFragmentType)jarg2; 
  if (arg1) (arg1)->LastFragment = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1LastFragment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  TThostFtdcLastFragmentType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  result = (TThostFtdcLastFragmentType) ((arg1)->LastFragment);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1InstallID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  TThostFtdcInstallIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  arg2 = (TThostFtdcInstallIDType)jarg2; 
  if (arg1) (arg1)->InstallID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1InstallID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  TThostFtdcInstallIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  result = (TThostFtdcInstallIDType) ((arg1)->InstallID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1Message_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Message, (const char *)arg2, 129-1);
      arg1->Message[129-1] = 0;
    } else {
      arg1->Message[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1Message_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->Message);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1DeviceID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->DeviceID, (const char *)arg2, 3-1);
      arg1->DeviceID[3-1] = 0;
    } else {
      arg1->DeviceID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1DeviceID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->DeviceID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1BrokerIDByBank_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerIDByBank, (const char *)arg2, 33-1);
      arg1->BrokerIDByBank[33-1] = 0;
    } else {
      arg1->BrokerIDByBank[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1BrokerIDByBank_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->BrokerIDByBank);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1OperNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OperNo, (const char *)arg2, 17-1);
      arg1->OperNo[17-1] = 0;
    } else {
      arg1->OperNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1OperNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->OperNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1RequestID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  TThostFtdcRequestIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  arg2 = (TThostFtdcRequestIDType)jarg2; 
  if (arg1) (arg1)->RequestID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1RequestID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  TThostFtdcRequestIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  result = (TThostFtdcRequestIDType) ((arg1)->RequestID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1TID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  TThostFtdcTIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  arg2 = (TThostFtdcTIDType)jarg2; 
  if (arg1) (arg1)->TID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1TID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  TThostFtdcTIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  result = (TThostFtdcTIDType) ((arg1)->TID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1ErrorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  TThostFtdcErrorIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  arg2 = (TThostFtdcErrorIDType)jarg2; 
  if (arg1) (arg1)->ErrorID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1ErrorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  TThostFtdcErrorIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  result = (TThostFtdcErrorIDType) ((arg1)->ErrorID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1ErrorMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ErrorMsg, (const char *)arg2, 81-1);
      arg1->ErrorMsg[81-1] = 0;
    } else {
      arg1->ErrorMsg[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcRspSyncKeyField_1ErrorMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->ErrorMsg);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcRspSyncKeyField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcRspSyncKeyField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcRspSyncKeyField *)new CThostFtdcRspSyncKeyField();
  *(CThostFtdcRspSyncKeyField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcRspSyncKeyField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcRspSyncKeyField *arg1 = (CThostFtdcRspSyncKeyField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcRspSyncKeyField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1TradeCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeCode, (const char *)arg2, 7-1);
      arg1->TradeCode[7-1] = 0;
    } else {
      arg1->TradeCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1TradeCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradeCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1BankBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBranchID, (const char *)arg2, 5-1);
      arg1->BankBranchID[5-1] = 0;
    } else {
      arg1->BankBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1BankBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1BrokerBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerBranchID, (const char *)arg2, 31-1);
      arg1->BrokerBranchID[31-1] = 0;
    } else {
      arg1->BrokerBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1BrokerBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->BrokerBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1TradeDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeDate, (const char *)arg2, 9-1);
      arg1->TradeDate[9-1] = 0;
    } else {
      arg1->TradeDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1TradeDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradeDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1TradeTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeTime, (const char *)arg2, 9-1);
      arg1->TradeTime[9-1] = 0;
    } else {
      arg1->TradeTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1TradeTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradeTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1BankSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSerial, (const char *)arg2, 13-1);
      arg1->BankSerial[13-1] = 0;
    } else {
      arg1->BankSerial[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1BankSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankSerial);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1PlateSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcSerialType)jarg2; 
  if (arg1) (arg1)->PlateSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1PlateSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (TThostFtdcSerialType) ((arg1)->PlateSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1LastFragment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcLastFragmentType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcLastFragmentType)jarg2; 
  if (arg1) (arg1)->LastFragment = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1LastFragment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcLastFragmentType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (TThostFtdcLastFragmentType) ((arg1)->LastFragment);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1CustomerName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CustomerName, (const char *)arg2, 51-1);
      arg1->CustomerName[51-1] = 0;
    } else {
      arg1->CustomerName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1CustomerName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->CustomerName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1IdCardType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcIdCardTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcIdCardTypeType)jarg2; 
  if (arg1) (arg1)->IdCardType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1IdCardType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcIdCardTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (TThostFtdcIdCardTypeType) ((arg1)->IdCardType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1IdentifiedCardNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->IdentifiedCardNo, (const char *)arg2, 51-1);
      arg1->IdentifiedCardNo[51-1] = 0;
    } else {
      arg1->IdentifiedCardNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1IdentifiedCardNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->IdentifiedCardNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1CustType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcCustTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcCustTypeType)jarg2; 
  if (arg1) (arg1)->CustType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1CustType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcCustTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (TThostFtdcCustTypeType) ((arg1)->CustType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1BankAccount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankAccount, (const char *)arg2, 41-1);
      arg1->BankAccount[41-1] = 0;
    } else {
      arg1->BankAccount[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1BankAccount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankAccount);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1BankPassWord_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankPassWord, (const char *)arg2, 41-1);
      arg1->BankPassWord[41-1] = 0;
    } else {
      arg1->BankPassWord[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1BankPassWord_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankPassWord);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1AccountID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 13-1);
      arg1->AccountID[13-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1AccountID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->AccountID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1Password_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Password, (const char *)arg2, 41-1);
      arg1->Password[41-1] = 0;
    } else {
      arg1->Password[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1Password_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->Password);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1FutureSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcFutureSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcFutureSerialType)jarg2; 
  if (arg1) (arg1)->FutureSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1FutureSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcFutureSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (TThostFtdcFutureSerialType) ((arg1)->FutureSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1InstallID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcInstallIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcInstallIDType)jarg2; 
  if (arg1) (arg1)->InstallID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1InstallID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcInstallIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (TThostFtdcInstallIDType) ((arg1)->InstallID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1VerifyCertNoFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcYesNoIndicatorType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcYesNoIndicatorType)jarg2; 
  if (arg1) (arg1)->VerifyCertNoFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1VerifyCertNoFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcYesNoIndicatorType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (TThostFtdcYesNoIndicatorType) ((arg1)->VerifyCertNoFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1CurrencyID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrencyID, (const char *)arg2, 4-1);
      arg1->CurrencyID[4-1] = 0;
    } else {
      arg1->CurrencyID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1CurrencyID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->CurrencyID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1Digest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Digest, (const char *)arg2, 36-1);
      arg1->Digest[36-1] = 0;
    } else {
      arg1->Digest[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1Digest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->Digest);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1BankAccType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcBankAccTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcBankAccTypeType)jarg2; 
  if (arg1) (arg1)->BankAccType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1BankAccType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcBankAccTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (TThostFtdcBankAccTypeType) ((arg1)->BankAccType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1DeviceID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->DeviceID, (const char *)arg2, 3-1);
      arg1->DeviceID[3-1] = 0;
    } else {
      arg1->DeviceID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1DeviceID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->DeviceID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1BankSecuAccType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcBankAccTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcBankAccTypeType)jarg2; 
  if (arg1) (arg1)->BankSecuAccType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1BankSecuAccType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcBankAccTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (TThostFtdcBankAccTypeType) ((arg1)->BankSecuAccType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1BrokerIDByBank_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerIDByBank, (const char *)arg2, 33-1);
      arg1->BrokerIDByBank[33-1] = 0;
    } else {
      arg1->BrokerIDByBank[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1BrokerIDByBank_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->BrokerIDByBank);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1BankSecuAcc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSecuAcc, (const char *)arg2, 41-1);
      arg1->BankSecuAcc[41-1] = 0;
    } else {
      arg1->BankSecuAcc[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1BankSecuAcc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankSecuAcc);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1BankPwdFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcPwdFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcPwdFlagType)jarg2; 
  if (arg1) (arg1)->BankPwdFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1BankPwdFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcPwdFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (TThostFtdcPwdFlagType) ((arg1)->BankPwdFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1SecuPwdFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcPwdFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcPwdFlagType)jarg2; 
  if (arg1) (arg1)->SecuPwdFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1SecuPwdFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcPwdFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (TThostFtdcPwdFlagType) ((arg1)->SecuPwdFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1OperNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OperNo, (const char *)arg2, 17-1);
      arg1->OperNo[17-1] = 0;
    } else {
      arg1->OperNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1OperNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->OperNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1RequestID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcRequestIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcRequestIDType)jarg2; 
  if (arg1) (arg1)->RequestID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1RequestID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcRequestIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (TThostFtdcRequestIDType) ((arg1)->RequestID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1TID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcTIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcTIDType)jarg2; 
  if (arg1) (arg1)->TID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1TID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcTIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (TThostFtdcTIDType) ((arg1)->TID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1BankUseAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcTradeAmountType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcTradeAmountType)jarg2; 
  if (arg1) (arg1)->BankUseAmount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1BankUseAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcTradeAmountType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (TThostFtdcTradeAmountType) ((arg1)->BankUseAmount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1BankFetchAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcTradeAmountType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcTradeAmountType)jarg2; 
  if (arg1) (arg1)->BankFetchAmount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1BankFetchAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcTradeAmountType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (TThostFtdcTradeAmountType) ((arg1)->BankFetchAmount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1ErrorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcErrorIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = (TThostFtdcErrorIDType)jarg2; 
  if (arg1) (arg1)->ErrorID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1ErrorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  TThostFtdcErrorIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (TThostFtdcErrorIDType) ((arg1)->ErrorID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1ErrorMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ErrorMsg, (const char *)arg2, 81-1);
      arg1->ErrorMsg[81-1] = 0;
    } else {
      arg1->ErrorMsg[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyQueryAccountField_1ErrorMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  result = (char *) ((arg1)->ErrorMsg);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcNotifyQueryAccountField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcNotifyQueryAccountField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcNotifyQueryAccountField *)new CThostFtdcNotifyQueryAccountField();
  *(CThostFtdcNotifyQueryAccountField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcNotifyQueryAccountField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcNotifyQueryAccountField *arg1 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcNotifyQueryAccountField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1PlateSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  TThostFtdcPlateSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  arg2 = (TThostFtdcPlateSerialType)jarg2; 
  if (arg1) (arg1)->PlateSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1PlateSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  TThostFtdcPlateSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  result = (TThostFtdcPlateSerialType) ((arg1)->PlateSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1TradeDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeDate, (const char *)arg2, 9-1);
      arg1->TradeDate[9-1] = 0;
    } else {
      arg1->TradeDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1TradeDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  result = (char *) ((arg1)->TradeDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1TradeTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeTime, (const char *)arg2, 9-1);
      arg1->TradeTime[9-1] = 0;
    } else {
      arg1->TradeTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1TradeTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  result = (char *) ((arg1)->TradeTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1TradeCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeCode, (const char *)arg2, 7-1);
      arg1->TradeCode[7-1] = 0;
    } else {
      arg1->TradeCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1TradeCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  result = (char *) ((arg1)->TradeCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1BankBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBranchID, (const char *)arg2, 5-1);
      arg1->BankBranchID[5-1] = 0;
    } else {
      arg1->BankBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1BankBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  result = (char *) ((arg1)->BankBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1BankAccType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  TThostFtdcBankAccTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  arg2 = (TThostFtdcBankAccTypeType)jarg2; 
  if (arg1) (arg1)->BankAccType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1BankAccType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  TThostFtdcBankAccTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  result = (TThostFtdcBankAccTypeType) ((arg1)->BankAccType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1BankAccount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankAccount, (const char *)arg2, 41-1);
      arg1->BankAccount[41-1] = 0;
    } else {
      arg1->BankAccount[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1BankAccount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  result = (char *) ((arg1)->BankAccount);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1BankSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSerial, (const char *)arg2, 13-1);
      arg1->BankSerial[13-1] = 0;
    } else {
      arg1->BankSerial[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1BankSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  result = (char *) ((arg1)->BankSerial);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1BrokerBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerBranchID, (const char *)arg2, 31-1);
      arg1->BrokerBranchID[31-1] = 0;
    } else {
      arg1->BrokerBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1BrokerBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  result = (char *) ((arg1)->BrokerBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1FutureAccType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  TThostFtdcFutureAccTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  arg2 = (TThostFtdcFutureAccTypeType)jarg2; 
  if (arg1) (arg1)->FutureAccType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1FutureAccType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  TThostFtdcFutureAccTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  result = (TThostFtdcFutureAccTypeType) ((arg1)->FutureAccType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1AccountID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 13-1);
      arg1->AccountID[13-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1AccountID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  result = (char *) ((arg1)->AccountID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1FutureSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  TThostFtdcFutureSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  arg2 = (TThostFtdcFutureSerialType)jarg2; 
  if (arg1) (arg1)->FutureSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1FutureSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  TThostFtdcFutureSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  result = (TThostFtdcFutureSerialType) ((arg1)->FutureSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1IdCardType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  TThostFtdcIdCardTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  arg2 = (TThostFtdcIdCardTypeType)jarg2; 
  if (arg1) (arg1)->IdCardType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1IdCardType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  TThostFtdcIdCardTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  result = (TThostFtdcIdCardTypeType) ((arg1)->IdCardType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1IdentifiedCardNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->IdentifiedCardNo, (const char *)arg2, 51-1);
      arg1->IdentifiedCardNo[51-1] = 0;
    } else {
      arg1->IdentifiedCardNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1IdentifiedCardNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  result = (char *) ((arg1)->IdentifiedCardNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1CurrencyID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrencyID, (const char *)arg2, 4-1);
      arg1->CurrencyID[4-1] = 0;
    } else {
      arg1->CurrencyID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1CurrencyID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  result = (char *) ((arg1)->CurrencyID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1TradeAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  TThostFtdcTradeAmountType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  arg2 = (TThostFtdcTradeAmountType)jarg2; 
  if (arg1) (arg1)->TradeAmount = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1TradeAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  TThostFtdcTradeAmountType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  result = (TThostFtdcTradeAmountType) ((arg1)->TradeAmount);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1CustFee_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  TThostFtdcCustFeeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  arg2 = (TThostFtdcCustFeeType)jarg2; 
  if (arg1) (arg1)->CustFee = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1CustFee_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  TThostFtdcCustFeeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  result = (TThostFtdcCustFeeType) ((arg1)->CustFee);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1BrokerFee_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  TThostFtdcFutureFeeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  arg2 = (TThostFtdcFutureFeeType)jarg2; 
  if (arg1) (arg1)->BrokerFee = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1BrokerFee_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  TThostFtdcFutureFeeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  result = (TThostFtdcFutureFeeType) ((arg1)->BrokerFee);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1AvailabilityFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  TThostFtdcAvailabilityFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  arg2 = (TThostFtdcAvailabilityFlagType)jarg2; 
  if (arg1) (arg1)->AvailabilityFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1AvailabilityFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  TThostFtdcAvailabilityFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  result = (TThostFtdcAvailabilityFlagType) ((arg1)->AvailabilityFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1OperatorCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OperatorCode, (const char *)arg2, 17-1);
      arg1->OperatorCode[17-1] = 0;
    } else {
      arg1->OperatorCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1OperatorCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  result = (char *) ((arg1)->OperatorCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1BankNewAccount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankNewAccount, (const char *)arg2, 41-1);
      arg1->BankNewAccount[41-1] = 0;
    } else {
      arg1->BankNewAccount[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1BankNewAccount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  result = (char *) ((arg1)->BankNewAccount);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1ErrorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  TThostFtdcErrorIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  arg2 = (TThostFtdcErrorIDType)jarg2; 
  if (arg1) (arg1)->ErrorID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1ErrorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  TThostFtdcErrorIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  result = (TThostFtdcErrorIDType) ((arg1)->ErrorID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1ErrorMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ErrorMsg, (const char *)arg2, 81-1);
      arg1->ErrorMsg[81-1] = 0;
    } else {
      arg1->ErrorMsg[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTransferSerialField_1ErrorMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  result = (char *) ((arg1)->ErrorMsg);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcTransferSerialField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcTransferSerialField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcTransferSerialField *)new CThostFtdcTransferSerialField();
  *(CThostFtdcTransferSerialField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcTransferSerialField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcTransferSerialField *arg1 = (CThostFtdcTransferSerialField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcTransferSerialField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTransferSerialField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryTransferSerialField *arg1 = (CThostFtdcQryTransferSerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTransferSerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTransferSerialField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryTransferSerialField *arg1 = (CThostFtdcQryTransferSerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTransferSerialField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTransferSerialField_1AccountID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryTransferSerialField *arg1 = (CThostFtdcQryTransferSerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTransferSerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 13-1);
      arg1->AccountID[13-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTransferSerialField_1AccountID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryTransferSerialField *arg1 = (CThostFtdcQryTransferSerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTransferSerialField **)&jarg1; 
  result = (char *) ((arg1)->AccountID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTransferSerialField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryTransferSerialField *arg1 = (CThostFtdcQryTransferSerialField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTransferSerialField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryTransferSerialField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryTransferSerialField *arg1 = (CThostFtdcQryTransferSerialField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryTransferSerialField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryTransferSerialField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryTransferSerialField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryTransferSerialField *)new CThostFtdcQryTransferSerialField();
  *(CThostFtdcQryTransferSerialField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryTransferSerialField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryTransferSerialField *arg1 = (CThostFtdcQryTransferSerialField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryTransferSerialField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1TradeCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeCode, (const char *)arg2, 7-1);
      arg1->TradeCode[7-1] = 0;
    } else {
      arg1->TradeCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1TradeCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->TradeCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1BankBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBranchID, (const char *)arg2, 5-1);
      arg1->BankBranchID[5-1] = 0;
    } else {
      arg1->BankBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1BankBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->BankBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1BrokerBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerBranchID, (const char *)arg2, 31-1);
      arg1->BrokerBranchID[31-1] = 0;
    } else {
      arg1->BrokerBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1BrokerBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->BrokerBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1TradeDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeDate, (const char *)arg2, 9-1);
      arg1->TradeDate[9-1] = 0;
    } else {
      arg1->TradeDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1TradeDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->TradeDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1TradeTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeTime, (const char *)arg2, 9-1);
      arg1->TradeTime[9-1] = 0;
    } else {
      arg1->TradeTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1TradeTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->TradeTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1BankSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSerial, (const char *)arg2, 13-1);
      arg1->BankSerial[13-1] = 0;
    } else {
      arg1->BankSerial[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1BankSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->BankSerial);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1PlateSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  TThostFtdcSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  arg2 = (TThostFtdcSerialType)jarg2; 
  if (arg1) (arg1)->PlateSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1PlateSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  TThostFtdcSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  result = (TThostFtdcSerialType) ((arg1)->PlateSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1LastFragment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  TThostFtdcLastFragmentType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  arg2 = (TThostFtdcLastFragmentType)jarg2; 
  if (arg1) (arg1)->LastFragment = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1LastFragment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  TThostFtdcLastFragmentType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  result = (TThostFtdcLastFragmentType) ((arg1)->LastFragment);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1InstallID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  TThostFtdcInstallIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  arg2 = (TThostFtdcInstallIDType)jarg2; 
  if (arg1) (arg1)->InstallID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1InstallID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  TThostFtdcInstallIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  result = (TThostFtdcInstallIDType) ((arg1)->InstallID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1Digest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Digest, (const char *)arg2, 36-1);
      arg1->Digest[36-1] = 0;
    } else {
      arg1->Digest[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1Digest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->Digest);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1CurrencyID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrencyID, (const char *)arg2, 4-1);
      arg1->CurrencyID[4-1] = 0;
    } else {
      arg1->CurrencyID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1CurrencyID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->CurrencyID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1DeviceID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->DeviceID, (const char *)arg2, 3-1);
      arg1->DeviceID[3-1] = 0;
    } else {
      arg1->DeviceID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1DeviceID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->DeviceID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1BrokerIDByBank_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerIDByBank, (const char *)arg2, 33-1);
      arg1->BrokerIDByBank[33-1] = 0;
    } else {
      arg1->BrokerIDByBank[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1BrokerIDByBank_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->BrokerIDByBank);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1OperNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OperNo, (const char *)arg2, 17-1);
      arg1->OperNo[17-1] = 0;
    } else {
      arg1->OperNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1OperNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->OperNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1RequestID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  TThostFtdcRequestIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  arg2 = (TThostFtdcRequestIDType)jarg2; 
  if (arg1) (arg1)->RequestID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1RequestID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  TThostFtdcRequestIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  result = (TThostFtdcRequestIDType) ((arg1)->RequestID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1TID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  TThostFtdcTIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  arg2 = (TThostFtdcTIDType)jarg2; 
  if (arg1) (arg1)->TID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1TID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  TThostFtdcTIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  result = (TThostFtdcTIDType) ((arg1)->TID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1ErrorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  TThostFtdcErrorIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  arg2 = (TThostFtdcErrorIDType)jarg2; 
  if (arg1) (arg1)->ErrorID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1ErrorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  TThostFtdcErrorIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  result = (TThostFtdcErrorIDType) ((arg1)->ErrorID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1ErrorMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ErrorMsg, (const char *)arg2, 81-1);
      arg1->ErrorMsg[81-1] = 0;
    } else {
      arg1->ErrorMsg[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1ErrorMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->ErrorMsg);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1PinKey_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->PinKey, (const char *)arg2, 129-1);
      arg1->PinKey[129-1] = 0;
    } else {
      arg1->PinKey[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1PinKey_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->PinKey);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1MacKey_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->MacKey, (const char *)arg2, 129-1);
      arg1->MacKey[129-1] = 0;
    } else {
      arg1->MacKey[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignInField_1MacKey_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  result = (char *) ((arg1)->MacKey);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcNotifyFutureSignInField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcNotifyFutureSignInField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcNotifyFutureSignInField *)new CThostFtdcNotifyFutureSignInField();
  *(CThostFtdcNotifyFutureSignInField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcNotifyFutureSignInField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcNotifyFutureSignInField *arg1 = (CThostFtdcNotifyFutureSignInField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcNotifyFutureSignInField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1TradeCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeCode, (const char *)arg2, 7-1);
      arg1->TradeCode[7-1] = 0;
    } else {
      arg1->TradeCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1TradeCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->TradeCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1BankBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBranchID, (const char *)arg2, 5-1);
      arg1->BankBranchID[5-1] = 0;
    } else {
      arg1->BankBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1BankBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->BankBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1BrokerBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerBranchID, (const char *)arg2, 31-1);
      arg1->BrokerBranchID[31-1] = 0;
    } else {
      arg1->BrokerBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1BrokerBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->BrokerBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1TradeDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeDate, (const char *)arg2, 9-1);
      arg1->TradeDate[9-1] = 0;
    } else {
      arg1->TradeDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1TradeDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->TradeDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1TradeTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeTime, (const char *)arg2, 9-1);
      arg1->TradeTime[9-1] = 0;
    } else {
      arg1->TradeTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1TradeTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->TradeTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1BankSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSerial, (const char *)arg2, 13-1);
      arg1->BankSerial[13-1] = 0;
    } else {
      arg1->BankSerial[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1BankSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->BankSerial);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1PlateSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  TThostFtdcSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  arg2 = (TThostFtdcSerialType)jarg2; 
  if (arg1) (arg1)->PlateSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1PlateSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  TThostFtdcSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  result = (TThostFtdcSerialType) ((arg1)->PlateSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1LastFragment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  TThostFtdcLastFragmentType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  arg2 = (TThostFtdcLastFragmentType)jarg2; 
  if (arg1) (arg1)->LastFragment = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1LastFragment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  TThostFtdcLastFragmentType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  result = (TThostFtdcLastFragmentType) ((arg1)->LastFragment);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1InstallID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  TThostFtdcInstallIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  arg2 = (TThostFtdcInstallIDType)jarg2; 
  if (arg1) (arg1)->InstallID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1InstallID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  TThostFtdcInstallIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  result = (TThostFtdcInstallIDType) ((arg1)->InstallID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1Digest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Digest, (const char *)arg2, 36-1);
      arg1->Digest[36-1] = 0;
    } else {
      arg1->Digest[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1Digest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->Digest);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1CurrencyID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrencyID, (const char *)arg2, 4-1);
      arg1->CurrencyID[4-1] = 0;
    } else {
      arg1->CurrencyID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1CurrencyID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->CurrencyID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1DeviceID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->DeviceID, (const char *)arg2, 3-1);
      arg1->DeviceID[3-1] = 0;
    } else {
      arg1->DeviceID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1DeviceID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->DeviceID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1BrokerIDByBank_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerIDByBank, (const char *)arg2, 33-1);
      arg1->BrokerIDByBank[33-1] = 0;
    } else {
      arg1->BrokerIDByBank[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1BrokerIDByBank_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->BrokerIDByBank);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1OperNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OperNo, (const char *)arg2, 17-1);
      arg1->OperNo[17-1] = 0;
    } else {
      arg1->OperNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1OperNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->OperNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1RequestID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  TThostFtdcRequestIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  arg2 = (TThostFtdcRequestIDType)jarg2; 
  if (arg1) (arg1)->RequestID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1RequestID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  TThostFtdcRequestIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  result = (TThostFtdcRequestIDType) ((arg1)->RequestID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1TID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  TThostFtdcTIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  arg2 = (TThostFtdcTIDType)jarg2; 
  if (arg1) (arg1)->TID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1TID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  TThostFtdcTIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  result = (TThostFtdcTIDType) ((arg1)->TID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1ErrorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  TThostFtdcErrorIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  arg2 = (TThostFtdcErrorIDType)jarg2; 
  if (arg1) (arg1)->ErrorID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1ErrorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  TThostFtdcErrorIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  result = (TThostFtdcErrorIDType) ((arg1)->ErrorID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1ErrorMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ErrorMsg, (const char *)arg2, 81-1);
      arg1->ErrorMsg[81-1] = 0;
    } else {
      arg1->ErrorMsg[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifyFutureSignOutField_1ErrorMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  result = (char *) ((arg1)->ErrorMsg);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcNotifyFutureSignOutField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcNotifyFutureSignOutField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcNotifyFutureSignOutField *)new CThostFtdcNotifyFutureSignOutField();
  *(CThostFtdcNotifyFutureSignOutField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcNotifyFutureSignOutField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcNotifyFutureSignOutField *arg1 = (CThostFtdcNotifyFutureSignOutField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcNotifyFutureSignOutField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1TradeCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeCode, (const char *)arg2, 7-1);
      arg1->TradeCode[7-1] = 0;
    } else {
      arg1->TradeCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1TradeCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->TradeCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1BankBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBranchID, (const char *)arg2, 5-1);
      arg1->BankBranchID[5-1] = 0;
    } else {
      arg1->BankBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1BankBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->BankBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1BrokerBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerBranchID, (const char *)arg2, 31-1);
      arg1->BrokerBranchID[31-1] = 0;
    } else {
      arg1->BrokerBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1BrokerBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->BrokerBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1TradeDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeDate, (const char *)arg2, 9-1);
      arg1->TradeDate[9-1] = 0;
    } else {
      arg1->TradeDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1TradeDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->TradeDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1TradeTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeTime, (const char *)arg2, 9-1);
      arg1->TradeTime[9-1] = 0;
    } else {
      arg1->TradeTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1TradeTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->TradeTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1BankSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSerial, (const char *)arg2, 13-1);
      arg1->BankSerial[13-1] = 0;
    } else {
      arg1->BankSerial[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1BankSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->BankSerial);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1PlateSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  TThostFtdcSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  arg2 = (TThostFtdcSerialType)jarg2; 
  if (arg1) (arg1)->PlateSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1PlateSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  TThostFtdcSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  result = (TThostFtdcSerialType) ((arg1)->PlateSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1LastFragment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  TThostFtdcLastFragmentType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  arg2 = (TThostFtdcLastFragmentType)jarg2; 
  if (arg1) (arg1)->LastFragment = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1LastFragment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  TThostFtdcLastFragmentType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  result = (TThostFtdcLastFragmentType) ((arg1)->LastFragment);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1InstallID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  TThostFtdcInstallIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  arg2 = (TThostFtdcInstallIDType)jarg2; 
  if (arg1) (arg1)->InstallID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1InstallID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  TThostFtdcInstallIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  result = (TThostFtdcInstallIDType) ((arg1)->InstallID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1Message_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Message, (const char *)arg2, 129-1);
      arg1->Message[129-1] = 0;
    } else {
      arg1->Message[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1Message_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->Message);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1DeviceID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->DeviceID, (const char *)arg2, 3-1);
      arg1->DeviceID[3-1] = 0;
    } else {
      arg1->DeviceID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1DeviceID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->DeviceID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1BrokerIDByBank_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerIDByBank, (const char *)arg2, 33-1);
      arg1->BrokerIDByBank[33-1] = 0;
    } else {
      arg1->BrokerIDByBank[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1BrokerIDByBank_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->BrokerIDByBank);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1OperNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OperNo, (const char *)arg2, 17-1);
      arg1->OperNo[17-1] = 0;
    } else {
      arg1->OperNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1OperNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->OperNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1RequestID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  TThostFtdcRequestIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  arg2 = (TThostFtdcRequestIDType)jarg2; 
  if (arg1) (arg1)->RequestID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1RequestID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  TThostFtdcRequestIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  result = (TThostFtdcRequestIDType) ((arg1)->RequestID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1TID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  TThostFtdcTIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  arg2 = (TThostFtdcTIDType)jarg2; 
  if (arg1) (arg1)->TID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1TID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  TThostFtdcTIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  result = (TThostFtdcTIDType) ((arg1)->TID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1ErrorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  TThostFtdcErrorIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  arg2 = (TThostFtdcErrorIDType)jarg2; 
  if (arg1) (arg1)->ErrorID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1ErrorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  TThostFtdcErrorIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  result = (TThostFtdcErrorIDType) ((arg1)->ErrorID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1ErrorMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ErrorMsg, (const char *)arg2, 81-1);
      arg1->ErrorMsg[81-1] = 0;
    } else {
      arg1->ErrorMsg[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcNotifySyncKeyField_1ErrorMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  result = (char *) ((arg1)->ErrorMsg);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcNotifySyncKeyField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcNotifySyncKeyField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcNotifySyncKeyField *)new CThostFtdcNotifySyncKeyField();
  *(CThostFtdcNotifySyncKeyField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcNotifySyncKeyField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcNotifySyncKeyField *arg1 = (CThostFtdcNotifySyncKeyField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcNotifySyncKeyField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryAccountregisterField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryAccountregisterField *arg1 = (CThostFtdcQryAccountregisterField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryAccountregisterField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryAccountregisterField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryAccountregisterField *arg1 = (CThostFtdcQryAccountregisterField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryAccountregisterField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryAccountregisterField_1AccountID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryAccountregisterField *arg1 = (CThostFtdcQryAccountregisterField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryAccountregisterField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 13-1);
      arg1->AccountID[13-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryAccountregisterField_1AccountID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryAccountregisterField *arg1 = (CThostFtdcQryAccountregisterField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryAccountregisterField **)&jarg1; 
  result = (char *) ((arg1)->AccountID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryAccountregisterField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryAccountregisterField *arg1 = (CThostFtdcQryAccountregisterField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryAccountregisterField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryAccountregisterField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryAccountregisterField *arg1 = (CThostFtdcQryAccountregisterField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryAccountregisterField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryAccountregisterField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryAccountregisterField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryAccountregisterField *)new CThostFtdcQryAccountregisterField();
  *(CThostFtdcQryAccountregisterField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryAccountregisterField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryAccountregisterField *arg1 = (CThostFtdcQryAccountregisterField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryAccountregisterField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1TradeDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeDay, (const char *)arg2, 9-1);
      arg1->TradeDay[9-1] = 0;
    } else {
      arg1->TradeDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1TradeDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  result = (char *) ((arg1)->TradeDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1BankBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBranchID, (const char *)arg2, 5-1);
      arg1->BankBranchID[5-1] = 0;
    } else {
      arg1->BankBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1BankBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  result = (char *) ((arg1)->BankBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1BankAccount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankAccount, (const char *)arg2, 41-1);
      arg1->BankAccount[41-1] = 0;
    } else {
      arg1->BankAccount[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1BankAccount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  result = (char *) ((arg1)->BankAccount);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1BrokerBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerBranchID, (const char *)arg2, 31-1);
      arg1->BrokerBranchID[31-1] = 0;
    } else {
      arg1->BrokerBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1BrokerBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  result = (char *) ((arg1)->BrokerBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1AccountID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 13-1);
      arg1->AccountID[13-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1AccountID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  result = (char *) ((arg1)->AccountID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1IdCardType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  TThostFtdcIdCardTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  arg2 = (TThostFtdcIdCardTypeType)jarg2; 
  if (arg1) (arg1)->IdCardType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1IdCardType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  TThostFtdcIdCardTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  result = (TThostFtdcIdCardTypeType) ((arg1)->IdCardType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1IdentifiedCardNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->IdentifiedCardNo, (const char *)arg2, 51-1);
      arg1->IdentifiedCardNo[51-1] = 0;
    } else {
      arg1->IdentifiedCardNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1IdentifiedCardNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  result = (char *) ((arg1)->IdentifiedCardNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1CustomerName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CustomerName, (const char *)arg2, 51-1);
      arg1->CustomerName[51-1] = 0;
    } else {
      arg1->CustomerName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1CustomerName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  result = (char *) ((arg1)->CustomerName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1CurrencyID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrencyID, (const char *)arg2, 4-1);
      arg1->CurrencyID[4-1] = 0;
    } else {
      arg1->CurrencyID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1CurrencyID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  result = (char *) ((arg1)->CurrencyID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1OpenOrDestroy_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  TThostFtdcOpenOrDestroyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  arg2 = (TThostFtdcOpenOrDestroyType)jarg2; 
  if (arg1) (arg1)->OpenOrDestroy = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1OpenOrDestroy_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  TThostFtdcOpenOrDestroyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  result = (TThostFtdcOpenOrDestroyType) ((arg1)->OpenOrDestroy);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1RegDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->RegDate, (const char *)arg2, 9-1);
      arg1->RegDate[9-1] = 0;
    } else {
      arg1->RegDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1RegDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  result = (char *) ((arg1)->RegDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1OutDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OutDate, (const char *)arg2, 9-1);
      arg1->OutDate[9-1] = 0;
    } else {
      arg1->OutDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1OutDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  result = (char *) ((arg1)->OutDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1TID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  TThostFtdcTIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  arg2 = (TThostFtdcTIDType)jarg2; 
  if (arg1) (arg1)->TID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1TID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  TThostFtdcTIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  result = (TThostFtdcTIDType) ((arg1)->TID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1CustType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  TThostFtdcCustTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  arg2 = (TThostFtdcCustTypeType)jarg2; 
  if (arg1) (arg1)->CustType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1CustType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  TThostFtdcCustTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  result = (TThostFtdcCustTypeType) ((arg1)->CustType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1BankAccType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  TThostFtdcBankAccTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  arg2 = (TThostFtdcBankAccTypeType)jarg2; 
  if (arg1) (arg1)->BankAccType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcAccountregisterField_1BankAccType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  TThostFtdcBankAccTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  result = (TThostFtdcBankAccTypeType) ((arg1)->BankAccType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcAccountregisterField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcAccountregisterField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcAccountregisterField *)new CThostFtdcAccountregisterField();
  *(CThostFtdcAccountregisterField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcAccountregisterField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcAccountregisterField *arg1 = (CThostFtdcAccountregisterField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcAccountregisterField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1TradeCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeCode, (const char *)arg2, 7-1);
      arg1->TradeCode[7-1] = 0;
    } else {
      arg1->TradeCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1TradeCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradeCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1BankBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBranchID, (const char *)arg2, 5-1);
      arg1->BankBranchID[5-1] = 0;
    } else {
      arg1->BankBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1BankBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1BrokerBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerBranchID, (const char *)arg2, 31-1);
      arg1->BrokerBranchID[31-1] = 0;
    } else {
      arg1->BrokerBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1BrokerBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->BrokerBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1TradeDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeDate, (const char *)arg2, 9-1);
      arg1->TradeDate[9-1] = 0;
    } else {
      arg1->TradeDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1TradeDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradeDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1TradeTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeTime, (const char *)arg2, 9-1);
      arg1->TradeTime[9-1] = 0;
    } else {
      arg1->TradeTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1TradeTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradeTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1BankSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSerial, (const char *)arg2, 13-1);
      arg1->BankSerial[13-1] = 0;
    } else {
      arg1->BankSerial[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1BankSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankSerial);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1PlateSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  TThostFtdcSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = (TThostFtdcSerialType)jarg2; 
  if (arg1) (arg1)->PlateSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1PlateSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  TThostFtdcSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (TThostFtdcSerialType) ((arg1)->PlateSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1LastFragment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  TThostFtdcLastFragmentType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = (TThostFtdcLastFragmentType)jarg2; 
  if (arg1) (arg1)->LastFragment = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1LastFragment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  TThostFtdcLastFragmentType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (TThostFtdcLastFragmentType) ((arg1)->LastFragment);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1CustomerName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CustomerName, (const char *)arg2, 51-1);
      arg1->CustomerName[51-1] = 0;
    } else {
      arg1->CustomerName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1CustomerName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->CustomerName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1IdCardType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  TThostFtdcIdCardTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = (TThostFtdcIdCardTypeType)jarg2; 
  if (arg1) (arg1)->IdCardType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1IdCardType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  TThostFtdcIdCardTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (TThostFtdcIdCardTypeType) ((arg1)->IdCardType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1IdentifiedCardNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->IdentifiedCardNo, (const char *)arg2, 51-1);
      arg1->IdentifiedCardNo[51-1] = 0;
    } else {
      arg1->IdentifiedCardNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1IdentifiedCardNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->IdentifiedCardNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1Gender_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  TThostFtdcGenderType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = (TThostFtdcGenderType)jarg2; 
  if (arg1) (arg1)->Gender = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1Gender_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  TThostFtdcGenderType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (TThostFtdcGenderType) ((arg1)->Gender);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1CountryCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CountryCode, (const char *)arg2, 21-1);
      arg1->CountryCode[21-1] = 0;
    } else {
      arg1->CountryCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1CountryCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->CountryCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1CustType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  TThostFtdcCustTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = (TThostFtdcCustTypeType)jarg2; 
  if (arg1) (arg1)->CustType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1CustType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  TThostFtdcCustTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (TThostFtdcCustTypeType) ((arg1)->CustType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1Address_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Address, (const char *)arg2, 101-1);
      arg1->Address[101-1] = 0;
    } else {
      arg1->Address[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1Address_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->Address);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1ZipCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ZipCode, (const char *)arg2, 7-1);
      arg1->ZipCode[7-1] = 0;
    } else {
      arg1->ZipCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1ZipCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->ZipCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1Telephone_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Telephone, (const char *)arg2, 41-1);
      arg1->Telephone[41-1] = 0;
    } else {
      arg1->Telephone[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1Telephone_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->Telephone);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1MobilePhone_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->MobilePhone, (const char *)arg2, 21-1);
      arg1->MobilePhone[21-1] = 0;
    } else {
      arg1->MobilePhone[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1MobilePhone_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->MobilePhone);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1Fax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Fax, (const char *)arg2, 41-1);
      arg1->Fax[41-1] = 0;
    } else {
      arg1->Fax[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1Fax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->Fax);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1EMail_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->EMail, (const char *)arg2, 41-1);
      arg1->EMail[41-1] = 0;
    } else {
      arg1->EMail[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1EMail_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->EMail);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1MoneyAccountStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  TThostFtdcMoneyAccountStatusType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyAccountStatusType)jarg2; 
  if (arg1) (arg1)->MoneyAccountStatus = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1MoneyAccountStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  TThostFtdcMoneyAccountStatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (TThostFtdcMoneyAccountStatusType) ((arg1)->MoneyAccountStatus);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1BankAccount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankAccount, (const char *)arg2, 41-1);
      arg1->BankAccount[41-1] = 0;
    } else {
      arg1->BankAccount[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1BankAccount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankAccount);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1BankPassWord_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankPassWord, (const char *)arg2, 41-1);
      arg1->BankPassWord[41-1] = 0;
    } else {
      arg1->BankPassWord[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1BankPassWord_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankPassWord);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1AccountID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 13-1);
      arg1->AccountID[13-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1AccountID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->AccountID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1Password_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Password, (const char *)arg2, 41-1);
      arg1->Password[41-1] = 0;
    } else {
      arg1->Password[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1Password_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->Password);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1InstallID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  TThostFtdcInstallIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = (TThostFtdcInstallIDType)jarg2; 
  if (arg1) (arg1)->InstallID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1InstallID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  TThostFtdcInstallIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (TThostFtdcInstallIDType) ((arg1)->InstallID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1VerifyCertNoFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  TThostFtdcYesNoIndicatorType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = (TThostFtdcYesNoIndicatorType)jarg2; 
  if (arg1) (arg1)->VerifyCertNoFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1VerifyCertNoFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  TThostFtdcYesNoIndicatorType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (TThostFtdcYesNoIndicatorType) ((arg1)->VerifyCertNoFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1CurrencyID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrencyID, (const char *)arg2, 4-1);
      arg1->CurrencyID[4-1] = 0;
    } else {
      arg1->CurrencyID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1CurrencyID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->CurrencyID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1CashExchangeCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  TThostFtdcCashExchangeCodeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = (TThostFtdcCashExchangeCodeType)jarg2; 
  if (arg1) (arg1)->CashExchangeCode = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1CashExchangeCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  TThostFtdcCashExchangeCodeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (TThostFtdcCashExchangeCodeType) ((arg1)->CashExchangeCode);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1Digest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Digest, (const char *)arg2, 36-1);
      arg1->Digest[36-1] = 0;
    } else {
      arg1->Digest[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1Digest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->Digest);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1BankAccType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  TThostFtdcBankAccTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = (TThostFtdcBankAccTypeType)jarg2; 
  if (arg1) (arg1)->BankAccType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1BankAccType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  TThostFtdcBankAccTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (TThostFtdcBankAccTypeType) ((arg1)->BankAccType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1DeviceID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->DeviceID, (const char *)arg2, 3-1);
      arg1->DeviceID[3-1] = 0;
    } else {
      arg1->DeviceID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1DeviceID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->DeviceID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1BankSecuAccType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  TThostFtdcBankAccTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = (TThostFtdcBankAccTypeType)jarg2; 
  if (arg1) (arg1)->BankSecuAccType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1BankSecuAccType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  TThostFtdcBankAccTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (TThostFtdcBankAccTypeType) ((arg1)->BankSecuAccType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1BrokerIDByBank_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerIDByBank, (const char *)arg2, 33-1);
      arg1->BrokerIDByBank[33-1] = 0;
    } else {
      arg1->BrokerIDByBank[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1BrokerIDByBank_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->BrokerIDByBank);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1BankSecuAcc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSecuAcc, (const char *)arg2, 41-1);
      arg1->BankSecuAcc[41-1] = 0;
    } else {
      arg1->BankSecuAcc[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1BankSecuAcc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankSecuAcc);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1BankPwdFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  TThostFtdcPwdFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = (TThostFtdcPwdFlagType)jarg2; 
  if (arg1) (arg1)->BankPwdFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1BankPwdFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  TThostFtdcPwdFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (TThostFtdcPwdFlagType) ((arg1)->BankPwdFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1SecuPwdFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  TThostFtdcPwdFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = (TThostFtdcPwdFlagType)jarg2; 
  if (arg1) (arg1)->SecuPwdFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1SecuPwdFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  TThostFtdcPwdFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (TThostFtdcPwdFlagType) ((arg1)->SecuPwdFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1OperNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OperNo, (const char *)arg2, 17-1);
      arg1->OperNo[17-1] = 0;
    } else {
      arg1->OperNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1OperNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->OperNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1TID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  TThostFtdcTIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = (TThostFtdcTIDType)jarg2; 
  if (arg1) (arg1)->TID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1TID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  TThostFtdcTIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (TThostFtdcTIDType) ((arg1)->TID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1ErrorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  TThostFtdcErrorIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = (TThostFtdcErrorIDType)jarg2; 
  if (arg1) (arg1)->ErrorID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1ErrorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  TThostFtdcErrorIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (TThostFtdcErrorIDType) ((arg1)->ErrorID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1ErrorMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ErrorMsg, (const char *)arg2, 81-1);
      arg1->ErrorMsg[81-1] = 0;
    } else {
      arg1->ErrorMsg[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcOpenAccountField_1ErrorMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  result = (char *) ((arg1)->ErrorMsg);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcOpenAccountField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcOpenAccountField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcOpenAccountField *)new CThostFtdcOpenAccountField();
  *(CThostFtdcOpenAccountField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcOpenAccountField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcOpenAccountField *arg1 = (CThostFtdcOpenAccountField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcOpenAccountField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1TradeCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeCode, (const char *)arg2, 7-1);
      arg1->TradeCode[7-1] = 0;
    } else {
      arg1->TradeCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1TradeCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradeCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1BankBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBranchID, (const char *)arg2, 5-1);
      arg1->BankBranchID[5-1] = 0;
    } else {
      arg1->BankBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1BankBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1BrokerBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerBranchID, (const char *)arg2, 31-1);
      arg1->BrokerBranchID[31-1] = 0;
    } else {
      arg1->BrokerBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1BrokerBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->BrokerBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1TradeDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeDate, (const char *)arg2, 9-1);
      arg1->TradeDate[9-1] = 0;
    } else {
      arg1->TradeDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1TradeDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradeDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1TradeTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeTime, (const char *)arg2, 9-1);
      arg1->TradeTime[9-1] = 0;
    } else {
      arg1->TradeTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1TradeTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradeTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1BankSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSerial, (const char *)arg2, 13-1);
      arg1->BankSerial[13-1] = 0;
    } else {
      arg1->BankSerial[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1BankSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankSerial);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1PlateSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  TThostFtdcSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = (TThostFtdcSerialType)jarg2; 
  if (arg1) (arg1)->PlateSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1PlateSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  TThostFtdcSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (TThostFtdcSerialType) ((arg1)->PlateSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1LastFragment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  TThostFtdcLastFragmentType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = (TThostFtdcLastFragmentType)jarg2; 
  if (arg1) (arg1)->LastFragment = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1LastFragment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  TThostFtdcLastFragmentType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (TThostFtdcLastFragmentType) ((arg1)->LastFragment);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1CustomerName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CustomerName, (const char *)arg2, 51-1);
      arg1->CustomerName[51-1] = 0;
    } else {
      arg1->CustomerName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1CustomerName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->CustomerName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1IdCardType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  TThostFtdcIdCardTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = (TThostFtdcIdCardTypeType)jarg2; 
  if (arg1) (arg1)->IdCardType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1IdCardType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  TThostFtdcIdCardTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (TThostFtdcIdCardTypeType) ((arg1)->IdCardType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1IdentifiedCardNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->IdentifiedCardNo, (const char *)arg2, 51-1);
      arg1->IdentifiedCardNo[51-1] = 0;
    } else {
      arg1->IdentifiedCardNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1IdentifiedCardNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->IdentifiedCardNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1Gender_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  TThostFtdcGenderType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = (TThostFtdcGenderType)jarg2; 
  if (arg1) (arg1)->Gender = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1Gender_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  TThostFtdcGenderType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (TThostFtdcGenderType) ((arg1)->Gender);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1CountryCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CountryCode, (const char *)arg2, 21-1);
      arg1->CountryCode[21-1] = 0;
    } else {
      arg1->CountryCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1CountryCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->CountryCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1CustType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  TThostFtdcCustTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = (TThostFtdcCustTypeType)jarg2; 
  if (arg1) (arg1)->CustType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1CustType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  TThostFtdcCustTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (TThostFtdcCustTypeType) ((arg1)->CustType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1Address_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Address, (const char *)arg2, 101-1);
      arg1->Address[101-1] = 0;
    } else {
      arg1->Address[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1Address_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->Address);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1ZipCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ZipCode, (const char *)arg2, 7-1);
      arg1->ZipCode[7-1] = 0;
    } else {
      arg1->ZipCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1ZipCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->ZipCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1Telephone_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Telephone, (const char *)arg2, 41-1);
      arg1->Telephone[41-1] = 0;
    } else {
      arg1->Telephone[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1Telephone_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->Telephone);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1MobilePhone_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->MobilePhone, (const char *)arg2, 21-1);
      arg1->MobilePhone[21-1] = 0;
    } else {
      arg1->MobilePhone[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1MobilePhone_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->MobilePhone);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1Fax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Fax, (const char *)arg2, 41-1);
      arg1->Fax[41-1] = 0;
    } else {
      arg1->Fax[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1Fax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->Fax);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1EMail_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->EMail, (const char *)arg2, 41-1);
      arg1->EMail[41-1] = 0;
    } else {
      arg1->EMail[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1EMail_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->EMail);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1MoneyAccountStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  TThostFtdcMoneyAccountStatusType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyAccountStatusType)jarg2; 
  if (arg1) (arg1)->MoneyAccountStatus = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1MoneyAccountStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  TThostFtdcMoneyAccountStatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (TThostFtdcMoneyAccountStatusType) ((arg1)->MoneyAccountStatus);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1BankAccount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankAccount, (const char *)arg2, 41-1);
      arg1->BankAccount[41-1] = 0;
    } else {
      arg1->BankAccount[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1BankAccount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankAccount);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1BankPassWord_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankPassWord, (const char *)arg2, 41-1);
      arg1->BankPassWord[41-1] = 0;
    } else {
      arg1->BankPassWord[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1BankPassWord_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankPassWord);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1AccountID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 13-1);
      arg1->AccountID[13-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1AccountID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->AccountID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1Password_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Password, (const char *)arg2, 41-1);
      arg1->Password[41-1] = 0;
    } else {
      arg1->Password[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1Password_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->Password);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1InstallID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  TThostFtdcInstallIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = (TThostFtdcInstallIDType)jarg2; 
  if (arg1) (arg1)->InstallID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1InstallID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  TThostFtdcInstallIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (TThostFtdcInstallIDType) ((arg1)->InstallID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1VerifyCertNoFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  TThostFtdcYesNoIndicatorType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = (TThostFtdcYesNoIndicatorType)jarg2; 
  if (arg1) (arg1)->VerifyCertNoFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1VerifyCertNoFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  TThostFtdcYesNoIndicatorType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (TThostFtdcYesNoIndicatorType) ((arg1)->VerifyCertNoFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1CurrencyID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrencyID, (const char *)arg2, 4-1);
      arg1->CurrencyID[4-1] = 0;
    } else {
      arg1->CurrencyID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1CurrencyID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->CurrencyID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1CashExchangeCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  TThostFtdcCashExchangeCodeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = (TThostFtdcCashExchangeCodeType)jarg2; 
  if (arg1) (arg1)->CashExchangeCode = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1CashExchangeCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  TThostFtdcCashExchangeCodeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (TThostFtdcCashExchangeCodeType) ((arg1)->CashExchangeCode);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1Digest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Digest, (const char *)arg2, 36-1);
      arg1->Digest[36-1] = 0;
    } else {
      arg1->Digest[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1Digest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->Digest);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1BankAccType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  TThostFtdcBankAccTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = (TThostFtdcBankAccTypeType)jarg2; 
  if (arg1) (arg1)->BankAccType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1BankAccType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  TThostFtdcBankAccTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (TThostFtdcBankAccTypeType) ((arg1)->BankAccType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1DeviceID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->DeviceID, (const char *)arg2, 3-1);
      arg1->DeviceID[3-1] = 0;
    } else {
      arg1->DeviceID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1DeviceID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->DeviceID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1BankSecuAccType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  TThostFtdcBankAccTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = (TThostFtdcBankAccTypeType)jarg2; 
  if (arg1) (arg1)->BankSecuAccType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1BankSecuAccType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  TThostFtdcBankAccTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (TThostFtdcBankAccTypeType) ((arg1)->BankSecuAccType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1BrokerIDByBank_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerIDByBank, (const char *)arg2, 33-1);
      arg1->BrokerIDByBank[33-1] = 0;
    } else {
      arg1->BrokerIDByBank[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1BrokerIDByBank_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->BrokerIDByBank);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1BankSecuAcc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSecuAcc, (const char *)arg2, 41-1);
      arg1->BankSecuAcc[41-1] = 0;
    } else {
      arg1->BankSecuAcc[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1BankSecuAcc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankSecuAcc);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1BankPwdFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  TThostFtdcPwdFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = (TThostFtdcPwdFlagType)jarg2; 
  if (arg1) (arg1)->BankPwdFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1BankPwdFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  TThostFtdcPwdFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (TThostFtdcPwdFlagType) ((arg1)->BankPwdFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1SecuPwdFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  TThostFtdcPwdFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = (TThostFtdcPwdFlagType)jarg2; 
  if (arg1) (arg1)->SecuPwdFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1SecuPwdFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  TThostFtdcPwdFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (TThostFtdcPwdFlagType) ((arg1)->SecuPwdFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1OperNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OperNo, (const char *)arg2, 17-1);
      arg1->OperNo[17-1] = 0;
    } else {
      arg1->OperNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1OperNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->OperNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1TID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  TThostFtdcTIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = (TThostFtdcTIDType)jarg2; 
  if (arg1) (arg1)->TID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1TID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  TThostFtdcTIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (TThostFtdcTIDType) ((arg1)->TID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1ErrorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  TThostFtdcErrorIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = (TThostFtdcErrorIDType)jarg2; 
  if (arg1) (arg1)->ErrorID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1ErrorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  TThostFtdcErrorIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (TThostFtdcErrorIDType) ((arg1)->ErrorID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1ErrorMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ErrorMsg, (const char *)arg2, 81-1);
      arg1->ErrorMsg[81-1] = 0;
    } else {
      arg1->ErrorMsg[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcCancelAccountField_1ErrorMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  result = (char *) ((arg1)->ErrorMsg);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcCancelAccountField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcCancelAccountField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcCancelAccountField *)new CThostFtdcCancelAccountField();
  *(CThostFtdcCancelAccountField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcCancelAccountField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcCancelAccountField *arg1 = (CThostFtdcCancelAccountField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcCancelAccountField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1TradeCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeCode, (const char *)arg2, 7-1);
      arg1->TradeCode[7-1] = 0;
    } else {
      arg1->TradeCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1TradeCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradeCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1BankID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankID, (const char *)arg2, 4-1);
      arg1->BankID[4-1] = 0;
    } else {
      arg1->BankID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1BankID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1BankBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankBranchID, (const char *)arg2, 5-1);
      arg1->BankBranchID[5-1] = 0;
    } else {
      arg1->BankBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1BankBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1BrokerBranchID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerBranchID, (const char *)arg2, 31-1);
      arg1->BrokerBranchID[31-1] = 0;
    } else {
      arg1->BrokerBranchID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1BrokerBranchID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->BrokerBranchID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1TradeDate_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeDate, (const char *)arg2, 9-1);
      arg1->TradeDate[9-1] = 0;
    } else {
      arg1->TradeDate[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1TradeDate_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradeDate);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1TradeTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradeTime, (const char *)arg2, 9-1);
      arg1->TradeTime[9-1] = 0;
    } else {
      arg1->TradeTime[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1TradeTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradeTime);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1BankSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankSerial, (const char *)arg2, 13-1);
      arg1->BankSerial[13-1] = 0;
    } else {
      arg1->BankSerial[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1BankSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankSerial);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1TradingDay_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->TradingDay, (const char *)arg2, 9-1);
      arg1->TradingDay[9-1] = 0;
    } else {
      arg1->TradingDay[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1TradingDay_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->TradingDay);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1PlateSerial_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  TThostFtdcSerialType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = (TThostFtdcSerialType)jarg2; 
  if (arg1) (arg1)->PlateSerial = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1PlateSerial_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  TThostFtdcSerialType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (TThostFtdcSerialType) ((arg1)->PlateSerial);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1LastFragment_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  TThostFtdcLastFragmentType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = (TThostFtdcLastFragmentType)jarg2; 
  if (arg1) (arg1)->LastFragment = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1LastFragment_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  TThostFtdcLastFragmentType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (TThostFtdcLastFragmentType) ((arg1)->LastFragment);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1SessionID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  TThostFtdcSessionIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = (TThostFtdcSessionIDType)jarg2; 
  if (arg1) (arg1)->SessionID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1SessionID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  TThostFtdcSessionIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (TThostFtdcSessionIDType) ((arg1)->SessionID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1CustomerName_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CustomerName, (const char *)arg2, 51-1);
      arg1->CustomerName[51-1] = 0;
    } else {
      arg1->CustomerName[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1CustomerName_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->CustomerName);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1IdCardType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  TThostFtdcIdCardTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = (TThostFtdcIdCardTypeType)jarg2; 
  if (arg1) (arg1)->IdCardType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1IdCardType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  TThostFtdcIdCardTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (TThostFtdcIdCardTypeType) ((arg1)->IdCardType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1IdentifiedCardNo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->IdentifiedCardNo, (const char *)arg2, 51-1);
      arg1->IdentifiedCardNo[51-1] = 0;
    } else {
      arg1->IdentifiedCardNo[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1IdentifiedCardNo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->IdentifiedCardNo);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1Gender_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  TThostFtdcGenderType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = (TThostFtdcGenderType)jarg2; 
  if (arg1) (arg1)->Gender = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1Gender_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  TThostFtdcGenderType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (TThostFtdcGenderType) ((arg1)->Gender);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1CountryCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CountryCode, (const char *)arg2, 21-1);
      arg1->CountryCode[21-1] = 0;
    } else {
      arg1->CountryCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1CountryCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->CountryCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1CustType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  TThostFtdcCustTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = (TThostFtdcCustTypeType)jarg2; 
  if (arg1) (arg1)->CustType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1CustType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  TThostFtdcCustTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (TThostFtdcCustTypeType) ((arg1)->CustType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1Address_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Address, (const char *)arg2, 101-1);
      arg1->Address[101-1] = 0;
    } else {
      arg1->Address[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1Address_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->Address);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1ZipCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ZipCode, (const char *)arg2, 7-1);
      arg1->ZipCode[7-1] = 0;
    } else {
      arg1->ZipCode[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1ZipCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->ZipCode);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1Telephone_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Telephone, (const char *)arg2, 41-1);
      arg1->Telephone[41-1] = 0;
    } else {
      arg1->Telephone[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1Telephone_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->Telephone);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1MobilePhone_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->MobilePhone, (const char *)arg2, 21-1);
      arg1->MobilePhone[21-1] = 0;
    } else {
      arg1->MobilePhone[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1MobilePhone_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->MobilePhone);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1Fax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Fax, (const char *)arg2, 41-1);
      arg1->Fax[41-1] = 0;
    } else {
      arg1->Fax[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1Fax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->Fax);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1EMail_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->EMail, (const char *)arg2, 41-1);
      arg1->EMail[41-1] = 0;
    } else {
      arg1->EMail[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1EMail_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->EMail);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1MoneyAccountStatus_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  TThostFtdcMoneyAccountStatusType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = (TThostFtdcMoneyAccountStatusType)jarg2; 
  if (arg1) (arg1)->MoneyAccountStatus = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1MoneyAccountStatus_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  TThostFtdcMoneyAccountStatusType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (TThostFtdcMoneyAccountStatusType) ((arg1)->MoneyAccountStatus);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1BankAccount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankAccount, (const char *)arg2, 41-1);
      arg1->BankAccount[41-1] = 0;
    } else {
      arg1->BankAccount[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1BankAccount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankAccount);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1BankPassWord_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BankPassWord, (const char *)arg2, 41-1);
      arg1->BankPassWord[41-1] = 0;
    } else {
      arg1->BankPassWord[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1BankPassWord_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->BankPassWord);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1NewBankAccount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->NewBankAccount, (const char *)arg2, 41-1);
      arg1->NewBankAccount[41-1] = 0;
    } else {
      arg1->NewBankAccount[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1NewBankAccount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->NewBankAccount);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1NewBankPassWord_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->NewBankPassWord, (const char *)arg2, 41-1);
      arg1->NewBankPassWord[41-1] = 0;
    } else {
      arg1->NewBankPassWord[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1NewBankPassWord_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->NewBankPassWord);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1AccountID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->AccountID, (const char *)arg2, 13-1);
      arg1->AccountID[13-1] = 0;
    } else {
      arg1->AccountID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1AccountID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->AccountID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1Password_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Password, (const char *)arg2, 41-1);
      arg1->Password[41-1] = 0;
    } else {
      arg1->Password[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1Password_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->Password);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1BankAccType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  TThostFtdcBankAccTypeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = (TThostFtdcBankAccTypeType)jarg2; 
  if (arg1) (arg1)->BankAccType = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1BankAccType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  TThostFtdcBankAccTypeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (TThostFtdcBankAccTypeType) ((arg1)->BankAccType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1InstallID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  TThostFtdcInstallIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = (TThostFtdcInstallIDType)jarg2; 
  if (arg1) (arg1)->InstallID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1InstallID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  TThostFtdcInstallIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (TThostFtdcInstallIDType) ((arg1)->InstallID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1VerifyCertNoFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  TThostFtdcYesNoIndicatorType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = (TThostFtdcYesNoIndicatorType)jarg2; 
  if (arg1) (arg1)->VerifyCertNoFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1VerifyCertNoFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  TThostFtdcYesNoIndicatorType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (TThostFtdcYesNoIndicatorType) ((arg1)->VerifyCertNoFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1CurrencyID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->CurrencyID, (const char *)arg2, 4-1);
      arg1->CurrencyID[4-1] = 0;
    } else {
      arg1->CurrencyID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1CurrencyID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->CurrencyID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1BrokerIDByBank_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerIDByBank, (const char *)arg2, 33-1);
      arg1->BrokerIDByBank[33-1] = 0;
    } else {
      arg1->BrokerIDByBank[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1BrokerIDByBank_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->BrokerIDByBank);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1BankPwdFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  TThostFtdcPwdFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = (TThostFtdcPwdFlagType)jarg2; 
  if (arg1) (arg1)->BankPwdFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1BankPwdFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  TThostFtdcPwdFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (TThostFtdcPwdFlagType) ((arg1)->BankPwdFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1SecuPwdFlag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  TThostFtdcPwdFlagType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = (TThostFtdcPwdFlagType)jarg2; 
  if (arg1) (arg1)->SecuPwdFlag = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1SecuPwdFlag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  TThostFtdcPwdFlagType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (TThostFtdcPwdFlagType) ((arg1)->SecuPwdFlag);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1TID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  TThostFtdcTIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = (TThostFtdcTIDType)jarg2; 
  if (arg1) (arg1)->TID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1TID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  TThostFtdcTIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (TThostFtdcTIDType) ((arg1)->TID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1Digest_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->Digest, (const char *)arg2, 36-1);
      arg1->Digest[36-1] = 0;
    } else {
      arg1->Digest[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1Digest_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->Digest);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1ErrorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  TThostFtdcErrorIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = (TThostFtdcErrorIDType)jarg2; 
  if (arg1) (arg1)->ErrorID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1ErrorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  TThostFtdcErrorIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (TThostFtdcErrorIDType) ((arg1)->ErrorID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1ErrorMsg_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->ErrorMsg, (const char *)arg2, 81-1);
      arg1->ErrorMsg[81-1] = 0;
    } else {
      arg1->ErrorMsg[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcChangeAccountField_1ErrorMsg_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  result = (char *) ((arg1)->ErrorMsg);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcChangeAccountField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcChangeAccountField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcChangeAccountField *)new CThostFtdcChangeAccountField();
  *(CThostFtdcChangeAccountField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcChangeAccountField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcChangeAccountField *arg1 = (CThostFtdcChangeAccountField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcChangeAccountField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserRightsAssignField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcUserRightsAssignField *arg1 = (CThostFtdcUserRightsAssignField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserRightsAssignField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserRightsAssignField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcUserRightsAssignField *arg1 = (CThostFtdcUserRightsAssignField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserRightsAssignField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserRightsAssignField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcUserRightsAssignField *arg1 = (CThostFtdcUserRightsAssignField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserRightsAssignField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserRightsAssignField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcUserRightsAssignField *arg1 = (CThostFtdcUserRightsAssignField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserRightsAssignField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserRightsAssignField_1DRIdentityID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcUserRightsAssignField *arg1 = (CThostFtdcUserRightsAssignField *) 0 ;
  TThostFtdcDRIdentityIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserRightsAssignField **)&jarg1; 
  arg2 = (TThostFtdcDRIdentityIDType)jarg2; 
  if (arg1) (arg1)->DRIdentityID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcUserRightsAssignField_1DRIdentityID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcUserRightsAssignField *arg1 = (CThostFtdcUserRightsAssignField *) 0 ;
  TThostFtdcDRIdentityIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcUserRightsAssignField **)&jarg1; 
  result = (TThostFtdcDRIdentityIDType) ((arg1)->DRIdentityID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcUserRightsAssignField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcUserRightsAssignField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcUserRightsAssignField *)new CThostFtdcUserRightsAssignField();
  *(CThostFtdcUserRightsAssignField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcUserRightsAssignField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcUserRightsAssignField *arg1 = (CThostFtdcUserRightsAssignField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcUserRightsAssignField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserRightAssignField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcBrokerUserRightAssignField *arg1 = (CThostFtdcBrokerUserRightAssignField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserRightAssignField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserRightAssignField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcBrokerUserRightAssignField *arg1 = (CThostFtdcBrokerUserRightAssignField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserRightAssignField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserRightAssignField_1DRIdentityID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcBrokerUserRightAssignField *arg1 = (CThostFtdcBrokerUserRightAssignField *) 0 ;
  TThostFtdcDRIdentityIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserRightAssignField **)&jarg1; 
  arg2 = (TThostFtdcDRIdentityIDType)jarg2; 
  if (arg1) (arg1)->DRIdentityID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserRightAssignField_1DRIdentityID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcBrokerUserRightAssignField *arg1 = (CThostFtdcBrokerUserRightAssignField *) 0 ;
  TThostFtdcDRIdentityIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserRightAssignField **)&jarg1; 
  result = (TThostFtdcDRIdentityIDType) ((arg1)->DRIdentityID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserRightAssignField_1Tradeable_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcBrokerUserRightAssignField *arg1 = (CThostFtdcBrokerUserRightAssignField *) 0 ;
  TThostFtdcBoolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserRightAssignField **)&jarg1; 
  arg2 = (TThostFtdcBoolType)jarg2; 
  if (arg1) (arg1)->Tradeable = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcBrokerUserRightAssignField_1Tradeable_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcBrokerUserRightAssignField *arg1 = (CThostFtdcBrokerUserRightAssignField *) 0 ;
  TThostFtdcBoolType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcBrokerUserRightAssignField **)&jarg1; 
  result = (TThostFtdcBoolType) ((arg1)->Tradeable);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcBrokerUserRightAssignField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcBrokerUserRightAssignField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcBrokerUserRightAssignField *)new CThostFtdcBrokerUserRightAssignField();
  *(CThostFtdcBrokerUserRightAssignField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcBrokerUserRightAssignField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcBrokerUserRightAssignField *arg1 = (CThostFtdcBrokerUserRightAssignField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcBrokerUserRightAssignField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDRTransferField_1OrigDRIdentityID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcDRTransferField *arg1 = (CThostFtdcDRTransferField *) 0 ;
  TThostFtdcDRIdentityIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDRTransferField **)&jarg1; 
  arg2 = (TThostFtdcDRIdentityIDType)jarg2; 
  if (arg1) (arg1)->OrigDRIdentityID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcDRTransferField_1OrigDRIdentityID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcDRTransferField *arg1 = (CThostFtdcDRTransferField *) 0 ;
  TThostFtdcDRIdentityIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDRTransferField **)&jarg1; 
  result = (TThostFtdcDRIdentityIDType) ((arg1)->OrigDRIdentityID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDRTransferField_1DestDRIdentityID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcDRTransferField *arg1 = (CThostFtdcDRTransferField *) 0 ;
  TThostFtdcDRIdentityIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDRTransferField **)&jarg1; 
  arg2 = (TThostFtdcDRIdentityIDType)jarg2; 
  if (arg1) (arg1)->DestDRIdentityID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcDRTransferField_1DestDRIdentityID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcDRTransferField *arg1 = (CThostFtdcDRTransferField *) 0 ;
  TThostFtdcDRIdentityIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDRTransferField **)&jarg1; 
  result = (TThostFtdcDRIdentityIDType) ((arg1)->DestDRIdentityID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDRTransferField_1OrigBrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcDRTransferField *arg1 = (CThostFtdcDRTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDRTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->OrigBrokerID, (const char *)arg2, 11-1);
      arg1->OrigBrokerID[11-1] = 0;
    } else {
      arg1->OrigBrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcDRTransferField_1OrigBrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcDRTransferField *arg1 = (CThostFtdcDRTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDRTransferField **)&jarg1; 
  result = (char *) ((arg1)->OrigBrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcDRTransferField_1DestBrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcDRTransferField *arg1 = (CThostFtdcDRTransferField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDRTransferField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->DestBrokerID, (const char *)arg2, 11-1);
      arg1->DestBrokerID[11-1] = 0;
    } else {
      arg1->DestBrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcDRTransferField_1DestBrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcDRTransferField *arg1 = (CThostFtdcDRTransferField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcDRTransferField **)&jarg1; 
  result = (char *) ((arg1)->DestBrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcDRTransferField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcDRTransferField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcDRTransferField *)new CThostFtdcDRTransferField();
  *(CThostFtdcDRTransferField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcDRTransferField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcDRTransferField *arg1 = (CThostFtdcDRTransferField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcDRTransferField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcFensUserInfoField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcFensUserInfoField *arg1 = (CThostFtdcFensUserInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFensUserInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcFensUserInfoField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcFensUserInfoField *arg1 = (CThostFtdcFensUserInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFensUserInfoField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcFensUserInfoField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcFensUserInfoField *arg1 = (CThostFtdcFensUserInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFensUserInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcFensUserInfoField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcFensUserInfoField *arg1 = (CThostFtdcFensUserInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFensUserInfoField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcFensUserInfoField_1LoginMode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  CThostFtdcFensUserInfoField *arg1 = (CThostFtdcFensUserInfoField *) 0 ;
  TThostFtdcLoginModeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFensUserInfoField **)&jarg1; 
  arg2 = (TThostFtdcLoginModeType)jarg2; 
  if (arg1) (arg1)->LoginMode = arg2;
}


SWIGEXPORT jchar JNICALL Java_com_ctp_CtpJNI_CThostFtdcFensUserInfoField_1LoginMode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  CThostFtdcFensUserInfoField *arg1 = (CThostFtdcFensUserInfoField *) 0 ;
  TThostFtdcLoginModeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcFensUserInfoField **)&jarg1; 
  result = (TThostFtdcLoginModeType) ((arg1)->LoginMode);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcFensUserInfoField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcFensUserInfoField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcFensUserInfoField *)new CThostFtdcFensUserInfoField();
  *(CThostFtdcFensUserInfoField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcFensUserInfoField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcFensUserInfoField *arg1 = (CThostFtdcFensUserInfoField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcFensUserInfoField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcCurrTransferIdentityField_1IdentityID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcCurrTransferIdentityField *arg1 = (CThostFtdcCurrTransferIdentityField *) 0 ;
  TThostFtdcDRIdentityIDType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCurrTransferIdentityField **)&jarg1; 
  arg2 = (TThostFtdcDRIdentityIDType)jarg2; 
  if (arg1) (arg1)->IdentityID = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcCurrTransferIdentityField_1IdentityID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcCurrTransferIdentityField *arg1 = (CThostFtdcCurrTransferIdentityField *) 0 ;
  TThostFtdcDRIdentityIDType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcCurrTransferIdentityField **)&jarg1; 
  result = (TThostFtdcDRIdentityIDType) ((arg1)->IdentityID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcCurrTransferIdentityField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcCurrTransferIdentityField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcCurrTransferIdentityField *)new CThostFtdcCurrTransferIdentityField();
  *(CThostFtdcCurrTransferIdentityField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcCurrTransferIdentityField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcCurrTransferIdentityField *arg1 = (CThostFtdcCurrTransferIdentityField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcCurrTransferIdentityField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginForbiddenUserField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcLoginForbiddenUserField *arg1 = (CThostFtdcLoginForbiddenUserField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginForbiddenUserField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginForbiddenUserField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcLoginForbiddenUserField *arg1 = (CThostFtdcLoginForbiddenUserField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginForbiddenUserField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginForbiddenUserField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcLoginForbiddenUserField *arg1 = (CThostFtdcLoginForbiddenUserField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginForbiddenUserField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcLoginForbiddenUserField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcLoginForbiddenUserField *arg1 = (CThostFtdcLoginForbiddenUserField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcLoginForbiddenUserField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcLoginForbiddenUserField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcLoginForbiddenUserField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcLoginForbiddenUserField *)new CThostFtdcLoginForbiddenUserField();
  *(CThostFtdcLoginForbiddenUserField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcLoginForbiddenUserField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcLoginForbiddenUserField *arg1 = (CThostFtdcLoginForbiddenUserField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcLoginForbiddenUserField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryLoginForbiddenUserField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryLoginForbiddenUserField *arg1 = (CThostFtdcQryLoginForbiddenUserField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryLoginForbiddenUserField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryLoginForbiddenUserField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryLoginForbiddenUserField *arg1 = (CThostFtdcQryLoginForbiddenUserField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryLoginForbiddenUserField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryLoginForbiddenUserField_1UserID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcQryLoginForbiddenUserField *arg1 = (CThostFtdcQryLoginForbiddenUserField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryLoginForbiddenUserField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->UserID, (const char *)arg2, 16-1);
      arg1->UserID[16-1] = 0;
    } else {
      arg1->UserID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcQryLoginForbiddenUserField_1UserID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcQryLoginForbiddenUserField *arg1 = (CThostFtdcQryLoginForbiddenUserField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcQryLoginForbiddenUserField **)&jarg1; 
  result = (char *) ((arg1)->UserID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcQryLoginForbiddenUserField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcQryLoginForbiddenUserField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcQryLoginForbiddenUserField *)new CThostFtdcQryLoginForbiddenUserField();
  *(CThostFtdcQryLoginForbiddenUserField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcQryLoginForbiddenUserField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcQryLoginForbiddenUserField *arg1 = (CThostFtdcQryLoginForbiddenUserField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcQryLoginForbiddenUserField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMulticastGroupInfoField_1GroupIP_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMulticastGroupInfoField *arg1 = (CThostFtdcMulticastGroupInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMulticastGroupInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->GroupIP, (const char *)arg2, 16-1);
      arg1->GroupIP[16-1] = 0;
    } else {
      arg1->GroupIP[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMulticastGroupInfoField_1GroupIP_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMulticastGroupInfoField *arg1 = (CThostFtdcMulticastGroupInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMulticastGroupInfoField **)&jarg1; 
  result = (char *) ((arg1)->GroupIP);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMulticastGroupInfoField_1GroupPort_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcMulticastGroupInfoField *arg1 = (CThostFtdcMulticastGroupInfoField *) 0 ;
  TThostFtdcIPPortType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMulticastGroupInfoField **)&jarg1; 
  arg2 = (TThostFtdcIPPortType)jarg2; 
  if (arg1) (arg1)->GroupPort = arg2;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcMulticastGroupInfoField_1GroupPort_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcMulticastGroupInfoField *arg1 = (CThostFtdcMulticastGroupInfoField *) 0 ;
  TThostFtdcIPPortType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMulticastGroupInfoField **)&jarg1; 
  result = (TThostFtdcIPPortType) ((arg1)->GroupPort);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMulticastGroupInfoField_1SourceIP_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMulticastGroupInfoField *arg1 = (CThostFtdcMulticastGroupInfoField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMulticastGroupInfoField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->SourceIP, (const char *)arg2, 16-1);
      arg1->SourceIP[16-1] = 0;
    } else {
      arg1->SourceIP[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMulticastGroupInfoField_1SourceIP_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMulticastGroupInfoField *arg1 = (CThostFtdcMulticastGroupInfoField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMulticastGroupInfoField **)&jarg1; 
  result = (char *) ((arg1)->SourceIP);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcMulticastGroupInfoField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcMulticastGroupInfoField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcMulticastGroupInfoField *)new CThostFtdcMulticastGroupInfoField();
  *(CThostFtdcMulticastGroupInfoField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcMulticastGroupInfoField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcMulticastGroupInfoField *arg1 = (CThostFtdcMulticastGroupInfoField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcMulticastGroupInfoField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountReserveField_1BrokerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradingAccountReserveField *arg1 = (CThostFtdcTradingAccountReserveField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountReserveField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->BrokerID, (const char *)arg2, 11-1);
      arg1->BrokerID[11-1] = 0;
    } else {
      arg1->BrokerID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountReserveField_1BrokerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradingAccountReserveField *arg1 = (CThostFtdcTradingAccountReserveField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountReserveField **)&jarg1; 
  result = (char *) ((arg1)->BrokerID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountReserveField_1InvestorID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTradingAccountReserveField *arg1 = (CThostFtdcTradingAccountReserveField *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountReserveField **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->InvestorID, (const char *)arg2, 13-1);
      arg1->InvestorID[13-1] = 0;
    } else {
      arg1->InvestorID[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountReserveField_1InvestorID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTradingAccountReserveField *arg1 = (CThostFtdcTradingAccountReserveField *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountReserveField **)&jarg1; 
  result = (char *) ((arg1)->InvestorID);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountReserveField_1Reserve_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  CThostFtdcTradingAccountReserveField *arg1 = (CThostFtdcTradingAccountReserveField *) 0 ;
  TThostFtdcMoneyType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountReserveField **)&jarg1; 
  arg2 = (TThostFtdcMoneyType)jarg2; 
  if (arg1) (arg1)->Reserve = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_ctp_CtpJNI_CThostFtdcTradingAccountReserveField_1Reserve_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  CThostFtdcTradingAccountReserveField *arg1 = (CThostFtdcTradingAccountReserveField *) 0 ;
  TThostFtdcMoneyType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTradingAccountReserveField **)&jarg1; 
  result = (TThostFtdcMoneyType) ((arg1)->Reserve);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcTradingAccountReserveField(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcTradingAccountReserveField *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcTradingAccountReserveField *)new CThostFtdcTradingAccountReserveField();
  *(CThostFtdcTradingAccountReserveField **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcTradingAccountReserveField(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcTradingAccountReserveField *arg1 = (CThostFtdcTradingAccountReserveField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcTradingAccountReserveField **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdSpi_1onFrontConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CThostFtdcMdSpi *arg1 = (CThostFtdcMdSpi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMdSpi **)&jarg1; 
  (arg1)->OnFrontConnected();
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdSpi_1onFrontConnectedSwigExplicitCThostFtdcMdSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CThostFtdcMdSpi *arg1 = (CThostFtdcMdSpi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMdSpi **)&jarg1; 
  (arg1)->CThostFtdcMdSpi::OnFrontConnected();
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdSpi_1onFrontDisconnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcMdSpi *arg1 = (CThostFtdcMdSpi *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMdSpi **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->OnFrontDisconnected(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdSpi_1onFrontDisconnectedSwigExplicitCThostFtdcMdSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcMdSpi *arg1 = (CThostFtdcMdSpi *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMdSpi **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->CThostFtdcMdSpi::OnFrontDisconnected(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdSpi_1onHeartBeatWarning(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcMdSpi *arg1 = (CThostFtdcMdSpi *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMdSpi **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->OnHeartBeatWarning(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdSpi_1onHeartBeatWarningSwigExplicitCThostFtdcMdSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcMdSpi *arg1 = (CThostFtdcMdSpi *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMdSpi **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->CThostFtdcMdSpi::OnHeartBeatWarning(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdSpi_1onRspUserLogin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcMdSpi *arg1 = (CThostFtdcMdSpi *) 0 ;
  CThostFtdcRspUserLoginField *arg2 = (CThostFtdcRspUserLoginField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcMdSpi **)&jarg1; 
  arg2 = *(CThostFtdcRspUserLoginField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspUserLogin(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdSpi_1onRspUserLoginSwigExplicitCThostFtdcMdSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcMdSpi *arg1 = (CThostFtdcMdSpi *) 0 ;
  CThostFtdcRspUserLoginField *arg2 = (CThostFtdcRspUserLoginField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcMdSpi **)&jarg1; 
  arg2 = *(CThostFtdcRspUserLoginField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcMdSpi::OnRspUserLogin(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdSpi_1onRspUserLogout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcMdSpi *arg1 = (CThostFtdcMdSpi *) 0 ;
  CThostFtdcUserLogoutField *arg2 = (CThostFtdcUserLogoutField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcMdSpi **)&jarg1; 
  arg2 = *(CThostFtdcUserLogoutField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspUserLogout(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdSpi_1onRspUserLogoutSwigExplicitCThostFtdcMdSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcMdSpi *arg1 = (CThostFtdcMdSpi *) 0 ;
  CThostFtdcUserLogoutField *arg2 = (CThostFtdcUserLogoutField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcMdSpi **)&jarg1; 
  arg2 = *(CThostFtdcUserLogoutField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcMdSpi::OnRspUserLogout(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdSpi_1onRspError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4) {
  CThostFtdcMdSpi *arg1 = (CThostFtdcMdSpi *) 0 ;
  CThostFtdcRspInfoField *arg2 = (CThostFtdcRspInfoField *) 0 ;
  int arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcMdSpi **)&jarg1; 
  arg2 = *(CThostFtdcRspInfoField **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->OnRspError(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdSpi_1onRspErrorSwigExplicitCThostFtdcMdSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4) {
  CThostFtdcMdSpi *arg1 = (CThostFtdcMdSpi *) 0 ;
  CThostFtdcRspInfoField *arg2 = (CThostFtdcRspInfoField *) 0 ;
  int arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcMdSpi **)&jarg1; 
  arg2 = *(CThostFtdcRspInfoField **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->CThostFtdcMdSpi::OnRspError(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdSpi_1onRspSubMarketData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcMdSpi *arg1 = (CThostFtdcMdSpi *) 0 ;
  CThostFtdcSpecificInstrumentField *arg2 = (CThostFtdcSpecificInstrumentField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcMdSpi **)&jarg1; 
  arg2 = *(CThostFtdcSpecificInstrumentField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspSubMarketData(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdSpi_1onRspSubMarketDataSwigExplicitCThostFtdcMdSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcMdSpi *arg1 = (CThostFtdcMdSpi *) 0 ;
  CThostFtdcSpecificInstrumentField *arg2 = (CThostFtdcSpecificInstrumentField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcMdSpi **)&jarg1; 
  arg2 = *(CThostFtdcSpecificInstrumentField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcMdSpi::OnRspSubMarketData(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdSpi_1onRspUnSubMarketData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcMdSpi *arg1 = (CThostFtdcMdSpi *) 0 ;
  CThostFtdcSpecificInstrumentField *arg2 = (CThostFtdcSpecificInstrumentField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcMdSpi **)&jarg1; 
  arg2 = *(CThostFtdcSpecificInstrumentField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspUnSubMarketData(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdSpi_1onRspUnSubMarketDataSwigExplicitCThostFtdcMdSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcMdSpi *arg1 = (CThostFtdcMdSpi *) 0 ;
  CThostFtdcSpecificInstrumentField *arg2 = (CThostFtdcSpecificInstrumentField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcMdSpi **)&jarg1; 
  arg2 = *(CThostFtdcSpecificInstrumentField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcMdSpi::OnRspUnSubMarketData(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdSpi_1onRtnDepthMarketData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcMdSpi *arg1 = (CThostFtdcMdSpi *) 0 ;
  CThostFtdcDepthMarketDataField *arg2 = (CThostFtdcDepthMarketDataField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcMdSpi **)&jarg1; 
  arg2 = *(CThostFtdcDepthMarketDataField **)&jarg2; 
  (arg1)->OnRtnDepthMarketData(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdSpi_1onRtnDepthMarketDataSwigExplicitCThostFtdcMdSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcMdSpi *arg1 = (CThostFtdcMdSpi *) 0 ;
  CThostFtdcDepthMarketDataField *arg2 = (CThostFtdcDepthMarketDataField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcMdSpi **)&jarg1; 
  arg2 = *(CThostFtdcDepthMarketDataField **)&jarg2; 
  (arg1)->CThostFtdcMdSpi::OnRtnDepthMarketData(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcMdSpi(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcMdSpi *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcMdSpi *)new SwigDirector_CThostFtdcMdSpi(jenv);
  *(CThostFtdcMdSpi **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcMdSpi(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcMdSpi *arg1 = (CThostFtdcMdSpi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcMdSpi **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdSpi_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  CThostFtdcMdSpi *obj = *((CThostFtdcMdSpi **)&objarg);
  (void)jcls;
  SwigDirector_CThostFtdcMdSpi *director = dynamic_cast<SwigDirector_CThostFtdcMdSpi *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdSpi_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  CThostFtdcMdSpi *obj = *((CThostFtdcMdSpi **)&objarg);
  SwigDirector_CThostFtdcMdSpi *director = dynamic_cast<SwigDirector_CThostFtdcMdSpi *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdApi_1createFtdcMdApi_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool arg3 ;
  CThostFtdcMdApi *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (CThostFtdcMdApi *)CThostFtdcMdApi::CreateFtdcMdApi((char const *)arg1,arg2,arg3);
  *(CThostFtdcMdApi **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdApi_1createFtdcMdApi_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  CThostFtdcMdApi *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = jarg2 ? true : false; 
  result = (CThostFtdcMdApi *)CThostFtdcMdApi::CreateFtdcMdApi((char const *)arg1,arg2);
  *(CThostFtdcMdApi **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdApi_1createFtdcMdApi_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  CThostFtdcMdApi *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (CThostFtdcMdApi *)CThostFtdcMdApi::CreateFtdcMdApi((char const *)arg1);
  *(CThostFtdcMdApi **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdApi_1createFtdcMdApi_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcMdApi *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcMdApi *)CThostFtdcMdApi::CreateFtdcMdApi();
  *(CThostFtdcMdApi **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdApi_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CThostFtdcMdApi *arg1 = (CThostFtdcMdApi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMdApi **)&jarg1; 
  (arg1)->Release();
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdApi_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CThostFtdcMdApi *arg1 = (CThostFtdcMdApi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMdApi **)&jarg1; 
  (arg1)->Init();
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdApi_1join(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcMdApi *arg1 = (CThostFtdcMdApi *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMdApi **)&jarg1; 
  result = (int)(arg1)->Join();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdApi_1getTradingDay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcMdApi *arg1 = (CThostFtdcMdApi *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMdApi **)&jarg1; 
  result = (char *)(arg1)->GetTradingDay();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdApi_1registerFront(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMdApi *arg1 = (CThostFtdcMdApi *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMdApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->RegisterFront(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdApi_1registerNameServer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcMdApi *arg1 = (CThostFtdcMdApi *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMdApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->RegisterNameServer(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdApi_1registerFensUserInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcMdApi *arg1 = (CThostFtdcMdApi *) 0 ;
  CThostFtdcFensUserInfoField *arg2 = (CThostFtdcFensUserInfoField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcMdApi **)&jarg1; 
  arg2 = *(CThostFtdcFensUserInfoField **)&jarg2; 
  (arg1)->RegisterFensUserInfo(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdApi_1registerSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcMdApi *arg1 = (CThostFtdcMdApi *) 0 ;
  CThostFtdcMdSpi *arg2 = (CThostFtdcMdSpi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcMdApi **)&jarg1; 
  arg2 = *(CThostFtdcMdSpi **)&jarg2; 
  (arg1)->RegisterSpi(arg2);
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdApi_1subscribeMarketData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcMdApi *arg1 = (CThostFtdcMdApi *) 0 ;
  char **arg2 ;
  int arg3 ;
  jint size2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMdApi **)&jarg1; 
  {
    int i = 0;
    if (jarg2) {
      size2 = jenv->GetArrayLength(jarg2);
      
      arg2 = new char*[size2+1];
      
      
      
      for (i = 0; i<size2; i++) {
        jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg2, i);
        const char *c_string = jenv->GetStringUTFChars(j_string, 0);
        
        arg2[i] = new char [strlen(c_string)+1];
        
        
        
        strcpy(arg2[i], c_string);
        jenv->ReleaseStringUTFChars(j_string, c_string);
        jenv->DeleteLocalRef(j_string);
      }
      arg2[i] = 0;
    } else {
      arg2 = 0;
      size2 = 0;
    }
  }
  arg3 = (int)jarg3; 
  result = (int)(arg1)->SubscribeMarketData(arg2,arg3);
  jresult = (jint)result; 
  {
    int i;
    for (i=0; i<size2; i++)
    
    delete[] arg2[i];
    delete[] arg2;
    
    
    
    
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdApi_1unSubscribeMarketData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobjectArray jarg2, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcMdApi *arg1 = (CThostFtdcMdApi *) 0 ;
  char **arg2 ;
  int arg3 ;
  jint size2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcMdApi **)&jarg1; 
  {
    int i = 0;
    if (jarg2) {
      size2 = jenv->GetArrayLength(jarg2);
      
      arg2 = new char*[size2+1];
      
      
      
      for (i = 0; i<size2; i++) {
        jstring j_string = (jstring)jenv->GetObjectArrayElement(jarg2, i);
        const char *c_string = jenv->GetStringUTFChars(j_string, 0);
        
        arg2[i] = new char [strlen(c_string)+1];
        
        
        
        strcpy(arg2[i], c_string);
        jenv->ReleaseStringUTFChars(j_string, c_string);
        jenv->DeleteLocalRef(j_string);
      }
      arg2[i] = 0;
    } else {
      arg2 = 0;
      size2 = 0;
    }
  }
  arg3 = (int)jarg3; 
  result = (int)(arg1)->UnSubscribeMarketData(arg2,arg3);
  jresult = (jint)result; 
  {
    int i;
    for (i=0; i<size2; i++)
    
    delete[] arg2[i];
    delete[] arg2;
    
    
    
    
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdApi_1reqUserLogin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcMdApi *arg1 = (CThostFtdcMdApi *) 0 ;
  CThostFtdcReqUserLoginField *arg2 = (CThostFtdcReqUserLoginField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcMdApi **)&jarg1; 
  arg2 = *(CThostFtdcReqUserLoginField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqUserLogin(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcMdApi_1reqUserLogout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcMdApi *arg1 = (CThostFtdcMdApi *) 0 ;
  CThostFtdcUserLogoutField *arg2 = (CThostFtdcUserLogoutField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcMdApi **)&jarg1; 
  arg2 = *(CThostFtdcUserLogoutField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqUserLogout(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onFrontConnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  (arg1)->OnFrontConnected();
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onFrontConnectedSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  (arg1)->CThostFtdcTraderSpi::OnFrontConnected();
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onFrontDisconnected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->OnFrontDisconnected(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onFrontDisconnectedSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->CThostFtdcTraderSpi::OnFrontDisconnected(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onHeartBeatWarning(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->OnHeartBeatWarning(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onHeartBeatWarningSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->CThostFtdcTraderSpi::OnHeartBeatWarning(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspAuthenticate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcRspAuthenticateField *arg2 = (CThostFtdcRspAuthenticateField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcRspAuthenticateField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspAuthenticate(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspAuthenticateSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcRspAuthenticateField *arg2 = (CThostFtdcRspAuthenticateField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcRspAuthenticateField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspAuthenticate(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspUserLogin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcRspUserLoginField *arg2 = (CThostFtdcRspUserLoginField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcRspUserLoginField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspUserLogin(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspUserLoginSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcRspUserLoginField *arg2 = (CThostFtdcRspUserLoginField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcRspUserLoginField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspUserLogin(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspUserLogout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcUserLogoutField *arg2 = (CThostFtdcUserLogoutField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcUserLogoutField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspUserLogout(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspUserLogoutSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcUserLogoutField *arg2 = (CThostFtdcUserLogoutField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcUserLogoutField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspUserLogout(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspUserPasswordUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcUserPasswordUpdateField *arg2 = (CThostFtdcUserPasswordUpdateField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcUserPasswordUpdateField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspUserPasswordUpdate(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspUserPasswordUpdateSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcUserPasswordUpdateField *arg2 = (CThostFtdcUserPasswordUpdateField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcUserPasswordUpdateField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspUserPasswordUpdate(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspTradingAccountPasswordUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcTradingAccountPasswordUpdateField *arg2 = (CThostFtdcTradingAccountPasswordUpdateField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcTradingAccountPasswordUpdateField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspTradingAccountPasswordUpdate(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspTradingAccountPasswordUpdateSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcTradingAccountPasswordUpdateField *arg2 = (CThostFtdcTradingAccountPasswordUpdateField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcTradingAccountPasswordUpdateField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspTradingAccountPasswordUpdate(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspOrderInsert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcInputOrderField *arg2 = (CThostFtdcInputOrderField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcInputOrderField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspOrderInsert(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspOrderInsertSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcInputOrderField *arg2 = (CThostFtdcInputOrderField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcInputOrderField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspOrderInsert(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspParkedOrderInsert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcParkedOrderField *arg2 = (CThostFtdcParkedOrderField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcParkedOrderField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspParkedOrderInsert(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspParkedOrderInsertSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcParkedOrderField *arg2 = (CThostFtdcParkedOrderField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcParkedOrderField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspParkedOrderInsert(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspParkedOrderAction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcParkedOrderActionField *arg2 = (CThostFtdcParkedOrderActionField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcParkedOrderActionField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspParkedOrderAction(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspParkedOrderActionSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcParkedOrderActionField *arg2 = (CThostFtdcParkedOrderActionField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcParkedOrderActionField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspParkedOrderAction(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspOrderAction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcInputOrderActionField *arg2 = (CThostFtdcInputOrderActionField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcInputOrderActionField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspOrderAction(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspOrderActionSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcInputOrderActionField *arg2 = (CThostFtdcInputOrderActionField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcInputOrderActionField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspOrderAction(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQueryMaxOrderVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcQueryMaxOrderVolumeField *arg2 = (CThostFtdcQueryMaxOrderVolumeField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcQueryMaxOrderVolumeField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQueryMaxOrderVolume(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQueryMaxOrderVolumeSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcQueryMaxOrderVolumeField *arg2 = (CThostFtdcQueryMaxOrderVolumeField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcQueryMaxOrderVolumeField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspQueryMaxOrderVolume(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspSettlementInfoConfirm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcSettlementInfoConfirmField *arg2 = (CThostFtdcSettlementInfoConfirmField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcSettlementInfoConfirmField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspSettlementInfoConfirm(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspSettlementInfoConfirmSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcSettlementInfoConfirmField *arg2 = (CThostFtdcSettlementInfoConfirmField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcSettlementInfoConfirmField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspSettlementInfoConfirm(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspRemoveParkedOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcRemoveParkedOrderField *arg2 = (CThostFtdcRemoveParkedOrderField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcRemoveParkedOrderField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspRemoveParkedOrder(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspRemoveParkedOrderSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcRemoveParkedOrderField *arg2 = (CThostFtdcRemoveParkedOrderField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcRemoveParkedOrderField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspRemoveParkedOrder(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspRemoveParkedOrderAction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcRemoveParkedOrderActionField *arg2 = (CThostFtdcRemoveParkedOrderActionField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcRemoveParkedOrderActionField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspRemoveParkedOrderAction(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspRemoveParkedOrderActionSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcRemoveParkedOrderActionField *arg2 = (CThostFtdcRemoveParkedOrderActionField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcRemoveParkedOrderActionField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspRemoveParkedOrderAction(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcOrderField *arg2 = (CThostFtdcOrderField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcOrderField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryOrder(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryOrderSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcOrderField *arg2 = (CThostFtdcOrderField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcOrderField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspQryOrder(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryTrade(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcTradeField *arg2 = (CThostFtdcTradeField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcTradeField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryTrade(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryTradeSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcTradeField *arg2 = (CThostFtdcTradeField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcTradeField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspQryTrade(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryInvestorPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcInvestorPositionField *arg2 = (CThostFtdcInvestorPositionField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcInvestorPositionField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryInvestorPosition(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryInvestorPositionSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcInvestorPositionField *arg2 = (CThostFtdcInvestorPositionField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcInvestorPositionField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspQryInvestorPosition(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryTradingAccount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcTradingAccountField *arg2 = (CThostFtdcTradingAccountField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcTradingAccountField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryTradingAccount(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryTradingAccountSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcTradingAccountField *arg2 = (CThostFtdcTradingAccountField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcTradingAccountField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspQryTradingAccount(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryInvestor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcInvestorField *arg2 = (CThostFtdcInvestorField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcInvestorField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryInvestor(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryInvestorSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcInvestorField *arg2 = (CThostFtdcInvestorField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcInvestorField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspQryInvestor(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryTradingCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcTradingCodeField *arg2 = (CThostFtdcTradingCodeField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcTradingCodeField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryTradingCode(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryTradingCodeSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcTradingCodeField *arg2 = (CThostFtdcTradingCodeField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcTradingCodeField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspQryTradingCode(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryInstrumentMarginRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcInstrumentMarginRateField *arg2 = (CThostFtdcInstrumentMarginRateField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcInstrumentMarginRateField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryInstrumentMarginRate(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryInstrumentMarginRateSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcInstrumentMarginRateField *arg2 = (CThostFtdcInstrumentMarginRateField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcInstrumentMarginRateField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspQryInstrumentMarginRate(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryInstrumentCommissionRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcInstrumentCommissionRateField *arg2 = (CThostFtdcInstrumentCommissionRateField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcInstrumentCommissionRateField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryInstrumentCommissionRate(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryInstrumentCommissionRateSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcInstrumentCommissionRateField *arg2 = (CThostFtdcInstrumentCommissionRateField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcInstrumentCommissionRateField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspQryInstrumentCommissionRate(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryExchange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcExchangeField *arg2 = (CThostFtdcExchangeField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcExchangeField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryExchange(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryExchangeSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcExchangeField *arg2 = (CThostFtdcExchangeField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcExchangeField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspQryExchange(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryInstrument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcInstrumentField *arg2 = (CThostFtdcInstrumentField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcInstrumentField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryInstrument(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryInstrumentSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcInstrumentField *arg2 = (CThostFtdcInstrumentField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcInstrumentField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspQryInstrument(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryDepthMarketData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcDepthMarketDataField *arg2 = (CThostFtdcDepthMarketDataField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcDepthMarketDataField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryDepthMarketData(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryDepthMarketDataSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcDepthMarketDataField *arg2 = (CThostFtdcDepthMarketDataField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcDepthMarketDataField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspQryDepthMarketData(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQrySettlementInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcSettlementInfoField *arg2 = (CThostFtdcSettlementInfoField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcSettlementInfoField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQrySettlementInfo(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQrySettlementInfoSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcSettlementInfoField *arg2 = (CThostFtdcSettlementInfoField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcSettlementInfoField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspQrySettlementInfo(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryTransferBank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcTransferBankField *arg2 = (CThostFtdcTransferBankField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcTransferBankField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryTransferBank(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryTransferBankSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcTransferBankField *arg2 = (CThostFtdcTransferBankField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcTransferBankField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspQryTransferBank(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryInvestorPositionDetail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcInvestorPositionDetailField *arg2 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcInvestorPositionDetailField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryInvestorPositionDetail(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryInvestorPositionDetailSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcInvestorPositionDetailField *arg2 = (CThostFtdcInvestorPositionDetailField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcInvestorPositionDetailField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspQryInvestorPositionDetail(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryNotice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcNoticeField *arg2 = (CThostFtdcNoticeField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcNoticeField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryNotice(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryNoticeSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcNoticeField *arg2 = (CThostFtdcNoticeField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcNoticeField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspQryNotice(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQrySettlementInfoConfirm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcSettlementInfoConfirmField *arg2 = (CThostFtdcSettlementInfoConfirmField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcSettlementInfoConfirmField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQrySettlementInfoConfirm(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQrySettlementInfoConfirmSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcSettlementInfoConfirmField *arg2 = (CThostFtdcSettlementInfoConfirmField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcSettlementInfoConfirmField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspQrySettlementInfoConfirm(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryInvestorPositionCombineDetail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcInvestorPositionCombineDetailField *arg2 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryInvestorPositionCombineDetail(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryInvestorPositionCombineDetailSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcInvestorPositionCombineDetailField *arg2 = (CThostFtdcInvestorPositionCombineDetailField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcInvestorPositionCombineDetailField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspQryInvestorPositionCombineDetail(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryCFMMCTradingAccountKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcCFMMCTradingAccountKeyField *arg2 = (CThostFtdcCFMMCTradingAccountKeyField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcCFMMCTradingAccountKeyField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryCFMMCTradingAccountKey(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryCFMMCTradingAccountKeySwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcCFMMCTradingAccountKeyField *arg2 = (CThostFtdcCFMMCTradingAccountKeyField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcCFMMCTradingAccountKeyField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspQryCFMMCTradingAccountKey(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryEWarrantOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcEWarrantOffsetField *arg2 = (CThostFtdcEWarrantOffsetField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcEWarrantOffsetField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryEWarrantOffset(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryEWarrantOffsetSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcEWarrantOffsetField *arg2 = (CThostFtdcEWarrantOffsetField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcEWarrantOffsetField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspQryEWarrantOffset(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryInvestorProductGroupMargin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcInvestorProductGroupMarginField *arg2 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryInvestorProductGroupMargin(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryInvestorProductGroupMarginSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcInvestorProductGroupMarginField *arg2 = (CThostFtdcInvestorProductGroupMarginField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcInvestorProductGroupMarginField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspQryInvestorProductGroupMargin(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryExchangeMarginRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcExchangeMarginRateField *arg2 = (CThostFtdcExchangeMarginRateField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcExchangeMarginRateField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryExchangeMarginRate(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryExchangeMarginRateSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcExchangeMarginRateField *arg2 = (CThostFtdcExchangeMarginRateField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcExchangeMarginRateField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspQryExchangeMarginRate(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryExchangeMarginRateAdjust(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcExchangeMarginRateAdjustField *arg2 = (CThostFtdcExchangeMarginRateAdjustField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcExchangeMarginRateAdjustField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryExchangeMarginRateAdjust(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryExchangeMarginRateAdjustSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcExchangeMarginRateAdjustField *arg2 = (CThostFtdcExchangeMarginRateAdjustField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcExchangeMarginRateAdjustField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspQryExchangeMarginRateAdjust(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryTransferSerial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcTransferSerialField *arg2 = (CThostFtdcTransferSerialField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcTransferSerialField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryTransferSerial(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryTransferSerialSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcTransferSerialField *arg2 = (CThostFtdcTransferSerialField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcTransferSerialField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspQryTransferSerial(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryAccountregister(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcAccountregisterField *arg2 = (CThostFtdcAccountregisterField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcAccountregisterField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryAccountregister(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryAccountregisterSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcAccountregisterField *arg2 = (CThostFtdcAccountregisterField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcAccountregisterField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspQryAccountregister(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcRspInfoField *arg2 = (CThostFtdcRspInfoField *) 0 ;
  int arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcRspInfoField **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->OnRspError(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspErrorSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcRspInfoField *arg2 = (CThostFtdcRspInfoField *) 0 ;
  int arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcRspInfoField **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspError(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcOrderField *arg2 = (CThostFtdcOrderField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcOrderField **)&jarg2; 
  (arg1)->OnRtnOrder(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnOrderSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcOrderField *arg2 = (CThostFtdcOrderField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcOrderField **)&jarg2; 
  (arg1)->CThostFtdcTraderSpi::OnRtnOrder(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnTrade(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcTradeField *arg2 = (CThostFtdcTradeField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcTradeField **)&jarg2; 
  (arg1)->OnRtnTrade(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnTradeSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcTradeField *arg2 = (CThostFtdcTradeField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcTradeField **)&jarg2; 
  (arg1)->CThostFtdcTraderSpi::OnRtnTrade(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onErrRtnOrderInsert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcInputOrderField *arg2 = (CThostFtdcInputOrderField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcInputOrderField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  (arg1)->OnErrRtnOrderInsert(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onErrRtnOrderInsertSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcInputOrderField *arg2 = (CThostFtdcInputOrderField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcInputOrderField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  (arg1)->CThostFtdcTraderSpi::OnErrRtnOrderInsert(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onErrRtnOrderAction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcOrderActionField *arg2 = (CThostFtdcOrderActionField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcOrderActionField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  (arg1)->OnErrRtnOrderAction(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onErrRtnOrderActionSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcOrderActionField *arg2 = (CThostFtdcOrderActionField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcOrderActionField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  (arg1)->CThostFtdcTraderSpi::OnErrRtnOrderAction(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnInstrumentStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcInstrumentStatusField *arg2 = (CThostFtdcInstrumentStatusField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcInstrumentStatusField **)&jarg2; 
  (arg1)->OnRtnInstrumentStatus(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnInstrumentStatusSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcInstrumentStatusField *arg2 = (CThostFtdcInstrumentStatusField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcInstrumentStatusField **)&jarg2; 
  (arg1)->CThostFtdcTraderSpi::OnRtnInstrumentStatus(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnTradingNotice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcTradingNoticeInfoField *arg2 = (CThostFtdcTradingNoticeInfoField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcTradingNoticeInfoField **)&jarg2; 
  (arg1)->OnRtnTradingNotice(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnTradingNoticeSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcTradingNoticeInfoField *arg2 = (CThostFtdcTradingNoticeInfoField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcTradingNoticeInfoField **)&jarg2; 
  (arg1)->CThostFtdcTraderSpi::OnRtnTradingNotice(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnErrorConditionalOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcErrorConditionalOrderField *arg2 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcErrorConditionalOrderField **)&jarg2; 
  (arg1)->OnRtnErrorConditionalOrder(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnErrorConditionalOrderSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcErrorConditionalOrderField *arg2 = (CThostFtdcErrorConditionalOrderField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcErrorConditionalOrderField **)&jarg2; 
  (arg1)->CThostFtdcTraderSpi::OnRtnErrorConditionalOrder(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryContractBank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcContractBankField *arg2 = (CThostFtdcContractBankField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcContractBankField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryContractBank(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryContractBankSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcContractBankField *arg2 = (CThostFtdcContractBankField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcContractBankField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspQryContractBank(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryParkedOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcParkedOrderField *arg2 = (CThostFtdcParkedOrderField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcParkedOrderField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryParkedOrder(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryParkedOrderSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcParkedOrderField *arg2 = (CThostFtdcParkedOrderField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcParkedOrderField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspQryParkedOrder(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryParkedOrderAction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcParkedOrderActionField *arg2 = (CThostFtdcParkedOrderActionField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcParkedOrderActionField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryParkedOrderAction(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryParkedOrderActionSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcParkedOrderActionField *arg2 = (CThostFtdcParkedOrderActionField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcParkedOrderActionField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspQryParkedOrderAction(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryTradingNotice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcTradingNoticeField *arg2 = (CThostFtdcTradingNoticeField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcTradingNoticeField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryTradingNotice(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryTradingNoticeSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcTradingNoticeField *arg2 = (CThostFtdcTradingNoticeField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcTradingNoticeField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspQryTradingNotice(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryBrokerTradingParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcBrokerTradingParamsField *arg2 = (CThostFtdcBrokerTradingParamsField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcBrokerTradingParamsField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryBrokerTradingParams(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryBrokerTradingParamsSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcBrokerTradingParamsField *arg2 = (CThostFtdcBrokerTradingParamsField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcBrokerTradingParamsField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspQryBrokerTradingParams(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryBrokerTradingAlgos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcBrokerTradingAlgosField *arg2 = (CThostFtdcBrokerTradingAlgosField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcBrokerTradingAlgosField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQryBrokerTradingAlgos(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQryBrokerTradingAlgosSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcBrokerTradingAlgosField *arg2 = (CThostFtdcBrokerTradingAlgosField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcBrokerTradingAlgosField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspQryBrokerTradingAlgos(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnFromBankToFutureByBank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcRspTransferField *arg2 = (CThostFtdcRspTransferField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcRspTransferField **)&jarg2; 
  (arg1)->OnRtnFromBankToFutureByBank(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnFromBankToFutureByBankSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcRspTransferField *arg2 = (CThostFtdcRspTransferField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcRspTransferField **)&jarg2; 
  (arg1)->CThostFtdcTraderSpi::OnRtnFromBankToFutureByBank(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnFromFutureToBankByBank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcRspTransferField *arg2 = (CThostFtdcRspTransferField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcRspTransferField **)&jarg2; 
  (arg1)->OnRtnFromFutureToBankByBank(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnFromFutureToBankByBankSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcRspTransferField *arg2 = (CThostFtdcRspTransferField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcRspTransferField **)&jarg2; 
  (arg1)->CThostFtdcTraderSpi::OnRtnFromFutureToBankByBank(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnRepealFromBankToFutureByBank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcRspRepealField *arg2 = (CThostFtdcRspRepealField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcRspRepealField **)&jarg2; 
  (arg1)->OnRtnRepealFromBankToFutureByBank(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnRepealFromBankToFutureByBankSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcRspRepealField *arg2 = (CThostFtdcRspRepealField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcRspRepealField **)&jarg2; 
  (arg1)->CThostFtdcTraderSpi::OnRtnRepealFromBankToFutureByBank(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnRepealFromFutureToBankByBank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcRspRepealField *arg2 = (CThostFtdcRspRepealField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcRspRepealField **)&jarg2; 
  (arg1)->OnRtnRepealFromFutureToBankByBank(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnRepealFromFutureToBankByBankSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcRspRepealField *arg2 = (CThostFtdcRspRepealField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcRspRepealField **)&jarg2; 
  (arg1)->CThostFtdcTraderSpi::OnRtnRepealFromFutureToBankByBank(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnFromBankToFutureByFuture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcRspTransferField *arg2 = (CThostFtdcRspTransferField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcRspTransferField **)&jarg2; 
  (arg1)->OnRtnFromBankToFutureByFuture(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnFromBankToFutureByFutureSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcRspTransferField *arg2 = (CThostFtdcRspTransferField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcRspTransferField **)&jarg2; 
  (arg1)->CThostFtdcTraderSpi::OnRtnFromBankToFutureByFuture(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnFromFutureToBankByFuture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcRspTransferField *arg2 = (CThostFtdcRspTransferField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcRspTransferField **)&jarg2; 
  (arg1)->OnRtnFromFutureToBankByFuture(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnFromFutureToBankByFutureSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcRspTransferField *arg2 = (CThostFtdcRspTransferField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcRspTransferField **)&jarg2; 
  (arg1)->CThostFtdcTraderSpi::OnRtnFromFutureToBankByFuture(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnRepealFromBankToFutureByFutureManual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcRspRepealField *arg2 = (CThostFtdcRspRepealField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcRspRepealField **)&jarg2; 
  (arg1)->OnRtnRepealFromBankToFutureByFutureManual(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnRepealFromBankToFutureByFutureManualSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcRspRepealField *arg2 = (CThostFtdcRspRepealField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcRspRepealField **)&jarg2; 
  (arg1)->CThostFtdcTraderSpi::OnRtnRepealFromBankToFutureByFutureManual(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnRepealFromFutureToBankByFutureManual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcRspRepealField *arg2 = (CThostFtdcRspRepealField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcRspRepealField **)&jarg2; 
  (arg1)->OnRtnRepealFromFutureToBankByFutureManual(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnRepealFromFutureToBankByFutureManualSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcRspRepealField *arg2 = (CThostFtdcRspRepealField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcRspRepealField **)&jarg2; 
  (arg1)->CThostFtdcTraderSpi::OnRtnRepealFromFutureToBankByFutureManual(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnQueryBankBalanceByFuture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcNotifyQueryAccountField *arg2 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcNotifyQueryAccountField **)&jarg2; 
  (arg1)->OnRtnQueryBankBalanceByFuture(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnQueryBankBalanceByFutureSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcNotifyQueryAccountField *arg2 = (CThostFtdcNotifyQueryAccountField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcNotifyQueryAccountField **)&jarg2; 
  (arg1)->CThostFtdcTraderSpi::OnRtnQueryBankBalanceByFuture(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onErrRtnBankToFutureByFuture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcReqTransferField *arg2 = (CThostFtdcReqTransferField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcReqTransferField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  (arg1)->OnErrRtnBankToFutureByFuture(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onErrRtnBankToFutureByFutureSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcReqTransferField *arg2 = (CThostFtdcReqTransferField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcReqTransferField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  (arg1)->CThostFtdcTraderSpi::OnErrRtnBankToFutureByFuture(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onErrRtnFutureToBankByFuture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcReqTransferField *arg2 = (CThostFtdcReqTransferField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcReqTransferField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  (arg1)->OnErrRtnFutureToBankByFuture(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onErrRtnFutureToBankByFutureSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcReqTransferField *arg2 = (CThostFtdcReqTransferField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcReqTransferField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  (arg1)->CThostFtdcTraderSpi::OnErrRtnFutureToBankByFuture(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onErrRtnRepealBankToFutureByFutureManual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcReqRepealField *arg2 = (CThostFtdcReqRepealField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcReqRepealField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  (arg1)->OnErrRtnRepealBankToFutureByFutureManual(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onErrRtnRepealBankToFutureByFutureManualSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcReqRepealField *arg2 = (CThostFtdcReqRepealField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcReqRepealField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  (arg1)->CThostFtdcTraderSpi::OnErrRtnRepealBankToFutureByFutureManual(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onErrRtnRepealFutureToBankByFutureManual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcReqRepealField *arg2 = (CThostFtdcReqRepealField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcReqRepealField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  (arg1)->OnErrRtnRepealFutureToBankByFutureManual(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onErrRtnRepealFutureToBankByFutureManualSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcReqRepealField *arg2 = (CThostFtdcReqRepealField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcReqRepealField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  (arg1)->CThostFtdcTraderSpi::OnErrRtnRepealFutureToBankByFutureManual(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onErrRtnQueryBankBalanceByFuture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcReqQueryAccountField *arg2 = (CThostFtdcReqQueryAccountField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcReqQueryAccountField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  (arg1)->OnErrRtnQueryBankBalanceByFuture(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onErrRtnQueryBankBalanceByFutureSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcReqQueryAccountField *arg2 = (CThostFtdcReqQueryAccountField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcReqQueryAccountField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  (arg1)->CThostFtdcTraderSpi::OnErrRtnQueryBankBalanceByFuture(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnRepealFromBankToFutureByFuture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcRspRepealField *arg2 = (CThostFtdcRspRepealField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcRspRepealField **)&jarg2; 
  (arg1)->OnRtnRepealFromBankToFutureByFuture(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnRepealFromBankToFutureByFutureSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcRspRepealField *arg2 = (CThostFtdcRspRepealField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcRspRepealField **)&jarg2; 
  (arg1)->CThostFtdcTraderSpi::OnRtnRepealFromBankToFutureByFuture(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnRepealFromFutureToBankByFuture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcRspRepealField *arg2 = (CThostFtdcRspRepealField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcRspRepealField **)&jarg2; 
  (arg1)->OnRtnRepealFromFutureToBankByFuture(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnRepealFromFutureToBankByFutureSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcRspRepealField *arg2 = (CThostFtdcRspRepealField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcRspRepealField **)&jarg2; 
  (arg1)->CThostFtdcTraderSpi::OnRtnRepealFromFutureToBankByFuture(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspFromBankToFutureByFuture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcReqTransferField *arg2 = (CThostFtdcReqTransferField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcReqTransferField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspFromBankToFutureByFuture(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspFromBankToFutureByFutureSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcReqTransferField *arg2 = (CThostFtdcReqTransferField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcReqTransferField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspFromBankToFutureByFuture(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspFromFutureToBankByFuture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcReqTransferField *arg2 = (CThostFtdcReqTransferField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcReqTransferField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspFromFutureToBankByFuture(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspFromFutureToBankByFutureSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcReqTransferField *arg2 = (CThostFtdcReqTransferField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcReqTransferField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspFromFutureToBankByFuture(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQueryBankAccountMoneyByFuture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcReqQueryAccountField *arg2 = (CThostFtdcReqQueryAccountField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcReqQueryAccountField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->OnRspQueryBankAccountMoneyByFuture(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRspQueryBankAccountMoneyByFutureSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4, jboolean jarg5) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcReqQueryAccountField *arg2 = (CThostFtdcReqQueryAccountField *) 0 ;
  CThostFtdcRspInfoField *arg3 = (CThostFtdcRspInfoField *) 0 ;
  int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcReqQueryAccountField **)&jarg2; 
  arg3 = *(CThostFtdcRspInfoField **)&jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  (arg1)->CThostFtdcTraderSpi::OnRspQueryBankAccountMoneyByFuture(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnOpenAccountByBank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcOpenAccountField *arg2 = (CThostFtdcOpenAccountField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcOpenAccountField **)&jarg2; 
  (arg1)->OnRtnOpenAccountByBank(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnOpenAccountByBankSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcOpenAccountField *arg2 = (CThostFtdcOpenAccountField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcOpenAccountField **)&jarg2; 
  (arg1)->CThostFtdcTraderSpi::OnRtnOpenAccountByBank(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnCancelAccountByBank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcCancelAccountField *arg2 = (CThostFtdcCancelAccountField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcCancelAccountField **)&jarg2; 
  (arg1)->OnRtnCancelAccountByBank(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnCancelAccountByBankSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcCancelAccountField *arg2 = (CThostFtdcCancelAccountField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcCancelAccountField **)&jarg2; 
  (arg1)->CThostFtdcTraderSpi::OnRtnCancelAccountByBank(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnChangeAccountByBank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcChangeAccountField *arg2 = (CThostFtdcChangeAccountField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcChangeAccountField **)&jarg2; 
  (arg1)->OnRtnChangeAccountByBank(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1onRtnChangeAccountByBankSwigExplicitCThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  CThostFtdcChangeAccountField *arg2 = (CThostFtdcChangeAccountField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  arg2 = *(CThostFtdcChangeAccountField **)&jarg2; 
  (arg1)->CThostFtdcTraderSpi::OnRtnChangeAccountByBank(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_new_1CThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcTraderSpi *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcTraderSpi *)new SwigDirector_CThostFtdcTraderSpi(jenv);
  *(CThostFtdcTraderSpi **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_delete_1CThostFtdcTraderSpi(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CThostFtdcTraderSpi *arg1 = (CThostFtdcTraderSpi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CThostFtdcTraderSpi **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  CThostFtdcTraderSpi *obj = *((CThostFtdcTraderSpi **)&objarg);
  (void)jcls;
  SwigDirector_CThostFtdcTraderSpi *director = dynamic_cast<SwigDirector_CThostFtdcTraderSpi *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderSpi_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  CThostFtdcTraderSpi *obj = *((CThostFtdcTraderSpi **)&objarg);
  SwigDirector_CThostFtdcTraderSpi *director = dynamic_cast<SwigDirector_CThostFtdcTraderSpi *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1createFtdcTraderApi_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  CThostFtdcTraderApi *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (CThostFtdcTraderApi *)CThostFtdcTraderApi::CreateFtdcTraderApi((char const *)arg1);
  *(CThostFtdcTraderApi **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1createFtdcTraderApi_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CThostFtdcTraderApi *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CThostFtdcTraderApi *)CThostFtdcTraderApi::CreateFtdcTraderApi();
  *(CThostFtdcTraderApi **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1release(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  (arg1)->Release();
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  (arg1)->Init();
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1join(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  result = (int)(arg1)->Join();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1getTradingDay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  result = (char *)(arg1)->GetTradingDay();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1registerFront(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->RegisterFront(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1registerNameServer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->RegisterNameServer(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1registerFensUserInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcFensUserInfoField *arg2 = (CThostFtdcFensUserInfoField *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcFensUserInfoField **)&jarg2; 
  (arg1)->RegisterFensUserInfo(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1registerSpi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcTraderSpi *arg2 = (CThostFtdcTraderSpi *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcTraderSpi **)&jarg2; 
  (arg1)->RegisterSpi(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1subscribePrivateTopic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  THOST_TE_RESUME_TYPE arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = (THOST_TE_RESUME_TYPE)jarg2; 
  (arg1)->SubscribePrivateTopic(arg2);
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1subscribePublicTopic(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  THOST_TE_RESUME_TYPE arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = (THOST_TE_RESUME_TYPE)jarg2; 
  (arg1)->SubscribePublicTopic(arg2);
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqAuthenticate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcReqAuthenticateField *arg2 = (CThostFtdcReqAuthenticateField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcReqAuthenticateField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqAuthenticate(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqUserLogin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcReqUserLoginField *arg2 = (CThostFtdcReqUserLoginField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcReqUserLoginField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqUserLogin(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqUserLogout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcUserLogoutField *arg2 = (CThostFtdcUserLogoutField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcUserLogoutField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqUserLogout(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqUserPasswordUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcUserPasswordUpdateField *arg2 = (CThostFtdcUserPasswordUpdateField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcUserPasswordUpdateField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqUserPasswordUpdate(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqTradingAccountPasswordUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcTradingAccountPasswordUpdateField *arg2 = (CThostFtdcTradingAccountPasswordUpdateField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcTradingAccountPasswordUpdateField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqTradingAccountPasswordUpdate(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqOrderInsert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcInputOrderField *arg2 = (CThostFtdcInputOrderField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcInputOrderField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqOrderInsert(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqParkedOrderInsert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcParkedOrderField *arg2 = (CThostFtdcParkedOrderField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcParkedOrderField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqParkedOrderInsert(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqParkedOrderAction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcParkedOrderActionField *arg2 = (CThostFtdcParkedOrderActionField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcParkedOrderActionField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqParkedOrderAction(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqOrderAction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcInputOrderActionField *arg2 = (CThostFtdcInputOrderActionField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcInputOrderActionField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqOrderAction(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqQueryMaxOrderVolume(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcQueryMaxOrderVolumeField *arg2 = (CThostFtdcQueryMaxOrderVolumeField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcQueryMaxOrderVolumeField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQueryMaxOrderVolume(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqSettlementInfoConfirm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcSettlementInfoConfirmField *arg2 = (CThostFtdcSettlementInfoConfirmField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcSettlementInfoConfirmField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqSettlementInfoConfirm(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqRemoveParkedOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcRemoveParkedOrderField *arg2 = (CThostFtdcRemoveParkedOrderField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcRemoveParkedOrderField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqRemoveParkedOrder(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqRemoveParkedOrderAction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcRemoveParkedOrderActionField *arg2 = (CThostFtdcRemoveParkedOrderActionField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcRemoveParkedOrderActionField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqRemoveParkedOrderAction(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqQryOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcQryOrderField *arg2 = (CThostFtdcQryOrderField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcQryOrderField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryOrder(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqQryTrade(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcQryTradeField *arg2 = (CThostFtdcQryTradeField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcQryTradeField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryTrade(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqQryInvestorPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcQryInvestorPositionField *arg2 = (CThostFtdcQryInvestorPositionField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcQryInvestorPositionField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryInvestorPosition(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqQryTradingAccount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcQryTradingAccountField *arg2 = (CThostFtdcQryTradingAccountField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcQryTradingAccountField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryTradingAccount(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqQryInvestor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcQryInvestorField *arg2 = (CThostFtdcQryInvestorField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcQryInvestorField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryInvestor(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqQryTradingCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcQryTradingCodeField *arg2 = (CThostFtdcQryTradingCodeField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcQryTradingCodeField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryTradingCode(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqQryInstrumentMarginRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcQryInstrumentMarginRateField *arg2 = (CThostFtdcQryInstrumentMarginRateField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcQryInstrumentMarginRateField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryInstrumentMarginRate(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqQryInstrumentCommissionRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcQryInstrumentCommissionRateField *arg2 = (CThostFtdcQryInstrumentCommissionRateField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcQryInstrumentCommissionRateField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryInstrumentCommissionRate(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqQryExchange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcQryExchangeField *arg2 = (CThostFtdcQryExchangeField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcQryExchangeField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryExchange(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqQryInstrument(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcQryInstrumentField *arg2 = (CThostFtdcQryInstrumentField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcQryInstrumentField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryInstrument(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqQryDepthMarketData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcQryDepthMarketDataField *arg2 = (CThostFtdcQryDepthMarketDataField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcQryDepthMarketDataField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryDepthMarketData(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqQrySettlementInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcQrySettlementInfoField *arg2 = (CThostFtdcQrySettlementInfoField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcQrySettlementInfoField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQrySettlementInfo(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqQryTransferBank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcQryTransferBankField *arg2 = (CThostFtdcQryTransferBankField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcQryTransferBankField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryTransferBank(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqQryInvestorPositionDetail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcQryInvestorPositionDetailField *arg2 = (CThostFtdcQryInvestorPositionDetailField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcQryInvestorPositionDetailField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryInvestorPositionDetail(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqQryNotice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcQryNoticeField *arg2 = (CThostFtdcQryNoticeField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcQryNoticeField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryNotice(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqQrySettlementInfoConfirm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcQrySettlementInfoConfirmField *arg2 = (CThostFtdcQrySettlementInfoConfirmField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcQrySettlementInfoConfirmField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQrySettlementInfoConfirm(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqQryInvestorPositionCombineDetail(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcQryInvestorPositionCombineDetailField *arg2 = (CThostFtdcQryInvestorPositionCombineDetailField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcQryInvestorPositionCombineDetailField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryInvestorPositionCombineDetail(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqQryCFMMCTradingAccountKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcQryCFMMCTradingAccountKeyField *arg2 = (CThostFtdcQryCFMMCTradingAccountKeyField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcQryCFMMCTradingAccountKeyField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryCFMMCTradingAccountKey(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqQryEWarrantOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcQryEWarrantOffsetField *arg2 = (CThostFtdcQryEWarrantOffsetField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcQryEWarrantOffsetField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryEWarrantOffset(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqQryInvestorProductGroupMargin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcQryInvestorProductGroupMarginField *arg2 = (CThostFtdcQryInvestorProductGroupMarginField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcQryInvestorProductGroupMarginField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryInvestorProductGroupMargin(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqQryExchangeMarginRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcQryExchangeMarginRateField *arg2 = (CThostFtdcQryExchangeMarginRateField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcQryExchangeMarginRateField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryExchangeMarginRate(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqQryExchangeMarginRateAdjust(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcQryExchangeMarginRateAdjustField *arg2 = (CThostFtdcQryExchangeMarginRateAdjustField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcQryExchangeMarginRateAdjustField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryExchangeMarginRateAdjust(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqQryTransferSerial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcQryTransferSerialField *arg2 = (CThostFtdcQryTransferSerialField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcQryTransferSerialField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryTransferSerial(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqQryAccountregister(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcQryAccountregisterField *arg2 = (CThostFtdcQryAccountregisterField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcQryAccountregisterField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryAccountregister(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqQryContractBank(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcQryContractBankField *arg2 = (CThostFtdcQryContractBankField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcQryContractBankField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryContractBank(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqQryParkedOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcQryParkedOrderField *arg2 = (CThostFtdcQryParkedOrderField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcQryParkedOrderField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryParkedOrder(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqQryParkedOrderAction(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcQryParkedOrderActionField *arg2 = (CThostFtdcQryParkedOrderActionField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcQryParkedOrderActionField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryParkedOrderAction(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqQryTradingNotice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcQryTradingNoticeField *arg2 = (CThostFtdcQryTradingNoticeField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcQryTradingNoticeField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryTradingNotice(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqQryBrokerTradingParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcQryBrokerTradingParamsField *arg2 = (CThostFtdcQryBrokerTradingParamsField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcQryBrokerTradingParamsField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryBrokerTradingParams(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqQryBrokerTradingAlgos(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcQryBrokerTradingAlgosField *arg2 = (CThostFtdcQryBrokerTradingAlgosField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcQryBrokerTradingAlgosField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQryBrokerTradingAlgos(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqFromBankToFutureByFuture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcReqTransferField *arg2 = (CThostFtdcReqTransferField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcReqTransferField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqFromBankToFutureByFuture(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqFromFutureToBankByFuture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcReqTransferField *arg2 = (CThostFtdcReqTransferField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcReqTransferField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqFromFutureToBankByFuture(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_ctp_CtpJNI_CThostFtdcTraderApi_1reqQueryBankAccountMoneyByFuture(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  CThostFtdcTraderApi *arg1 = (CThostFtdcTraderApi *) 0 ;
  CThostFtdcReqQueryAccountField *arg2 = (CThostFtdcReqQueryAccountField *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CThostFtdcTraderApi **)&jarg1; 
  arg2 = *(CThostFtdcReqQueryAccountField **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->ReqQueryBankAccountMoneyByFuture(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_ctp_CtpJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[85] = {
    {
      "SwigDirector_CThostFtdcMdSpi_onFrontConnected", "(Lcom/ctp/CThostFtdcMdSpi;)V" 
    },
    {
      "SwigDirector_CThostFtdcMdSpi_onFrontDisconnected", "(Lcom/ctp/CThostFtdcMdSpi;I)V" 
    },
    {
      "SwigDirector_CThostFtdcMdSpi_onHeartBeatWarning", "(Lcom/ctp/CThostFtdcMdSpi;I)V" 
    },
    {
      "SwigDirector_CThostFtdcMdSpi_onRspUserLogin", "(Lcom/ctp/CThostFtdcMdSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcMdSpi_onRspUserLogout", "(Lcom/ctp/CThostFtdcMdSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcMdSpi_onRspError", "(Lcom/ctp/CThostFtdcMdSpi;JIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcMdSpi_onRspSubMarketData", "(Lcom/ctp/CThostFtdcMdSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcMdSpi_onRspUnSubMarketData", "(Lcom/ctp/CThostFtdcMdSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcMdSpi_onRtnDepthMarketData", "(Lcom/ctp/CThostFtdcMdSpi;J)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onFrontConnected", "(Lcom/ctp/CThostFtdcTraderSpi;)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onFrontDisconnected", "(Lcom/ctp/CThostFtdcTraderSpi;I)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onHeartBeatWarning", "(Lcom/ctp/CThostFtdcTraderSpi;I)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspAuthenticate", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspUserLogin", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspUserLogout", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspUserPasswordUpdate", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspTradingAccountPasswordUpdate", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspOrderInsert", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspParkedOrderInsert", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspParkedOrderAction", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspOrderAction", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspQueryMaxOrderVolume", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspSettlementInfoConfirm", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspRemoveParkedOrder", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspRemoveParkedOrderAction", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspQryOrder", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspQryTrade", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspQryInvestorPosition", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspQryTradingAccount", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspQryInvestor", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspQryTradingCode", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspQryInstrumentMarginRate", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspQryInstrumentCommissionRate", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspQryExchange", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspQryInstrument", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspQryDepthMarketData", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspQrySettlementInfo", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspQryTransferBank", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspQryInvestorPositionDetail", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspQryNotice", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspQrySettlementInfoConfirm", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspQryInvestorPositionCombineDetail", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspQryCFMMCTradingAccountKey", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspQryEWarrantOffset", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspQryInvestorProductGroupMargin", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspQryExchangeMarginRate", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspQryExchangeMarginRateAdjust", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspQryTransferSerial", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspQryAccountregister", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspError", "(Lcom/ctp/CThostFtdcTraderSpi;JIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRtnOrder", "(Lcom/ctp/CThostFtdcTraderSpi;J)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRtnTrade", "(Lcom/ctp/CThostFtdcTraderSpi;J)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onErrRtnOrderInsert", "(Lcom/ctp/CThostFtdcTraderSpi;JJ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onErrRtnOrderAction", "(Lcom/ctp/CThostFtdcTraderSpi;JJ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRtnInstrumentStatus", "(Lcom/ctp/CThostFtdcTraderSpi;J)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRtnTradingNotice", "(Lcom/ctp/CThostFtdcTraderSpi;J)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRtnErrorConditionalOrder", "(Lcom/ctp/CThostFtdcTraderSpi;J)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspQryContractBank", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspQryParkedOrder", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspQryParkedOrderAction", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspQryTradingNotice", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspQryBrokerTradingParams", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspQryBrokerTradingAlgos", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRtnFromBankToFutureByBank", "(Lcom/ctp/CThostFtdcTraderSpi;J)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRtnFromFutureToBankByBank", "(Lcom/ctp/CThostFtdcTraderSpi;J)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRtnRepealFromBankToFutureByBank", "(Lcom/ctp/CThostFtdcTraderSpi;J)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRtnRepealFromFutureToBankByBank", "(Lcom/ctp/CThostFtdcTraderSpi;J)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRtnFromBankToFutureByFuture", "(Lcom/ctp/CThostFtdcTraderSpi;J)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRtnFromFutureToBankByFuture", "(Lcom/ctp/CThostFtdcTraderSpi;J)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRtnRepealFromBankToFutureByFutureManual", "(Lcom/ctp/CThostFtdcTraderSpi;J)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRtnRepealFromFutureToBankByFutureManual", "(Lcom/ctp/CThostFtdcTraderSpi;J)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRtnQueryBankBalanceByFuture", "(Lcom/ctp/CThostFtdcTraderSpi;J)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onErrRtnBankToFutureByFuture", "(Lcom/ctp/CThostFtdcTraderSpi;JJ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onErrRtnFutureToBankByFuture", "(Lcom/ctp/CThostFtdcTraderSpi;JJ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onErrRtnRepealBankToFutureByFutureManual", "(Lcom/ctp/CThostFtdcTraderSpi;JJ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onErrRtnRepealFutureToBankByFutureManual", "(Lcom/ctp/CThostFtdcTraderSpi;JJ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onErrRtnQueryBankBalanceByFuture", "(Lcom/ctp/CThostFtdcTraderSpi;JJ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRtnRepealFromBankToFutureByFuture", "(Lcom/ctp/CThostFtdcTraderSpi;J)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRtnRepealFromFutureToBankByFuture", "(Lcom/ctp/CThostFtdcTraderSpi;J)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspFromBankToFutureByFuture", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspFromFutureToBankByFuture", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRspQueryBankAccountMoneyByFuture", "(Lcom/ctp/CThostFtdcTraderSpi;JJIZ)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRtnOpenAccountByBank", "(Lcom/ctp/CThostFtdcTraderSpi;J)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRtnCancelAccountByBank", "(Lcom/ctp/CThostFtdcTraderSpi;J)V" 
    },
    {
      "SwigDirector_CThostFtdcTraderSpi_onRtnChangeAccountByBank", "(Lcom/ctp/CThostFtdcTraderSpi;J)V" 
    }
  };
  Swig::jclass_CtpJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_CtpJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_methids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_methids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

